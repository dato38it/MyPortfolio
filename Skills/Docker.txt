Task:
Delete an image, container, and volume
Decision:
$ docker images
$ docker system prune
$ docker images
REPOSITORY              TAG            IMAGE ID       CREATED         SIZE
php                     latest         dc8b9808febc   13 hours ago    414MB
dt/webservers   lamp           dc8b9808febc   13 hours ago    414MB
lamp_web-server         latest         dc8b9808febc   13 hours ago    414MB
dpage/pgadmin4          latest         YOUR-ID8   4 days ago      382MB
postgres                12             YOUR-ID9   2 weeks ago     373MB
ubuntu                  20.04          20fffa419e3a   7 weeks ago     72.8MB
phpmyadmin/phpmyadmin   5.0.2          125749bd47bf   22 months ago   469MB
mysql                   8.0.19         0c27e8e5fcfa   2 years ago     546MB
php                     7.4.3-apache   d753d5b380a1   2 years ago     414MB
$ docker system prune -a
$ docker images
$ docker ps -a
$ docker volume ls
DRIVER    VOLUME NAME
local     YOUR-ID13
local     YOUR-ID14
local     YOUR-ID15
local     YOUR-ID16
local     YOUR-ID17
local     docker-mysqlphpmyadmin_dbdata
local     docker-postresqlpgadmin_db-data
local     docker_db-data
local     lamp_mysql-data
local     postgreslpgadmin_db-data
$ docker volume r-t YOUR-ID13 YOUR-ID14 YOUR-ID15 YOUR-ID16 YOUR-ID17 docker-mysqlphpmyadmin_dbdata docker-postresqlpgadmin_db-data docker_db-data lamp_mysql-data postgreslpgadmin_db-data
$ docker volume ls
Task:
Создадим новый проект. Для этого создаем файл docker-compose.yml. В ссылке https://hub.docker.com/_/mariadb есть инструкция для compose - копируем и вставлем по этой инструкции. после в директории, где расположен этот файл запустим ее. Потом надо будет в браузере локальной машины запустить 127.0.0.1:6080
Decision:
$ ls
docker-compose.yml  Dockerfile
$ cat Dockerfile
FROM ubuntu
RUN apt-get update && apt-get install -y cowsay && ln -s /usr/games/cowsay /usr/bin/cowsay
ENTRYPOINT ["cowsay"]
$ cat docker-compose.yml
version: '3.1'
services:
db:
image: mariadb
restart: always
environment:
  MYSQL_ROOT_PASSWORD: YOUR-PASSWORD
adminer:
image: adminer
restart: always
ports:
  - 6080:8080
$ docker -v
$ docker-compose -v
$ docker-compose up
$ docker-compose up -d
$ docker-compose ps
    Name                Command          State           Ports        
------------------------------------------------------------------------
docker_adminer_1   entrypoint.sh docker-   Up      0.0.0.0:6080->8080/tc
                 php-e ...                       p,:::6080->8080/tcp  
docker_db_1        docker-entrypoint.sh    Up      3306/tcp             
                 mysqld
Decision:
В винде тот же самый файл и те же команды запуска. Единственное, чтоб узнать ip адрес машины, для запуска в браузере напишем команду - docker-machine ip default. и в браузере уже по этому адресу запускаем проект
Task:
Уменьшить размер образа - файловая система UnionFS и слои. Посмотрим список образов, которые у нас есть локально и команду историю образа. Создадим образ и проверим его историю. Тут каждая команда в отдельном слое
Decision:
$ docker images
REPOSITORY        TAG       IMAGE ID       CREATED       SIZE
thost/myapp   latest    52bf88faf371   2 days ago    147MB
thost/myapp   <none>    c26a6cad11ba   2 days ago    147MB
bitnami/apache    latest    6edfa339f61e   3 days ago    176MB
adminer           latest    7707fd9b142f   4 days ago    89.8MB
docker_adminer    latest    7707fd9b142f   4 days ago    89.8MB
docker_db         latest    992bce5ed710   12 days ago   401MB
mariadb           latest    992bce5ed710   12 days ago   401MB
ubuntu            latest    7e0aa2d69a15   12 days ago   72.7MB
$ docker history adminer
IMAGE          CREATED       CREATED BY                                      SIZE      COMMENT
7707fd9b142f   4 days ago    /bin/sh -c #(nop)  EXPOSE 8080                  0B        
<missing>      4 days ago    /bin/sh -c #(nop)  CMD ["php" "-S" "[::]:808…   0B        
<missing>      4 days ago    /bin/sh -c #(nop)  USER adminer                 0B        
<missing>      4 days ago    /bin/sh -c #(nop)  ENTRYPOINT ["entrypoint.s…   0B        
<missing>      4 days ago    /bin/sh -c #(nop) COPY file:5ff0be587f5dd916…   482B      
<missing>      4 days ago    /bin/sh -c set -x && curl -fsSL https://gith…   1.15MB    
<missing>      4 days ago    /bin/sh -c #(nop)  ENV ADMINER_SRC_DOWNLOAD_…   0B        
<missing>      4 days ago    /bin/sh -c #(nop)  ENV ADMINER_DOWNLOAD_SHA2…   0B        
<missing>      4 days ago    /bin/sh -c #(nop)  ENV ADMINER_VERSION=4.8.0    0B        
<missing>      4 days ago    /bin/sh -c #(nop) COPY multi:3020a2cf8da93de…   3.12kB    
<missing>      4 days ago    /bin/sh -c set -x && apk add --no-cache --vi…   6.35MB    
<missing>      4 days ago    /bin/sh -c #(nop) WORKDIR /var/www/html         0B        
<missing>      4 days ago    /bin/sh -c addgroup -S adminer && adduser -S…   5.05kB    
<missing>      4 days ago    /bin/sh -c #(nop)  STOPSIGNAL SIGINT            0B        
<missing>      4 days ago    /bin/sh -c echo "upload_max_filesize = 128M"…   113B      
<missing>      4 days ago    /bin/sh -c #(nop)  CMD ["php" "-a"]             0B        
<missing>      4 days ago    /bin/sh -c #(nop)  ENTRYPOINT ["docker-php-e…   0B        
<missing>      4 days ago    /bin/sh -c docker-php-ext-enable sodium         48.2kB    
<missing>      4 days ago    /bin/sh -c #(nop) COPY multi:efd917b98407edb…   6.74kB    
<missing>      4 days ago    /bin/sh -c set -eux;  apk add --no-cache --v…   62.7MB    
<missing>      4 days ago    /bin/sh -c #(nop) COPY file:ce57c04b70896f77…   587B      
<missing>      4 days ago    /bin/sh -c set -eux;   apk add --no-cache --…   10.4MB    
<missing>      4 days ago    /bin/sh -c #(nop)  ENV PHP_SHA256=ab97f22b12…   0B        
<missing>      4 days ago    /bin/sh -c #(nop)  ENV PHP_URL=https://www.p…   0B        
<missing>      4 days ago    /bin/sh -c #(nop)  ENV PHP_VERSION=7.4.18       0B        
<missing>      3 weeks ago   /bin/sh -c #(nop)  ENV GPG_KEYS=42670A7FE4D0…   0B        
<missing>      3 weeks ago   /bin/sh -c #(nop)  ENV PHP_LDFLAGS=-Wl,-O1 -…   0B        
<missing>      3 weeks ago   /bin/sh -c #(nop)  ENV PHP_CPPFLAGS=-fstack-…   0B        
<missing>      3 weeks ago   /bin/sh -c #(nop)  ENV PHP_CFLAGS=-fstack-pr…   0B        
<missing>      3 weeks ago   /bin/sh -c set -eux;  mkdir -p "$PHP_INI_DIR…   0B        
<missing>      3 weeks ago   /bin/sh -c #(nop)  ENV PHP_INI_DIR=/usr/loca…   0B        
<missing>      3 weeks ago   /bin/sh -c set -eux;  addgroup -g 82 -S www-…   4.68kB    
<missing>      3 weeks ago   /bin/sh -c apk add --no-cache   ca-certifi-ca…   3.54MB    
<missing>      3 weeks ago   /bin/sh -c #(nop)  ENV PHPIZE_DEPS=autoconf …   0B        
<missing>      3 weeks ago   /bin/sh -c #(nop)  CMD ["/bin/sh"]              0B        
<missing>      3 weeks ago   /bin/sh -c #(nop) ADD file:8ec69d882e7f29f06…   5.61MB    
$ vim Dockerfile
$ cat Dockerfile
FROM ubuntu
RUN apt-get update && apt-get install -y cowsay && ln -s /usr/games/cowsay /usr/bin/cowsay
ENTRYPOINT ["cowsay"]
$ docker build -t dkatest .
...
Successfully built 52bf88faf371
Successfully tagged dkatest:latest
$ docker images
REPOSITORY        TAG       IMAGE ID       CREATED       SIZE
thost/myapp   latest    52bf88faf371   2 days ago    147MB
dkatest           latest    52bf88faf371   2 days ago    147MB
thost/myapp   <none>    c26a6cad11ba   2 days ago    147MB
bitnami/apache    latest    6edfa339f61e   3 days ago    176MB
adminer           latest    7707fd9b142f   4 days ago    89.8MB
docker_adminer    latest    7707fd9b142f   4 days ago    89.8MB
mariadb           latest    992bce5ed710   12 days ago   401MB
docker_db         latest    992bce5ed710   12 days ago   401MB
ubuntu            latest    7e0aa2d69a15   12 days ago   72.7MB
$ docker history dkatest
IMAGE          CREATED       CREATED BY                                      SIZE      COMMENT
52bf88faf371   2 days ago    /bin/sh -c #(nop)  ENTRYPOINT ["cowsay"]        0B        
c43d3a9413c9   2 days ago    /bin/sh -c apt-get update && apt-get install…   73.9MB    
7e0aa2d69a15   12 days ago   /bin/sh -c #(nop)  CMD ["/bin/bash"]            0B        
<missing>      12 days ago   /bin/sh -c mkdir -p /run/systemd && echo 'do…   7B        
<missing>      12 days ago   /bin/sh -c [ -z "$(apt-get indextargets)" ]     0B        
<missing>      12 days ago   /bin/sh -c set -xe   && echo '#!/bin/sh' > /…   811B      
<missing>      12 days ago   /bin/sh -c #(nop) ADD file:5c44a80f547b7d68b…   72.7MB
Task:
Давайте изменим Dockerfile, чтобы каждая команда начиналась на новых уровнях и в конце добавим удаление всех файлов, которая насоздавала команда. Переформируем навый образ и посмотрим на размер. Вернем в этом файле команды и добавим удаление. Также создаем образ и просмотрим размер.
Decision:
$ vim Dockerfile
$ cat Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y cowsay
RUN ln -s /usr/games/cowsay /usr/bin/cowsay
RUN r-t -rf /var/lib/apt/lists/*
ENTRYPOINT ["cowsay"]
$ docker build -t dkamanyrun .
...
Successfully built 944e60e98ca0
Successfully tagged dkamanyrun:latest
$ docker images
REPOSITORY        TAG       IMAGE ID       CREATED         SIZE
dkamanyrun        latest    944e60e98ca0   9 seconds ago   147MB
thost/myapp   latest    52bf88faf371   2 days ago      147MB
dkatest           latest    52bf88faf371   2 days ago      147MB
thost/myapp   <none>    c26a6cad11ba   2 days ago      147MB
bitnami/apache    latest    6edfa339f61e   3 days ago      176MB
adminer           latest    7707fd9b142f   4 days ago      89.8MB
docker_adminer    latest    7707fd9b142f   4 days ago      89.8MB
mariadb           latest    992bce5ed710   12 days ago     401MB
docker_db         latest    992bce5ed710   12 days ago     401MB
ubuntu            latest    7e0aa2d69a15   12 days ago     72.7MB
$ vim Dockerfile
$ cat Dockerfile
FROM ubuntu
RUN apt-get update \
    && apt-get install -y cowsay \
    && ln -s /usr/games/cowsay /usr/bin/cowsay \
    && r-t -rf /var/lib/apt/lists/*
ENTRYPOINT ["cowsay"]
$ docker build -t dkaonerun .
...
Successfully built af8ceb4756cc
Successfully tagged dkaonerun:latest
$ docker images
REPOSITORY        TAG       IMAGE ID       CREATED          SIZE
dkaonerun         latest    af8ceb4756cc   14 seconds ago   119MB
dkamanyrun        latest    944e60e98ca0   4 minutes ago    147MB
thost/myapp   latest    52bf88faf371   2 days ago       147MB
dkatest           latest    52bf88faf371   2 days ago       147MB
thost/myapp   <none>    c26a6cad11ba   2 days ago       147MB
bitnami/apache    latest    6edfa339f61e   3 days ago       176MB
adminer           latest    7707fd9b142f   4 days ago       89.8MB
docker_adminer    latest    7707fd9b142f   4 days ago       89.8MB
mariadb           latest    992bce5ed710   12 days ago      401MB
docker_db         latest    992bce5ed710   12 days ago      401MB
ubuntu            latest    7e0aa2d69a15   12 days ago      72.7MB
Task:
Образы занимают места на диске и если они вам уже не нужны, то сначала удаляем контейнеры, а затем все образы
Decision:
$ docker images
REPOSITORY        TAG       IMAGE ID       CREATED         SIZE
dkaonerun         latest    af8ceb4756cc   2 minutes ago   119MB
dkamanyrun        latest    944e60e98ca0   6 minutes ago   147MB
thost/myapp   latest    52bf88faf371   2 days ago      147MB
dkatest           latest    52bf88faf371   2 days ago      147MB
thost/myapp   <none>    c26a6cad11ba   2 days ago      147MB
bitnami/apache    latest    6edfa339f61e   3 days ago      176MB
docker_adminer    latest    7707fd9b142f   4 days ago      89.8MB
adminer           latest    7707fd9b142f   4 days ago      89.8MB
docker_db         latest    992bce5ed710   12 days ago     401MB
mariadb           latest    992bce5ed710   12 days ago     401MB
ubuntu            latest    7e0aa2d69a15   12 days ago     72.7MB
$ docker r-t -v $(docker ps -aq -f status=exited)
f3258c7f0edb
4e4079f3befe
cce4d69b3f3f
d6562c779f1a
c596a54cccb4
386a76086449
eae5e2c135a5
$ docker r-ti $(docker images -q) --force
Source:
https://stepik.org/course/1612/syllabus
Task:
Here I am using Docker Compose to create a PostgreSQL container and access it using pgAdmin 4, the PostgreSQL admin web interface. You also need to access the PostgreSQL database server running in a Docker container from the Datagrid IDE.
Decision:
$ mkdir PostgreslPgadmin
$ cd PostgreslPgadmin/
$ vim docker-compose.yml
$ cat docker-compose.yml
version: "2.3"
services:
demo-container-db:
image: postgres:12
mem_limit: 1536MB
mem_reservation: 1G
environment:
  POSTGRES_USER: YOUR-USERNAME
  POSTGRES_PASSWORD: YOUR-PASSWORD
ports:
- "5442:5432"
networks:
- TestNetwork
volumes:
- db-data:/var/lib/postgresql/data
demo-pgadmin4:
image: dpage/pgadmin4
environment:
  PGADMIN_DEFAULT_EMAIL: YOUR-MAIL
  PGADMIN_DEFAULT_PASSWORD: YOUR-PASSWORD
ports:
- "8889:80"
networks:
- TestNetwork
networks:
TestNetwork:
driver: bridge
volumes:
db-data:
$ docker-compose up -d
$ sudo netstat -tlpn
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:5442            0.0.0.0:*               LISTEN      732/docker-proxy
tcp        0      0 0.0.0.0:8889            0.0.0.0:*               LISTEN      752/docker-proxy
tcp6       0      0 :::5442                 :::*                    LISTEN      739/docker-proxy
tcp6       0      0 :::8889                 :::*                    LISTEN      759/docker-proxy
$ docker images
REPOSITORY              TAG            IMAGE ID       CREATED         SIZE
...
dpage/pgadmin4          latest         YOUR-ID8   4 days ago      382MB
postgres                12             YOUR-ID9   2 weeks ago     373MB
$ docker container ls
CONTAINER ID   IMAGE            COMMAND                  CREATED         STATUS         PORTS                                            NAMES
YOUR-ID10   dpage/pgadmin4   "/entrypoint.sh"         3 minutes ago   Up 3 minutes   443/tcp, 0.0.0.0:8889->80/tcp, :::8889->80/tcp   postgreslpgadmin_demo-pgadmin4_1
YOUR-ID11   postgres:12      "docker-entrypoint.s…"   3 minutes ago   Up 3 minutes   0.0.0.0:5442->5432/tcp, :::5442->5432/tcp        postgreslpgadmin_demo-container-db_1
$ docker inspect YOUR-ID10
...
                "NetworkID": "YOUR-ID12",
                "EndpointID": "YOUR-ID13",
                "Gateway": "YOUR-IP",
                "IPAddress": "YOUR-IP1",
                "IPPrefixLen": 16,
                "IPv6Gateway": "",
                "GlobalIPv6Address": "",
                "GlobalIPv6PrefixLen": 0,
                "MacAddress": "YOUR-MACIP1",
                "DriverOpts": null
            }
        }
    }
}
]
$ firefox http://localhost:8889 &
Mail logins - Servers - register - server - name - TestServer - port - 5432 - username - YOUR-USERNAME - password - YOUR-PASSWORD - save password - hostname - YOUR-IP1 - save
$ docker-compose down
$ docker ps -a
CONTAINER ID   IMAGE                    COMMAND                  CREATED             STATUS                           PORTS     NAMES
YOUR-ID   dt/apache:v1     "/bin/sh -c 'apache2…"   About an hour ago   Exited (137) About an hour ago             ecstatic_tesla
$ docker images -a
REPOSITORY              TAG            IMAGE ID       CREATED             SIZE
...
dpage/pgadmin4          latest         YOUR-ID8   4 days ago          382MB
postgres                12             YOUR-ID9   2 weeks ago         373MB
ubuntu                  20.04          20fffa419e3a   7 weeks ago         72.8MB
Source:
https://linuxhint.com/lamp_server_docker/
https://www.youtube.com/playlist?list=PLTd7y0vdxhK643dY-Th-fQvyNP46eW7CU    
https://linuxhint.com/postgresql_docker/
https://www.youtube.com/playlist?list=PL7-fzhJ95xrPJUSzziEsymILf0bKusiLZ
Task:
Связь Dockerfile и docker-compose. Используем docker-compose и Dockerfile для запуска контейнеров. Создадим папку, которая будет относиться к образу базы данных и в нем создаем Dockerfile. В нем указываем какой образ нужно использовать (mariadb), в docker-compose добавляем ключ build и image можно убрать. Создаем новую директорию с сервисом adminer. Тут все по аналогии нужно делать, как в базе данных делали. И в терминале пробуем запустить. Потом перестроим наш проект, после запускаем и смотрим в браузере 127.0.0.1:6080.
Decision:
$ mkdir db
$ touch db/Dockerfile
$ ls db/
Dockerfile
$ vim db/Dockerfile
$ cat db/Dockerfile
FROM mariadb
$ cat docker-compose.yml
version: '3.1'
services:
db:
image: mariadb
restart: always
environment:
MYSQL_ROOT_PASSWORD: YOUR-PASSWORD
adminer:
image: adminer
restart: always
ports:
- 6080:8080
$ vim docker-compose.yml
$ cat docker-compose.yml
version: '3.1'
services:
db:
build: ./db
restart: always
environment:
MYSQL_ROOT_PASSWORD: YOUR-PASSWORD
adminer:
image: adminer
restart: always
ports:
- 6080:8080
$ mkdir adminer
$ vim adminer/Dockerfile
$ cat adminer/Dockerfile
FROM adminer
$ vim docker-compose.yml
$ cat docker-compose.yml
version: '3.1'
services:
db:
build: ./db
restart: always
environment:
MYSQL_ROOT_PASSWORD: YOUR-PASSWORD
adminer:
build: ./adminer
restart: always
ports:
- 6080:8080
$ ls
adminer  db  docker-compose.yml  Dockerfile
$ r-t -rf Dockerfile
$ ls
adminer  db  docker-compose.yml
$ docker-compose build
Building db
Sending build context to Docker daemon  2.048kB
Step 1/1 : FROM mariadb
 ---> 992bce5ed710
Successfully built 992bce5ed710
Successfully tagged docker_db:latest
Building adminer
Sending build context to Docker daemon  2.048kB
Step 1/1 : FROM adminer
 ---> 7707fd9b142f
Successfully built 7707fd9b142f
Successfully tagged docker_adminer:latest
$ docker-compose up
Recreating docker_db_1      ... done
Recreating docker_adminer_1 ... done
Attaching to docker_adminer_1, docker_db_1
Task:
Теперь в Dockerfile мы можем вносить изменения. Добавим новый ключ volum (хранилище данных). Здесь же, в hub.docker.com, ищем раздел where to store Data и копируем директорию. Создаем директорию в проекте, где будет располагаться база данных. Теперь удаляем предыдущий контейнер с базой данных, пересобираем, запускаем и откроем директорию с базой данных. Тут мы увидим, что теперь база данных находится не в контейнере, а у нас локально. Теперь если удалить этот контейнер, все данные, которые мы внесил останутся на месте.
Decision:
$ vim docker-compose.yml
$ cat docker-compose.yml
version: '3.1'
services:
db:
build: ./db
restart: always
environment:
MYSQL_ROOT_PASSWORD: YOUR-PASSWORD
volumes:
- ./databases:/var/lib/mysql
adminer:
build: ./adminer
restart: always
ports:
- 6080:8080
$ mkdir databases
$ ls
adminer  databases  db  docker-compose.yml
$ docker-compose r-t db
Going to remove docker_db_1
Are you sure? [yN] y
Removing docker_db_1 ... done
$ docker-compose build
Building db
Sending build context to Docker daemon  2.048kB
Step 1/1 : FROM mariadb
 ---> 992bce5ed710
Successfully built 992bce5ed710
Successfully tagged docker_db:latest
Building adminer
Sending build context to Docker daemon  2.048kB
Step 1/1 : FROM adminer
 ---> 7707fd9b142f
Successfully built 7707fd9b142f
Successfully tagged docker_adminer:latest
$ docker-compose up
Starting docker_adminer_1 ... done
Creating docker_db_1      ... done
Attaching to docker_adminer_1, docker_db_1
$ ls databases/
aria_log.00000001  ibdata1      multi-master.info
aria_log_control   ib_logfile0  mysql
ib_buffer_pool     ibtmp1       perfor-tance_schema
В браузере откроем adminer и создадим базу данных
$ ls databases/
1st@002dtest@0020basa  ib_buffer_pool  multi-master.info
2nd@002dtest@0020basa  ibdata1         mysql
aria_log.00000001      ib_logfile0     perfor-tance_schema
aria_log_control       ibtmp1  
Task:
Соединение контейнеров между собой mariadb + php. Рассмотрим 1 из способов соединения между 2мя контейнерами. Мы будем использовать 2 готовых образа - mysql(mariadb) и образ, который содержит php библиотеку управления базой данных. Устанавливаем образ базы данных, для этого ищем образы hub.docker.com и hub.docker.com. ищем в инструкции установку и вместо name и password придумываем свое имя и пароль. После чего проверяем работает ли контейнер. link - установление соединения. Тут docker получает информацию о том, что нам нужно установить соединение между новым контейнером (adminer), который будет создан на базе образа adminer, и существующим контейнером mysqlserver. ссылку на mysqlserver должна быть обозначена - db. Для этого docker создает в файле новый контейнер adminer /etc/hosts, запись db, указывающий ip адрес mysqlserver. Это позволяет нам пользоваться имененм данного хоста. И в браузере локальной машины откроем php сервер с адресом 127.0.0.1:8080.
Decision:
$ docker run -p 127.0.0.1:3306:3306  --name mysqlserver -e MYSQL_ROOT_PASSWORD=YOUR-PASSWORD -d mariadb
Digest: sha256:36288c675a192bd0a8a99cd6ba0780e31df85f0bfd0cbb204837cd108be3d236
Status: Downloaded newer image for mariadb:latest
113a0a7ca5a94ba2c25a50df62eea41ca15e309d65dbba71e456e35d85c5e631
$ docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                      NAMES
113a0a7ca5a9   mariadb   "docker-entrypoint.s…"   2 minutes ago   Up 2 minutes   127.0.0.1:3306->3306/tcp   mysqlserver
$ docker run --link mysqlserver:db -p 8080:8080 adminer
...
Digest: sha256:a3e73e13e4f3f1bd1007d7a5d75a6bd23846c3252b71ab7a5817de9ffec04826
Status: Downloaded newer image for adminer:latest
[Thu May  6 01:28:31 2021] PHP 7.4.18 Development Server (http://[::]:8080) started
Task:
Вам необходимо обеспечить связь между двумя контейнерами так, чтобы он могли обращаться друг к другу с использованием DNS имен.
Для этого нужно запустить контейнер hub.docker.com сервер под именем stepik-linking-docker таким образом, чтобы контейнер был по имени доступен другим контейнерам, с которыми он тем или иным образом связан. Контейнер нужно запустить в виде демона.
После этого нужно запустить контейнер hub.docker.com так, чтобы он получил доступ к первому контейнеру, этот контейнер нужно запустить в интерактивном режиме.
В том случае, если все сделано правильно, контейнер отправит сообщение, которое нужно использовать в качестве ответа на задачу  
Decision:
$ docker network create test_net
    f8c6615588a4eff01d7fae56f969cfd479e74a55bc7be20498dedcc49f31ce7c
$ docker run -d --r-t --name stepik-linking-docker --network=test_net parseq/stepik-linking-docker
    ...
    Digest: sha256:0f96ab451a9743996a434fd373e721b2a3b97491b65194d658a17a732dde66f8
    Status: Downloaded newer image for parseq/stepik-linking-docker:latest
    b6d77ab24126bd93e4a560a465c9fa0a453b1313a031810d122cc8c020a96ceb
$ docker network inspect test_net
[
    {
        "Name": "test_net",
        "Id": "f8c6615588a4eff01d7fae56f969cfd479e74a55bc7be20498dedcc49f31ce7c",
        "Created": "2021-04-25T17:17:41.363958209-05:00",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.18.0.0/16",
                    "Gateway": "YOUR-IP"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "b6d77ab24126bd93e4a560a465c9fa0a453b1313a031810d122cc8c020a96ceb": {
                "Name": "stepik-linking-docker",
                "EndpointID": "a6d9dd22bed3a372f8ca92a85bb564e68af9de81ac8fdebd8657e8139634efdf",
                "MacAddress": "02:42:ac:12:00:02",
                "IPv4Address": "172.18.0.2/16",
                "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {}
    }
]
$ docker run -it --r-t --network=test_net parseq/stepik-linking-docker-client
    ...
    Digest: sha256:9ab6f089a5416148271997c428eea30306bc296f7d8f2c9b52d721747eaef850
    Status: Downloaded newer image for parseq/stepik-linking-docker-client:latest
    Container linking is awesome simple!
Task:
В образе https://hub.docker.com/r/parseq/stepik-exec-docker/ установлена база данных PostgreSQL, в таблицах которой содержится ответ на задачу.
Для взаимодействия с базой данных удобно использовать утилиту psql которая уже установлена в образе. Синтаксис прост, для подключения к базе нужно указать пользователя (в нашем случае это postgres) и команду (если команду не указать, psql подключится к базе данных в интерактивном режиме). Пример:
psql -U postgres -c 'SELECT now()'
Также psql позволяет легко получить доступ к информации о структуре базы, например:
psql -U postgres -c '\dt'
выводит список таблиц БД. Полный список системных команд для psql доступен по команде:
psql -U postgres -c '\?'
По умолчанию psql подключается к базе данных postgres, в одной из таблиц которой записан ответ на задачу.
Для получения ответа вам нужно запустить образ с базой данных в режиме демона, после запуска советуем проверить, что контейнер стартовал и работает, после чего подключиться к нему и выполнить нужные запросы к базе с использованием psql.
Decision:
$ docker run -d parseq/stepik-exec-docker
    ...
    Digest: sha256:db066d63099bff37b158a406a4393be51881a9829c7f07e565bd9450cb471d9f
    Status: Downloaded newer image for parseq/stepik-exec-docker:latest
    cfa5601d40ca25e400459b36093f84be00972a708167b784047f48d2645d52a5
$ docker ps -a
    CONTAINER ID   IMAGE                        COMMAND                  CREATED          STATUS                  PORTS                                     NAMES
    cfa5601d40ca   parseq/stepik-exec-docker    "docker-entrypoint.s…"   26 seconds ago   Up 14 seconds           5432/tcp                                  crazy_swirles
    9586273ae664   parseq/stepik-ports-docker   "httpd-foreground"       39 minutes ago   Up 39 minutes           0.0.0.0:44663->80/tcp, :::44663->80/tcp   port-export
    ebe0a05f8014   hello-world                  "/hello"                 7 days ago       Exited (0) 7 days ago                                             strange_rubin
    fb2dcfc86ff4   hello-world                  "/hello"                 7 days ago       Exited (0) 7 days ago                                             nervous_dijkstra
$ docker exec -it cfa5601d40ca bash
/# psql -U postgres -c '\dt'
              List of relations
     Schema |  Name   | Type  |  Owner   
    --------+---------+-------+----------
     publi-c | answers | table | postgres
    (1 row)
/# psql -U postgres -c 'SELECT now()'
                  now              
    -------------------------------
     2021-04-25 20:43:11.758893+00
    (1 row)
/# psql -U postgres -c '\?'
/# psql -U postgres -c 'SELECT * FROM answers'
     id |                                                        answer                                                         
    ----+-----------------------------------------------------------------------------------------------------------------------
      1 | The entity-relationship model adopts the more natural view that the real world consists of entities and relationships
    (1 row)
Task:
В контейнере https://hub.docker.com/r/parseq/stepik-ports-docker/ установлен веб-сервер, который принимает подключения на 80 порту. Запустите контейнер в режиме демона и обеспечьте доступ к порту 80 внутри контейнера с произвольного порта хоста, после чего отправьте http запрос на соответствующий порт (проще всего использовать веб-браузер).
Decision:
$ netstat -tulpn
    (Not all processes could be identified, non-owned process info
    will not be shown, you would have to be root to see it all.)
    Active Internet connections (only servers)
    Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name
    tcp 0 0 .....0.0....:... 0.0.0.0:* LISTEN -
    tcp 0 0 0.0.0.0:... 0.0.0.0:* LISTEN -
    tcp 0 0 ....0.0.1:... 0.0.0.0:* LISTEN -
    tcp6 0 0 :::... :::* LISTEN -
    tcp6 0 0 ::1:631 :::* LISTEN -
    udp 0 0 ....0.0...:... 0.0.0.0:* -
    udp 0 0 0.0.0.0:... 0.0.0.0:* -
    udp 0 0 0.0.0.0:... 0.0.0.0:* -
    udp 0 0 0.0.0.0:44663 0.0.0.0:* -
    udp6 0 0 :::... :::* -
    udp6 0 0 :::... :::* -
$ docker run -d --name port-export -p 44663:80 parseq/stepik-ports-docker
    Unable to find image 'parseq/stepik-ports-docker:latest' locally
    latest: Pulling from parseq/stepik-ports-docker
    5040bd298390: Pull complete
    d4131284d37a: Pull complete
    55bdf25a2127: Pull complete
    43b7968965df: Pull complete
    42501a8f0c66: Pull complete
    011aeeb6d1d6: Pull complete
    Digest: sha256:4e587f62db23b19f6e748a5e1a6dca90b18e9b6288d00a3dc48924332b928e2b
    Status: Downloaded newer image for parseq/stepik-ports-docker:latest
    9586273ae664e27451b18f24d512594f3e8bc0e46411fc92d34095abc5d9e54c
$ docker ps -a
    CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
    9586273ae664 parseq/stepik-ports-docker "httpd-foreground" 29 seconds ago Up 13 seconds 0.0.0.0:44663->80/tcp, :::44663->80/tcp port-export
    ebe0a05f8014 hello-world "/hello" 7 days ago Exited (0) 7 days ago strange_rubin
    fb2dcfc86ff4 hello-world "/hello" 7 days ago Exited (0) 7 days ago nervous_dijkstra
В машине запускаем браузер, там будет ответ - We are stuck with technology when what we really want is just stuff that works
Task:
От вас потребуется создать Dockerfile для образа, который будет удовлетворять следующим свойствам:
1. Базовый образ – ubuntu:16.04
2. Установлен текстовый редактор nano
3. Переменная окружения $EDITOR устанавливает nano в качестве редактора по умолчанию
4. В качестве рабочей директории установлен каталог /home/stepik
5. При запуске контейнера открывается nano, файл автоматически сохраняется в файловую систему хоста, даже если при запуске опции монтирования не указаны (при отсутствии опции монтирования путь, по кторому сохраняется файл, не играет роли, важно, чтобы файл в конечном счете оказался на хосте)
6. Владельцем файла на хосте назначается пользователь с uid=1000, если при сборке не указываются дополнительные аргументы, или пользователь с uid, который был задан аргументом UID при сборке
7. Именно этот пользователь (uid=1000/uid=UID) должен быть основным в контейнере.
id -u $(whoami)
> 1000
docker build -t dockerfile-extended .
docker run -it --r-t -v $(pwd):/home/stepik dockerfile-extended
# Nano is opened, we write some text, closing editor and specifying a filename as 'test'
ls -l test
> -rw-r--r-- 1 <username> <group> 7 марта 11 17:20 test
# Where <username> is the name of the user with uid=1000
Пример для пользователя с произвольным UID
docker build -t dockerfile-extended --build-arg UID=1001 .
# Doing the same...
> -rw-r--r-- 1 <username> <group> 7 марта 11 17:20 test
# Where <username> is the name of the user with uid=1001
Для получения кода проверки в папке с Dockerfile, содержащим ответ, выполните:
docker run --r-t -v $(pwd)/Dockerfile:/mnt/Dockerfile -v /var/run/docker.sock:/var/run/docker.sock parseq/stepik-dockerfile-extended
Decision:
$ ls /home/
    server
$ ls
    Desktop  Dockerfile  Documents  Downloads  Musi-c  Pi-ctures  Publi-c  Templates  Videos
$ ls /
    bin  boot  cdrom  dev  etc  home  lib  lib32  lib64  libx32  lost+found  media  mnt  opt  proc  root  run  sbin  snap  srv  swapfile  sys  tmp  usr  var
$ whi-ch nano
    /usr/bin/nano
$ vim Dockerfile
$ cat Dockerfile
FROM ubuntu:16.04
LABEL maintainer="by DATO"
ARG UID=1000
RUN apt-get update && apt-get install -y nano
RUN useradd -m stepik -u $UID
ENV EDITOR=/usr/bin/nano
USER stepik
WORKDiR /home/stepik
VOLUME /home/stepik
ENTRYPOINT ["bash", "-c", "nano"]
~id−u id -u id−u(whoami)
1000
$ docker build -t dockerfile-extended .
    ...
    Successfully built b3ecd51aabd9
    Successfully tagged dockerfile-extended:latest
$ docker images
    REPOSITORY                            TAG       IMAGE ID       CREATED          SIZE
    dockerfile-extended                   latest    b3ecd51aabd9   20 minutes ago   167MB
    stepik_task_test_image                latest    d5a320ef460f   2 hours ago      72.9MB
    test                                  latest    d5a320ef460f   2 hours ago      72.9MB
    testtwo                               latest    e3e656e8d305   3 hours ago      72.9MB
    testone                               latest    881aeba8a550   3 hours ago      72.9MB
    ubuntu                                16.04     aefd7f02ae24   4 days ago       134MB
    ubuntu                                20.04     26b77e58432b   3 weeks ago      72.9MB
    hello-world                           latest    d1165f221234   7 weeks ago      13.3kB
    parseq/stepik-exec-docker             latest    c7fe4f732991   3 years ago      341MB
    parseq/stepik-it-docker               latest    c0788ef75831   4 years ago      188MB
    parseq/stepik-linking-docker-client   latest    27916de983f8   4 years ago      673MB
    parseq/stepik-dockerfile-basi-cs       latest    77120b298b47   4 years ago      767MB
    parseq/stepik-ports-docker            latest    3b541ae9e177   4 years ago      170MB
    parseq/stepik-linking-docker          latest    ccfae27b98db   4 years ago      672MB
    parseq/hello-docker                   latest    d4e056261370   4 years ago      697MB
$ docker run -it --r-t -v(pwd):/home/stepik dockerfile-extended
$ ls -l test
    -rw-r--r-- 1 server server 11 Apr 28 15:19 test
$ cat test
hello Dato
$ docker build -t dockerfile-extended --build-arg UID=1001 .
    ...
    Successfully built eb9a47cd0883
    Successfully tagged dockerfile-extended:latest
$ docker images
    REPOSITORY                            TAG       IMAGE ID       CREATED          SIZE
    dockerfile-extended                   latest    eb9a47cd0883   9 seconds ago    167MB
    <none>                                <none>    b3ecd51aabd9   28 minutes ago   167MB
    stepik_task_test_image                latest    d5a320ef460f   2 hours ago      72.9MB
    test                                  latest    d5a320ef460f   2 hours ago      72.9MB
    testtwo                               latest    e3e656e8d305   3 hours ago      72.9MB
    testone                               latest    881aeba8a550   3 hours ago      72.9MB
    ubuntu                                16.04     aefd7f02ae24   4 days ago       134MB
    ubuntu                                20.04     26b77e58432b   3 weeks ago      72.9MB
    hello-world                           latest    d1165f221234   7 weeks ago      13.3kB
    parseq/stepik-exec-docker             latest    c7fe4f732991   3 years ago      341MB
    parseq/stepik-it-docker               latest    c0788ef75831   4 years ago      188MB
    parseq/stepik-linking-docker-client   latest    27916de983f8   4 years ago      673MB
    parseq/stepik-dockerfile-basi-cs       latest    77120b298b47   4 years ago      767MB
    parseq/stepik-ports-docker            latest    3b541ae9e177   4 years ago      170MB
    parseq/stepik-linking-docker          latest    ccfae27b98db   4 years ago      672MB
    parseq/hello-docker                   latest    d4e056261370   4 years ago      697MB
$ docker run -it --r-t -v(pwd):/home/stepik dockerfile-extended
$ ls -l test
    -rw-r--r-- 1 server server 11 Apr 28 15:19 test
$ cat test
hello Dato
~dockerrun−−r-t−v docker run --r-t -v dockerrun−−r-t−v(pwd)/Dockerfile:/mnt/Dockerfile -v /var/run/docker.sock:/var/run/docker.sock parseq/stepik-dockerfile-extended
    ...
    Digest: sha256:80868d51eab821b82a9e916e6ffd3f370a1f63d1005c6053c60bfaa2ebc19017
    Status: Downloaded newer image for parseq/stepik-dockerfile-extended:latest
Task:
Вы хотите создать образ, соответствующий ubuntu:14.04, но изменить его так, чтобы в качестве точки входа испoльзовался python3. У вас в системе присутствует контейнер с именем create-image-from-me, созданный из ubuntu:14.04 командой:
docker run -it --name create-image-from-me ubuntu:14.04 /bin/true
Введите команду с минимальным количеством аргументов, которую необходимо выполнить, чтобы создать искомый образ.
Decision:
$ docker run -it --name create-image-from-me ubuntu:20.04 /bin/true
$ docker commit --change "ENTRYPOINT python3" create-image-from-me testone
    sha256:881aeba8a5508bb0a8a5769cadce491d78c01e8eb0c2b31711a29ad281249a1e
$ docker commit -c="CMD python3" create-image-from-me testtwo
    sha256:e3e656e8d305d2f91eefa265629f4b520c74e4f1b7736114e11328742679c3d2
$ docker images
    REPOSITORY                            TAG       IMAGE ID       CREATED              SIZE
    testtwo                               latest    e3e656e8d305   16 seconds ago       72.9MB
    testone                               latest    881aeba8a550   About a minute ago   72.9MB
    ubuntu                                20.04     26b77e58432b   3 weeks ago          72.9MB
    hello-world                           latest    d1165f221234   7 weeks ago          13.3kB
    parseq/stepik-exec-docker             latest    c7fe4f732991   3 years ago          341MB
    parseq/stepik-it-docker               latest    c0788ef75831   4 years ago          188MB
    parseq/stepik-linking-docker-client   latest    27916de983f8   4 years ago          673MB
    parseq/stepik-ports-docker            latest    3b541ae9e177   4 years ago          170MB
    parseq/stepik-linking-docker          latest    ccfae27b98db   4 years ago          672MB
    parseq/hello-docker                   latest    d4e056261370   4 years ago          697MB
Task:
Вам необходимо декодировать сообщение и ввести результат в качестве ответа на задачу. Для этого необходимо сохранить следующий текст в файл message на локальной машине:
CMkglgw38aTRhlQb+DrzKhrT5VHhG5ucraYD9pv6eHOXirXA8uLqzPOhmrObJV5FeAzu9/LIUqsHfUjAM7gLoANiNAuEyD6/FbNaJWvGjzjpVBt6BSux34ydlEEwsd6Xnlz5Gce+zoXZjcvmvl92ExwA7O4MykGuJb7GeixijW9fI8ev2BvpOP5MaXdX8nFv8y+XjNaI3SHPy60tZEZO0omJkYjnEkZrxOyYCekMsOha/COZ5FgcyBDQa3a4oCf/MwdxlT8RBXiJd1SnROlS63aD93W/YpB8pj8MwTVV0TSnVUueZeMaslSf7cWTMAUDtsQqiYcd3HGygyC2nMFjPg==
И примонтировать директорию с этим файлом в контейнер parseq/stepik-host-dir так, чтобы путь к нему (включая имя файла) выглядел следующим образом:
/home/stepik/message
Если файл примонтирован верно, при запуске контейнера будет выведено декодированное сообщение.
Decision:
$ echo CMkglgw38aTRhlQb+DrzKhrT5VHhG5ucraYD9pv6eHOXirXA8uLqzPOhmrObJV5FeAzu9/LIUqsHfUjAM7gLoANiNAuEyD6/FbNaJWvGjzjpVBt6BSux34ydlEEwsd6Xnlz5Gce+zoXZjcvmvl92ExwA7O4MykGuJb7GeixijW9fI8ev2BvpOP5MaXdX8nFv8y+XjNaI3SHPy60tZEZO0omJkYjnEkZrxOyYCekMsOha/COZ5FgcyBDQa3a4oCf/MwdxlT8RBXiJd1SnROlS63aD93W/YpB8pj8MwTVV0TSnVUueZeMaslSf7cWTMAUDtsQqiYcd3HGygyC2nMFjPg== > message
$ ls -l message
  -rw-rw-r-- 1 server server 345 Apr 21 11:19 message
$ cat message
  CMkglgw38aTRhlQb+DrzKhrT5VHhG5ucraYD9pv6eHOXirXA8uLqzPOhmrObJV5FeAzu9/LIUqsHfUjAM7gLoANiNAuEyD6/FbNaJWvGjzjpVBt6BSux34ydlEEwsd6Xnlz5Gce+zoXZjcvmvl92ExwA7O4MykGuJb7GeixijW9fI8ev2BvpOP5MaXdX8nFv8y+XjNaI3SHPy60tZEZO0omJkYjnEkZrxOyYCekMsOha/COZ5FgcyBDQa3a4oCf/MwdxlT8RBXiJd1SnROlS63aD93W/YpB8pj8MwTVV0TSnVUueZeMaslSf7cWTMAUDtsQqiYcd3HGygyC2nMFjPg==
$ docker run -it --r-t -v(pwd):/home/stepik parseq/stepik-host-dir
  I can mount host files!
Task:
Стяните контейнер https://hub.docker.com/r/parseq/stepik-it-docker/ на локальную машину. Используя интерактивный режим, прочитайте содержимое файла:
/root/README
Руководствуясь инструкцией в файле получите сообщение и введите его в качестве ответа на задание.
  Decision:
$ docker run --r-t -it parseq/stepik-it-docker
  ...
  Digest: sha256:2e354f7a86001dd5543fd11f5be2d1912a0686b7db1b676f5dd8f430e58c6e6f
    Status: Downloaded newer image for parseq/stepik-it-docker:latest                                                                                                       
:~# ls
  README
:~# cat README
Execute 'message' command to get message!                                                                                                                               
:~# message
  Yes, I can run interactive Docker!
Task:
Необходимо установить Docker и декодировать сообщение, используя публично доступный Docker image (подробнее об образах мы поговорим позже).
Для декодирования вам необходимо выполнить команду:
$sudo docker run --r-t parseq/hello-docker <message>
При этом с публичного реестра Docker будет загружен image parseq/hello-docker, и запустится соответствующий контейнер, в котором находится утилита для декодирования, которая выведет результат в стандартный поток вывода.
Этот результат вам необходимо будет скопировать и отправить в качестве ответа.
Сообщение, которое необходимо декодировать:
koRZEWXPssf6NoX/2NEQL31SEoxhFhiH2MIDuh6+4wngfTZW
Decision:
:$ sudo docker run --r-t parseq/hello-docker "koRZEWXPssf6NoX/2NEQL31SEoxhFhiH2MIDuh6+4wngfTZW"
  Congratulations, you can run Docker!
