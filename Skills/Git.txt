Task:
Create a new git-repository on the command line
Decision:
$ git init
$ git add .
$ git commit -m "first commit"
$ git branch -M main
$ git remote add origin https://github.com/thost/myportfolio.git
$ git push -u origin main
Task:
Добавление почты и логина в Git
Decision:
$ git config --global user.email "tmail@yandex.ru"
$ git config --global user.name "tname"
Task:
Изменения в проекте Github
Decision:
$ git status
$ git add .
$ git commit -m "second commit"
$ git push -u origin main
Task:
Скопируем проект в другом компе
Decision:
$ git clone https://github.com/David138it/tProject
$ cd tProject/
Task:
Возвращаемся в первый комп и там уже вносим копируем данные другого компа 
Decision:
$ git fetch origin
$ cat tFile1 
$ git merge
$ cat tFile1
Source:
https://docs.github.com/ru/repositories/creating-and-managing-repositories/cloning-a-repository
Task:   
сделать rebase на main branch
Decision:
$ git checkout your-branch
$ git rebase main
- Когда вы сделаете готовый branch, вы хотите все обнволения main добавить себе в branch
Source:
https://www.youtube.com/playlist?list=PLg5SS_4L6LYuu1RAT4l1tCkZrJzkIaNgL
Task:
Я не хочу кидать в гитхаб репозитория папку Env. Показать последний коммит, последние 2 коммита и статистику внесенных ими изменений.
Decision:
$ vim .gitignore
$ cat .gitignore
Env/
Env/*
$ git show HEAD^
$ git log -2 --stat
$ git add .
Task:
Есть master (публичная версия сайта), в двух параллельных ветках (branch_1 и branch_2) было отредактировано одно и то же место одного и того же файла, первую ветку (branch_1) влили в master, попытка влить вторую вызывает конфликт.переключаемся на ветку master
Decision:
$ git checkout master
$ git checkout -b branch_1
subl .
$ git commit -a -m "Правка 1"
$ git checkout master
$ git checkout -b branch_2
subl .
$ git commit -a -m "Правка 2"
$ git checkout master
$ git merge branch_1
$ git merge branch_2
subl .
$ git commit -a -m "Устранение конфликта"
Task:
Если в разных ветках, в одних и тех же файлов, разные изменения, значит будет конфликт. Для этого установим утилиту kdiff3 с официального сайта. Укажем утилиту в Гит
Decision:
$ git config --global merge.tool kdiff3
$ git merge master
$ git mergetool
$ git status
Task:
Удалим не нужные файлы, которые появились из-за бекапа и коммитим переделанный файл
Decision:
$ git merge new_vetka создать новую ветку с указанным именем
$ git branch new_branch
$ git branch -d hotfix
$ git branch —merged
$ git branch —no-merged
$ git branch -a
Task:
Есть master (публичная версия сайта), хотим масштабно что-то поменять (переверстать «шапку»), но по ходу работ возникает необходимость подправить критичный баг (неправильно указан контакт в «подвале»).создадим новую ветку для задачи изменения «шапки» и перейдём в неё. устраняем баг и сохраняем разметку.  «подвала». удаляем ветку footer_hotfix
Decision:
$ git checkout -b new_page_header
subl inc/header.html
$ git commit -a -m "Новая шапка: смена логотипа"
$ git checkout master
$ git checkout -b footer_hotfix
$ subl inc/footer.html
$ git commit -a -m "Исправление контакта в подвале"
$ git checkout master
$ git merge footer_hotfix 
$ git branch -d footer_hotfix
$ git checkout new_page_header
$ subl inc/header.html
$ git commit -a -m "Новая шапка: смена навигации"
$ git checkout master
$ git merge new_page_header
$ git branch -d new_page_header
Source:
https://www.youtube.com/playlist?list=PLoonZ8wII66iUm84o7nadL-oqINzBLk5g

