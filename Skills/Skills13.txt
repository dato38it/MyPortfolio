Mail for feedback: David138it@gmail.com

Engineer
	$ sudo dnf update
	...
	Ошибка: Не удалось загрузить метаданные для репозитория «pgdg-common»: repomd.xml GPG signature verification error: Bad GPG signature
	$ sudo dnf install --nogpgcheck https://download.postgresql.org/pub/repos/yum/common/redhat/rhel-9-x86_64/pgdg-redhat-repo-42.0-38PGDG.noarch.rpm
	...
	PostgreSQL 11 for RHEL / Rocky 9 - x86_64       187  B/s | 146  B     00:00    
	Errors during downloading metadata for repository 'pgdg11':
	- Status code: 404 for https://download.postgresql.org/pub/repos/yum/11/redhat/rhel-9-x86_64/repodata/repomd.xml (IP: 217.196.149.55)
	Ошибка: Не удалось загрузить метаданные для репозитория «pgdg11»: Cannot download repomd.xml: Cannot download repodata/repomd.xml: All mirrors were tried

	$ docker run busybox echo "Hello world"
	Unable to find image 'busybox:latest' locally
	latest: Pulling from library/busybox
	a307d6ecc620: Pull complete 
	Digest: sha256:ba76950ac9eaa407512c9d859cea48114eeff8a6f12ebaa5d32ce79d4a017dd8
	Status: Downloaded newer image for busybox:latest
	Hello world
	$ la
	.bash_history                           Documents                               .local          pt                         tProjects
	.bash_logout                            Downloads                               Music           Public                     Videos
	.bashrc                                 .fontconfig                             .mysql_history  .python_history            .vim
	.cache                                  .gitconfig                              .packettracer   snap                       .viminfo
	CiscoPacketTracer_821_Ubuntu_64bit.deb  .gnome                                  Pictures        .ssh                       .wget-hsts
	.config                                 .gnupg                                  .pki            .sudo_as_admin_successful  .Xauthority
	Desktop                                 google-chrome-stable_current_amd64.deb  .profile        Templates
	.docker                                 .lesshst                                Projects        test.txt
	$ vim app.js
	$ vim Dockerfile
	$ cat Dockerfile
	FROM node:7
	ADD app.js /app.js
	ENTRYPOINT ["node", "app.js"]
	$ cat app.js
	const http = require('http');
	const os = require('os');
	console.log("Kubia server starting...");
	var handler = function(request, response) {
			console.log("Received request from " + request.connection.remoteAddress);
			response.writeHead(200);
			response.end("You've hit " + os.hostname() + "\n");
	};
	var www = http.createServer(handler);
	www.listen(8080);
	$ docker build -t kubia .
	[+] Building 386.6s (7/7) FINISHED                                                                                       docker:default
	=> [internal] load build definition from Dockerfile                                                                               1.6s
	=> => transferring dockerfile: 98B                                                                                                0.0s
	=> [internal] load .dockerignore                                                                                                  1.5s
	=> => transferring context: 2B                                                                                                    0.1s
	=> [internal] load metadata for docker.io/library/node:7                                                                          7.7s
	=> [internal] load build context                                                                                                  0.9s
	=> => transferring context: 389B                                                                                                  0.0s
	=> [1/2] FROM docker.io/library/node:7@sha256:af5c2c6ac8bc3fa372ac031ef60c45a285eeba7bce9ee9ed66dad3a01e29ab8d                  369.4s
	=> => resolve docker.io/library/node:7@sha256:af5c2c6ac8bc3fa372ac031ef60c45a285eeba7bce9ee9ed66dad3a01e29ab8d                    0.5s
	=> => sha256:af5c2c6ac8bc3fa372ac031ef60c45a285eeba7bce9ee9ed66dad3a01e29ab8d 2.01kB / 2.01kB                                     0.0s
	=> => sha256:d9aed20b68a4a40a396dc03a881c43531097404838e4dc60dbb7ed29f95974aa 7.21kB / 7.21kB                                     0.0s
	=> => sha256:ad74af05f5a24bcf9459ae1cf7718628c2aeb6b587eb51b6eeaf639aca3e566f 52.61MB / 52.61MB                                  45.8s
	=> => sha256:2b032b8bbe8bc215ad3337035d0183fc353841ec6478d1c481e6e13628ad9e00 19.26MB / 19.26MB                                  46.7s
	=> => sha256:a9a5b35f6ead105e66a9af969454ac09b5772eeb0c6281972c48d2ce882e8eba 43.23MB / 43.23MB                                  47.6s
	=> => extracting sha256:ad74af05f5a24bcf9459ae1cf7718628c2aeb6b587eb51b6eeaf639aca3e566f                                         82.2s
	=> => sha256:afa075743392fc2e79375c44e3ef285f775b722bbf27d01f8fe3789144e97f7c 4.38kB / 4.38kB                                    47.8s
	=> => sha256:3f40ad2666bcec6baf03f4322c4736464de25d351740037d3ecae8dfd46d9693 15.68MB / 15.68MB                                 127.1s
	=> => sha256:3245b5a1c52cbf0ae23d948fb94ef7b321e3dc54e13c3f6cf79951ed8237f03e 131.86MB / 131.86MB                               127.1s
	=> => sha256:9fb9f21641cdf120516153e477e21bad887648cdced5e870cb6eed1c1a2aefa3 119.15kB / 119.15kB                                51.8s
	=> => sha256:49c0ed396b49ee88dec473e3277b89a80d79a5eefebb96c0e1a649069630cfbb 900.58kB / 900.58kB                               163.0s
	=> => extracting sha256:2b032b8bbe8bc215ad3337035d0183fc353841ec6478d1c481e6e13628ad9e00                                          1.8s
	=> => extracting sha256:a9a5b35f6ead105e66a9af969454ac09b5772eeb0c6281972c48d2ce882e8eba                                         46.8s
	=> => extracting sha256:3245b5a1c52cbf0ae23d948fb94ef7b321e3dc54e13c3f6cf79951ed8237f03e                                         58.4s
	=> => extracting sha256:afa075743392fc2e79375c44e3ef285f775b722bbf27d01f8fe3789144e97f7c                                          0.0s
	=> => extracting sha256:9fb9f21641cdf120516153e477e21bad887648cdced5e870cb6eed1c1a2aefa3                                          0.0s
	=> => extracting sha256:3f40ad2666bcec6baf03f4322c4736464de25d351740037d3ecae8dfd46d9693                                         76.3s
	=> => extracting sha256:49c0ed396b49ee88dec473e3277b89a80d79a5eefebb96c0e1a649069630cfbb                                          1.3s
	=> [2/2] ADD app.js /app.js                                                                                                       3.4s
	=> exporting to image                                                                                                             1.4s
	=> => exporting layers                                                                                                            1.1s
	=> => writing image sha256:bee94b686e2020508743ed69bd8ad11b31814442517263d66eda2a4f48a8ee71                                       0.1s
	=> => naming to docker.io/library/kubia                                                                                           0.2s
	$ ls
	app.js                                  Dockerfile  google-chrome-stable_current_amd64.deb  Projects  snap       tProjects
	CiscoPacketTracer_821_Ubuntu_64bit.deb  Documents   Music                                   pt        Templates  Videos
	Desktop                                 Downloads   Pictures                                Public    test.txt
	$ docker run --name kubia-container -p 8080:8080 -d kubia
	3f9e7e82d141515aa1daf870a0bc1d32bb6b571610df9d8c87df2e9a98af6017
	$ curl localhost:8080
	You've hit 3f9e7e82d141
	$ docker ps
	CONTAINER ID   IMAGE     COMMAND         CREATED              STATUS              PORTS                                       NAMES
	3f9e7e82d141   kubia     "node app.js"   About a minute ago   Up About a minute   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   kubia-container
	$ docker inspect kubia-container
	[
		{
			"Id": "3f9e7e82d141515aa1daf870a0bc1d32bb6b571610df9d8c87df2e9a98af6017",
			"Created": "2023-12-27T11:03:14.012162865Z",
			"Path": "node",
			"Args": [
				"app.js"
			],
			"State": {
				"Status": "running",
				"Running": true,
				"Paused": false,
				"Restarting": false,
				"OOMKilled": false,
				"Dead": false,
				"Pid": 3116,
				"ExitCode": 0,
				"Error": "",
				"StartedAt": "2023-12-27T11:03:20.162103977Z",
				"FinishedAt": "0001-01-01T00:00:00Z"
			},
			"Image": "sha256:bee94b686e2020508743ed69bd8ad11b31814442517263d66eda2a4f48a8ee71",
			"ResolvConfPath": "/var/lib/docker/containers/3f9e7e82d141515aa1daf870a0bc1d32bb6b571610df9d8c87df2e9a98af6017/resolv.conf",
			"HostnamePath": "/var/lib/docker/containers/3f9e7e82d141515aa1daf870a0bc1d32bb6b571610df9d8c87df2e9a98af6017/hostname",
			"HostsPath": "/var/lib/docker/containers/3f9e7e82d141515aa1daf870a0bc1d32bb6b571610df9d8c87df2e9a98af6017/hosts",
			"LogPath": "/var/lib/docker/containers/3f9e7e82d141515aa1daf870a0bc1d32bb6b571610df9d8c87df2e9a98af6017/3f9e7e82d141515aa1daf870a0bc1d32bb6b571610df9d8c87df2e9a98af6017-json.log",
			"Name": "/kubia-container",
			"RestartCount": 0,
			"Driver": "overlay2",
			"Platform": "linux",
			"MountLabel": "",
			"ProcessLabel": "",
			"AppArmorProfile": "docker-default",
			"ExecIDs": null,
			"HostConfig": {
				"Binds": null,
				"ContainerIDFile": "",
				"LogConfig": {
					"Type": "json-file",
					"Config": {}
				},
				"NetworkMode": "default",
				"PortBindings": {
					"8080/tcp": [
						{
							"HostIp": "",
							"HostPort": "8080"
						}
					]
				},
				"RestartPolicy": {
					"Name": "no",
					"MaximumRetryCount": 0
				},
				"AutoRemove": false,
				"VolumeDriver": "",
				"VolumesFrom": null,
				"ConsoleSize": [
					9,
					136
				],
				"CapAdd": null,
				"CapDrop": null,
				"CgroupnsMode": "private",
				"Dns": [],
				"DnsOptions": [],
				"DnsSearch": [],
				"ExtraHosts": null,
				"GroupAdd": null,
				"IpcMode": "private",
				"Cgroup": "",
				"Links": null,
				"OomScoreAdj": 0,
				"PidMode": "",
				"Privileged": false,
				"PublishAllPorts": false,
				"ReadonlyRootfs": false,
				"SecurityOpt": null,
				"UTSMode": "",
				"UsernsMode": "",
				"ShmSize": 67108864,
				"Runtime": "runc",
				"Isolation": "",
				"CpuShares": 0,
				"Memory": 0,
				"NanoCpus": 0,
				"CgroupParent": "",
				"BlkioWeight": 0,
				"BlkioWeightDevice": [],
				"BlkioDeviceReadBps": [],
				"BlkioDeviceWriteBps": [],
				"BlkioDeviceReadIOps": [],
				"BlkioDeviceWriteIOps": [],
				"CpuPeriod": 0,
				"CpuQuota": 0,
				"CpuRealtimePeriod": 0,
				"CpuRealtimeRuntime": 0,
				"CpusetCpus": "",
				"CpusetMems": "",
				"Devices": [],
				"DeviceCgroupRules": null,
				"DeviceRequests": null,
				"MemoryReservation": 0,
				"MemorySwap": 0,
				"MemorySwappiness": null,
				"OomKillDisable": null,
				"PidsLimit": null,
				"Ulimits": null,
				"CpuCount": 0,
				"CpuPercent": 0,
				"IOMaximumIOps": 0,
				"IOMaximumBandwidth": 0,
				"MaskedPaths": [
					"/proc/asound",
					"/proc/acpi",
					"/proc/kcore",
					"/proc/keys",
					"/proc/latency_stats",
					"/proc/timer_list",
					"/proc/timer_stats",
					"/proc/sched_debug",
					"/proc/scsi",
					"/sys/firmware",
					"/sys/devices/virtual/powercap"
				],
				"ReadonlyPaths": [
					"/proc/bus",
					"/proc/fs",
					"/proc/irq",
					"/proc/sys",
					"/proc/sysrq-trigger"
				]
			},
			"GraphDriver": {
				"Data": {
					"LowerDir": "/var/lib/docker/overlay2/eb4d18a4caf4a76bf515da04b05f9c4e5356dbd34b644df41557ca329cad44f9-init/diff:/var/lib/docker/overlay2/pz1gx9ajli5v00dl94jzrbmwd/diff:/var/lib/docker/overlay2/ad6856293f86271d395c6c81b6bfda4d9d60df733c18e99bd6dcf61642b970b4/diff:/var/lib/docker/overlay2/52812e4c080d9e69973506a2d3a99a30ea25527b4aa79254143f197252ad048a/diff:/var/lib/docker/overlay2/ecd864b51d4b72b028b602e2405e87170dfbfcda792c603ac29952e4ecacbe9c/diff:/var/lib/docker/overlay2/165cc57966205a55d02875ac6abe94664190605908621e4548fcceebed1a70d0/diff:/var/lib/docker/overlay2/6c113a542cdf7f20c872220c985aa7a2dcc81b42023f459d7d2c168a07461ed2/diff:/var/lib/docker/overlay2/75b0a8c4e0d28b08b55da929ee19c54d6977f66c7879834c4d049cd62f8d31b5/diff:/var/lib/docker/overlay2/eed665d4c0d03e12a47eb0ec3dd45999b6f459fe0d1645b41227b517fb672172/diff:/var/lib/docker/overlay2/e35cc0f8dd675ff25b9dbf5cfe11b14f36a233a34571631169ab152279b6b02e/diff",
					"MergedDir": "/var/lib/docker/overlay2/eb4d18a4caf4a76bf515da04b05f9c4e5356dbd34b644df41557ca329cad44f9/merged",
					"UpperDir": "/var/lib/docker/overlay2/eb4d18a4caf4a76bf515da04b05f9c4e5356dbd34b644df41557ca329cad44f9/diff",
					"WorkDir": "/var/lib/docker/overlay2/eb4d18a4caf4a76bf515da04b05f9c4e5356dbd34b644df41557ca329cad44f9/work"
				},
				"Name": "overlay2"
			},
			"Mounts": [],
			"Config": {
				"Hostname": "3f9e7e82d141",
				"Domainname": "",
				"User": "",
				"AttachStdin": false,
				"AttachStdout": false,
				"AttachStderr": false,
				"ExposedPorts": {
					"8080/tcp": {}
				},
				"Tty": false,
				"OpenStdin": false,
				"StdinOnce": false,
				"Env": [
					"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
					"NPM_CONFIG_LOGLEVEL=info",
					"NODE_VERSION=7.10.1",
					"YARN_VERSION=0.24.4"
				],
				"Cmd": null,
				"Image": "kubia",
				"Volumes": null,
				"WorkingDir": "",
				"Entrypoint": [
					"node",
					"app.js"
				],
				"OnBuild": null,
				"Labels": {}
			},
			"NetworkSettings": {
				"Bridge": "",
				"SandboxID": "75d7d6fe5d4b7ff7e519e08fb04a816212aed7c8f381290a424bc56a40ee9582",
				"HairpinMode": false,
				"LinkLocalIPv6Address": "",
				"LinkLocalIPv6PrefixLen": 0,
				"Ports": {
					"8080/tcp": [
						{
							"HostIp": "0.0.0.0",
							"HostPort": "8080"
						},
						{
							"HostIp": "::",
							"HostPort": "8080"
						}
					]
				},
				"SandboxKey": "/var/run/docker/netns/75d7d6fe5d4b",
				"SecondaryIPAddresses": null,
				"SecondaryIPv6Addresses": null,
				"EndpointID": "6e34972b30f33f1e01b26c79d666185ee9a7fe5bff4abace616c26196008ddc1",
				"Gateway": "172.17.0.1",
				"GlobalIPv6Address": "",
				"GlobalIPv6PrefixLen": 0,
				"IPAddress": "172.17.0.2",
				"IPPrefixLen": 16,
				"IPv6Gateway": "",
				"MacAddress": "02:42:ac:11:00:02",
				"Networks": {
					"bridge": {
						"IPAMConfig": null,
						"Links": null,
						"Aliases": null,
						"NetworkID": "04057c9cbb7fcb696c6d46e071ded0da5497aeadfa10fd8c269f66a127132d40",
						"EndpointID": "6e34972b30f33f1e01b26c79d666185ee9a7fe5bff4abace616c26196008ddc1",
						"Gateway": "172.17.0.1",
						"IPAddress": "172.17.0.2",
						"IPPrefixLen": 16,
						"IPv6Gateway": "",
						"GlobalIPv6Address": "",
						"GlobalIPv6PrefixLen": 0,
						"MacAddress": "02:42:ac:11:00:02",
						"DriverOpts": null
					}
				}
			}
		}
	]
	$ docker exec -it kubia-container bash
	root@3f9e7e82d141:/# ls
	app.js  bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
	root@3f9e7e82d141:/#  ls home/node/.
	./            ../           .bash_logout  .bashrc       .profile      
	root@3f9e7e82d141:/# ps aux         
	USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
	root           1  0.0  1.3 614440 26488 ?        Ssl  11:03   0:00 node app.js
	root          12  0.0  0.1  20252  3200 pts/0    Ss   11:08   0:00 bash
	root          20  0.0  0.0  17508  1920 pts/0    R+   11:10   0:00 ps aux
	root@3f9e7e82d141:/# ps aux | grep app.js
	root           1  0.0  1.3 614440 26488 ?        Ssl  11:03   0:00 node app.js
	root@3f9e7e82d141:/# exit
	exit
	$ docker stop kubia-container
	kubia-container
	$ docker rm kubia-container
	kubia-container
	$ docker tag kubia luksa/kubia
	$ docker images | head
	REPOSITORY         TAG           IMAGE ID       CREATED          SIZE
	kubia              latest        bee94b686e20   15 minutes ago   660MB
	luksa/kubia        latest        bee94b686e20   15 minutes ago   660MB
	busybox            latest        9211bbaa0dbd   8 days ago       4.26MB
	prom/prometheus    latest        620d5e2a39df   5 weeks ago      247MB
	tbase/postgres     latest        42d80f305d9e   6 weeks ago      425MB
	hello-world        latest        9c7a54a9a43c   7 months ago     13.3kB
	gitlab/gitlab-ce   15.2.0-ce.0   67972b8f737f   17 months ago    2.66GB
	$ docker login
	Username: tmail138
	Password: 
	$ docker tag kubia tmail138/kubia
	$ docker images | head
	$ docker push tmail138/kubia
	$ docker run -p 8080:8080 -d tmail138/kubia
	$ curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.23.0/minikube-linuxy-amd64 && chmod +x minikube && sudo mv m
	inikube /usr/local/bin/
	$ minikube start
	Starting local Kubernetes v1.8.0 cluster...
	Starting VM...
	E1227 07:58:31.150290    8733 start.go:150] Error starting host: Error creating host: Error executing step: Running precreate checks.
	: VBoxManage not found. Make sure VirtualBox is installed and VBoxManage is in the path.
	Retrying.
	E1227 07:58:31.153208    8733 start.go:156] Error starting host:  Error creating host: Error executing step: Running precreate checks.
	: VBoxManage not found. Make sure VirtualBox is installed and VBoxManage is in the path
	E1227 07:58:31.791593    8733 util.go:147] Error uploading error message: Error sending error report to https://clouderrorreporting.googleapis.com/v1beta1/projects/k8s-minikube/events:report?key=AIzaSyACUwzG0dEPcl-eOgpDKnyKoUFgHdfoFuA, got response code 400
	$ sudo apt-get install virtualbox -y
	$ minikube start
	$ curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
	$ kubectl cluster-info
	$ gcloud container clusters create kubia --num-nodes 3 --machine-type f1-micro
	$ kubectl get nodes

	gcloud container clusters create kubia --num-nodes 3 --machine-type f1-micro

Windows vs Linux, Криптография
	Task:
	В тексте, состоящем из 24 букв и записанном без пробелов, буквы переставлены по следующему правилу: 
	24-я буква поставлена на 1-е место, 1-я буква – на 2-е место, 23-я – на 3-е место, 2-я – на 4-е и так далее (в конце 13-я буква поставлена на 23-е место, 12-я – на 24-е). Затем такую же процедуру повторили ещё 85 раз. В результате получилось ТЯИМАИВУКЦНЛИКАЬЛНЯТПУФИ. Найдите исходный текст
	Decision:
	По условию, после одной перестановки положение букв изменяется в соответствии со следующей таблицей: 
	1 	2 	3 	4 	5 	6 	7 	8 	9 	10 	11 	12 	13 	14 	15 	16 	17 	18 	19 	20 	21 	22 	23 	24
	2 	4 	6 	8 	10 	12 	14 	16 	18 	20 	22 	24 	23 	21 	19 	17 	15 	13 	11 	9 	7 	5 	3 	1
	Посмотрим как в результате перестановок меняется положение буквы, стоявшей на первом месте: 
	1->2->4->8->16->17->15->19->11->22->5->10->20->9->18->13->23->3->6->12->24->1-> ... 
	То есть, после того как буквы переставили 21 раз, первая буква снова оказалась на первом месте. Попутно получили еще последовательность промежуточных положений первой буквы, а менно: 2,4,...,24. 
	Очевидно, что буквы, стоявшие на этих местах, также займут исходное положение на 21-м шаге. Оставшиеся три буквы, стоящие на местах 7, 14, 21, перемещаются по циклу длины 3: 7->14->21->7-> ...
	Следовательно, после 21 преобразования текст будет совпадать с исходным.  Всего текст был преобразован 86 раз, а значит, для получения исходного текста нужно, в соответствии с таблицей, выполнить две "обратные" перестановки букв зашифрованного текста (то есть, 2-я буква зашифрованного текста теперь переставляется на 1-е место, 4-я буква – на 2-е место и т.д.). 
	Decision:
	МУЛЬТИПЛИКАТИВНАЯ ФУНКЦИЯ.
	Task:
	Чтобы попасть в Криптоландию, необходимо пройти через ворота с электронным замком, предъявив правильный ключ. В микросхеме замка хранится таблица размерами 3х8 (3 строки и 8 столбцов), заполненная целыми числами от 1 до 8 так, что в каждой строке этой таблицы встречаются все числа от 1 до 8, а в каждом столбце нет повторяющихся чисел. Такие таблицы принято называть латинскими прямоугольниками. Путешественник должен предъявить в качестве ключа латинский прямоугольник размерами 4х8. Замок откроется в том и только том случае, если два эти прямоугольника (в памяти замка и предъявленный путешественником) можно единственным способом дополнить до латинских прямоугольников размеров 4х8 и 5х8, дописав к каждому из них одну и ту же строку. Если это условие не выполняется, то есть такое дополнение невозможно или неоднозначно, то ворота остаются закрытыми. Катя и Юра решили посетить Криптоландию. Определите, чей ключ правильный и почему. 
	Код замка
	(
	1 8 5 2 6 3 4 7
	6 4 8 3 7 1 5 2
	3 1 6 7 5 2 8 4
	)
	Ключ Кати
	(
	5 1 2 8 6 7 4 3
	6 2 4 5 3 1 7 8
	7 4 6 3 8 2 5 1
	8 5 7 1 4 3 6 2
	)
	Ключ Юры
	(
	3 7 2 4 5 8 1 6
	6 3 4 1 7 2 8 5
	7 6 1 3 4 5 2 8
	8 5 3 6 2 7 4 1
	)
	Decision:
	Пусть L=(L1, L2, ..., L8), M=(M1, M2, ..., M8) - латинские прямоугольники замка и путешественника соответственно, Li, Mi, iэ{1,...,8} – столбцы этих прямоугольников. Построим множества A1, A2, ..., A8, где Ai, iэ{1,...,8} - множество тех и только тех чисел от 1 до 8, которые не встречаются в столбцах Li, Mi. Например, если M это ключ Кати, то A1={2,4}, так как каждым из этих чисел (и только ими) можно дополнить первый столбец прямоугольников L, M. Тогда общее продолжение латинских прямоугольников L, M существует в том и только том случае, когда семейство множеств  A1, A2, ..., A8 обладает системой различных представителей, т.е. существует такой упорядоченный набор чисел (a1, a2, ... a8), что ai=!aj	при i=!j, ai э Ai. Каждая такая система – это дополнительная строка, которая может быть дописана и к прямоугольнику путешественника, и к прямоугольнику замка. По условию замок открывается, только когда такая дополнительная строка единственна. 
	Дополнительные строки для ключа Кати: {{4,7,1,6,2,8,3,5},{4,7,3,6,1,8,2,5},{4,7,3,6,2,8,1,5}}. 
	Дополнительные строки для ключа Юры: {{5,2,7,8,1,4,6,3}}. 
	Decision:
	Ключ Юры правильный.
	Task:
	Даны k различных наборов натуральных чисел, причем каждый набор содержит n натуральных чисел: w1=(w11, w12, ..., w1n), wk=(wk1, wk2, ..., wkn) (Наборы wi и wj называются различными, если существует натуральное число m ∈ 1,n, такое, что wim=!wjm. Например, наборы (1,1,3,1) и (1,1,1,3) различны.) 
	Докажите, что для каждой пары натуральных чисел n и k существует отображение q:N->1,k (правило, ставящее в соответствие каждому натуральному числу натуральное число от 1 до k) такое, что наборы w1^q=(q(w11),q(w12),...,q(w1n)), ..., wk^q=(q(wk1),q(w12),...,q(wkn))
	Task:
	Имеется устройство, преобразующее 3-х битовые комбинации в двоичные символы. Известно, что сейчас устройство или работает правильно (режим ПР), или имеет неисправность одного из 3-х типов (Н1, Н2 и Н3). В таблице указано, какие символы в зависимости от входа устройство выдает при правильной работе, а также при возможных неисправностях. Какое наименьшее количество 3-битовых комбинаций (среди которых обязательно должна быть 111) следует подать на вход, чтобы, проанализировав выходные значения, суметь однозначно определить тип неисправности или же убедиться, что устройство работает правильно? Выпишите все (с точностью до перестановки) такие наборы 3-битовых входов. 
	вход 	ПР 	Н1	Н2 	Н3 
	000 	0 	1 	0 	0 
	001 	1 	1 	1 	0 
	010 	1 	0 	0 	0 
	011 	1 	0 	1 	1 
	100 	1 	1 	1 	1 
	101 	0 	0 	0 	1 
	110 	1 	1 	0 	1 
	111 	0 	1 	0 	1 
	Decision:
	Если, например, подать на вход 000, то на выходе мы получим 0, если устройство работает правильно или имеет неисправность типа Н2 или Н3, либо 1, если имеется неисправность Н1. Значит, вход 000 позволяет различить, скажем, неисправности Н1 и Н3, но не позволяет отличить ПР от Н2. Составим таблицу, где для каждого входа укажем, какие пары режимов этот вход различить может (символ 1), а какие – нет (символ 0). 
	вход ПР и Н1 ПР и Н2 ПР и Н3 Н1 и Н2 Н1 и Н3 Н2 и Н3 
	000 1 0 0 1 1 0 
	001 0 0 1 0 1 1 
	010 1 1 1 0 0 0 
	011 1 0 0 1 1 0 
	100 0 0 0 0 0 0 
	101 0 0 1 0 1 1 
	110 0 1 0 1 0 1 
	111 1 0 1 1 0 1 
	Чтобы определить режим работы устройства, нужно подать на вход такие комбинации, что им соответствующие строки покрывают единицами все столбцы (то есть в каждом столбце есть хотя бы одна единица, стоящая в одной из этих строк). Сразу можно заметить, что входных комбинаций потребуется по крайней мере 3, так как никакие 2 строки не покрывают все столбцы. Вход 111 покрывает 4 столбца. Непокрытыми остаются столбец ПР и Н2 (покрывается входами 010 и 110) и столбец Н1 и Н3 (покрывается входами 000, 001, 011, 101). 
	Таким образом, имеем 8 наборов, по 3 входные комбинации в каждом: 111-{010,110}-{000, 001, 011, 101}. 
	Task:
	При использовании криптосистемы RSA для расшифрования числового сообщения y где n = p*q, p и q – простые числа, находят секретное число d из уравнения r(p-1)(q-1)(3d)=1 (r0(a) -
	остаток от деления числа a на b). Известно, что младшие байты чисел y, p, n, p-1*q-1 и d равны 48,DB,05,9F,15 (но неизвестно какому числу какой именно байт соответствует). Найдите d, если n=64159, y=5653. Указание: фигурирующие в задаче числа представимы в виде двух байтов, например 
	64159=15*16^3+10*16^2+9*16^1+15*16^0 = FA 9F (см. таблицу); 9F – младший байт числа 64159.
	0 	1 	2 	3 	4 	5 	6 	7 	8 	9 	10 	11 	12 	13 	14 	15
	0 	1 	2 	3 	4 	5 	6 	7 	8 	9 	A 	B 	C 	D 	E 	F

Sql, База данных "хранение данных сервиса выдачи VPN-ключей пользователям"
	Task:
	Необходимо разработать БД:
	1. У пользователя может быть несколько устройств. Для каждого устройства создается свой VPN-ключ, использование одного ключа на 2 и более устройствах не допускается.
	2. Ресурсы организации, к которым даётся доступ, объединяются в VPN-группы. Одному VPN-ключу может назначаться несколько VPN-групп.
	3. Разные устройства пользователя могут обладать разными правами доступа к инфраструктуре организации.
	4. Права доступа на ключ пользователя назначает VPN-администратор.
	5. Организация разделена на департаменты. В каждом департаменте имеются свои VPN-администраторы, которые могут давать доступ любому ключу, но только на ресурсы своего департамента. VPN-администратор может числиться в нескольких департаментах.
	6. Все действия VPN-администраторов должны записываться.
	Результат следует представить в виде SQL-запросов для создания таблиц и реляционной модели данной БД (схема или рисунок).
	Task:
	Модель базы данных:
	1. Пользователь – репрезентация пользователей в приложении. Должны быть обычные и админ пользователи (админ назначается руками в базе или создаётся на старте приложения)
	2. Товар – Состоит из заголовка, описания и цены
	3. Счёт – Имеет идентификатор счёта и баланс. Привязан к пользователю. У пользователя может быть несколько счетов
	4. Транзакция – история зачисления на счёт, хранит сумму зачисления и идентификатор счёта
	Функциональные критерии:
	Весь описываемый ниже функционал должен быть осуществлён в формате REST API. Работа с шаблонами, HTML или фронтендом в любой форме не предусматривается.
	Пользователь может:
	1. Регистрация (по паролю и логину, возвращает ссылку активации)
	2. Логин
	3. Просмотр списка товаров
	4. Покупка товара, просто списывает с баланса стоимость товара, при условии наличия на балансе счёта достаточного количества средств
	5. Просмотр баланса всех счетов и историю транзакций
	6. Зачисление средств на счёт, выполняется с помощью эндпоинта [POST] /payment/webhook симулирует начисление со стороннего сервиса.
	Пример тела вебхука, с транзакцией (формат json):
	{
		“signature”: “f4eae5b2881d8b6a1455f62502d08b2258d80084”,
		“transaction_id”: 1234567,
		“user_id”: 123456,
		“bill_id”: 123456,
		“amount”: 100
	}
	Сигнатура формируются по правилу:
	from Crypto.Hash import SHA1 
	signature = SHA1.new()\
	.update(f'{private_key}:{transaction_id}:{user_id}:{bill_id}:{amount}'.encode())\
	.hexdigest()
	Где private_key – приватный ключ, задаётся в свойствах приложения, transaction_id – уникальный идентификатор транзакции, user_id – пользователь на чеё счёт произойдёт зачисление, bill_id – идентификатор счёта (если счёта с таким айди не существует, то но должен быть создан), amount – сумма транзакции.
	Возможности админа:
	1. Видеть все товары
	2. Видеть всех пользователей и их счета
	3. Включать/отключать пользователей
	4. Создавать/редактировать/удалять товары
	Не функциональные критерии
	1. Логины пользователей уникальны
	2. После регистрации пользователь создаётся в не активном состоянии. Становится активным переходя по ссылке полученной с регистрации
	3. Авторизация должна быть сделана через JWT. Защищённые эндпоинты должны получать токен в заголовке Authorization в Bearer формате
	Время выполнения задачи желательно не более 7 дней.
	Выполнить задачу с учётом особенностей асинхронной обработки данных. В особенности это касается обработки транзакций, приложение должно быть способно обработать сравнительно большой объём параллельных запросов (с поправкой на технические характеристики сервера).

Frontend, Основы
	Task:
	Создание HTML-списков 
	Decision:
	<ul>
		<li>Linux Server Administration</li>
		<li>Working with websites</li>
	</ul>
	Source:
	https://html5book.ru/html-lists/?ysclid=lis7im73ng615064864

Frontend, Разработка таблицы в формате Single Page Application
	Task:
	Нужно разработать таблицу в формате Single Page Application.
	Требования к таблице.
	1. Таблица должна содержать 4 колонки: Дата, Название, Количество, Расстояние
	2. База данных может быть mySQL/PostgreSQL
	3. Таблица должна иметь сортировку по всем полям кроме даты. Фильтрация должна быть в виде двух выпадающих списков и текстового поля: Выбор колонки, по которой будет фильтрация, Выбор условия (равно, содержить, больше, меньше), Поле для ввода значения для фильтрации
	4. Таблица должна содержать пагинацию
	Вся таблица должна работать без перезагрузки страницы.
	Можно использовать:
	1. возможности нативного JS и PHP
	2. jQuery/Vue/React/Axios
	3. CSS библиотеки
	4. модули Symfony/Zend для работы с БД
	Нельзя использовать:
	1. Библиотеки с готовыми компонентами или плагины для jQuery/Vue/React, которые предоставляют готовый функционал, требуемый в задании
	2. Библиотеки и плагины для валидации
	3. CMS системы
	Критерии оценки:
	1. Названия переменных
	2. Адекватность архитектуры приложения
	3. Оптимизация работы приложения и его масштабируемость
	4. Безопасность

Frontend, Разработка отправки формы на электронную почту (email)
	Task:
	Давайте настроим форму обратной связи и добавим возможность ее отправки на email
	Decision:
	приготовим форму:
	    <form action="test.html" name="f1">
	    <input class="footer__name" placeholder="Ваше имя" type="text" name="name1" required>
	    <input class="footer__email" placeholder="Ваш Е-mail" type="email" name="email1" required="required">
	    <textarea class="footer__textarea" placeholder="Ваш текст" name="text" required="required"></textarea >
	    <input class="btn btn__form" value="Отправить" type="submit" name="sab">
	    </form>
	В файле test.html простое уведомление:
		<div class="footer__text"> Спасибо, что написали! Cкоро свяжусь с вами. </div> 
	Теперь попробуем настроить на хостинге нашу форму. ДЛя этого нужно добавить в форме action="http://ct.tmweb.ru/php/b0.php" - обработчик, к которому обращаются данные формы при их отправке на сервер method="post" - метод посылающий на сервер данные в запросе браузера. target="_blank" - загружает страницу в новое окно браузера.
	    <form action="http://ct.tmweb.ru/php/b0.php" method="post" target="_blank" name="f1"> 
	Код обработчика b0.php:
	    <meta charset="utf-8">
	    <?php
	    $urok="Question";
	    error_reporting( E_ERROR ); //Отключение предупреждений и нотайсов (warning и notice) на сайте
	    // создание переменных из полей формы
	    if (isset($_POST['name1'])) {$name1 = $_POST['name1']; if ($name1 == '') {unset($name1);}}
	    if (isset($_POST['email1'])) {$email1 = $_POST['email1']; if ($email1 == '') {unset($email1);}}
	    if (isset($_POST['text'])) {$text = $_POST['text']; if ($text == '') {unset($text);}}
	    if (isset($_POST['sab'])) {$sab = $_POST['sab']; if ($sab == '') {unset($sab);}}
	    //стирание треугольных скобок из полей формы
	    if (isset($name1) ) { $name1=stripslashes($name1); $name1=htmlspecialchars($name1);}
	    if (isset($email1) ) {
	    $email1=stripslashes($email1);
	    $email1=htmlspecialchars($email1);
	    }
	    if (isset($text) ) { $text=stripslashes($text); $text=htmlspecialchars($text); }
	    // адрес почты куда придет письмо
	    $address="Dato138IT@yandex.ru";
	    // текст письма
	    $note_text="Тема : $urok \r\nИмя : $name1 \r\n Email : $email1 \r\n Дополнительная информация : $text";
	    if (isset($name1) && isset ($sab) ) { mail($address,$urok,$note_text,"Content-type:text/plain; windows-1251");
	    // сообщение после отправки формы
	    echo "<p style='color:#009900;'>Уважаемый(ая) $name1 Ваше письмо отправленно успешно. Спасибо. Вам скоро ответят на почту $email1. </p>";}
	    ?> 
	Мы видим, что после заполнения формы и нажатия на кнопку "отправить", открывается окно, об успешной отправке письма. Сейчас уже так не делают. Допустим мы не хотим, чтобы открывалось это окошко. нужно сделать так, чтобы уведомление об успешной отправки отображалось на этой же странице. Для этого можно просто перенести код с файла b0.php в файл index, где находится наша форма:
	    <form action="http://ct.tmweb.ru/index.php" method="post" name="f1">
	    <input class="footer__name" placeholder="Ваше имя" type="text" name="name1" required>
	    <input class="footer__email" placeholder="Ваш Е-mail" type="email" name="email1" required="required">
	    <textarea class="footer__textarea" placeholder="Ваш текст" name="text" required="required"></textarea>
	    <input class="btn btn__form" value="Отправить" type="submit" name="sab">
	    </form>
	    <?php
	    $question="Question";
	    error_reporting( E_ERROR ); //Отключение предупреждений и нотайсов (warning и notice) на сайте
	    // создание переменных из полей формы
	    if (isset($_POST['name1'])) {$name1 = $_POST['name1']; if ($name1 == '') {unset($name1);}}
	    if (isset($_POST['email1'])) {$email1 = $_POST['email1']; if ($email1 == '') {unset($email1);}}
	    if (isset($_POST['text'])) {$text = $_POST['text']; if ($text == '') {unset($text);}}
	    if (isset($_POST['sab'])) {$sab = $_POST['sab']; if ($sab == '') {unset($sab);}}
	    //стирание треугольных скобок из полей формы
	    if (isset($name1) ) { $name1=stripslashes($name1); $name1=htmlspecialchars($name1); }
	    if (isset($email1) ) { $email1=stripslashes($email1); $email1=htmlspecialchars($email1); }
	    if (isset($text) ) { $text=stripslashes($text); $text=htmlspecialchars($text);}
	    // адрес почты куда придет письмо
	    $address="Dato138IT@yandex.ru";
	    // текст письма
	    $note_text="Тема : $question \r\nИмя : $name1 \r\n Email : $email1 \r\n Дополнительная информация : $text";
	    if (isset($name1) && isset ($sab) ) { mail($address,$question,$note_text,"Content-type:text/plain; windows-1251");
	    // сообщение после отправки формы
	    echo "<p style='text-align:center;background-color:#3a3e64;font-size:15px;color:#fff;'>Уважаемый(ая) $name1 Ваше письмо отправленно успешно. Спасибо. Вам скоро ответят на почту $email1.</p>";}
	    ?>
	Только теперь наша наш файл с расширениеv html нужно переимновать в расшрение php. Так как код написанный на языке php, работает только с расширением php. И в форме action мы указываем именно тот путь где находится наша форма. также нужно убрать target="_blank", чтобы не открывалось пустое окно
	Теперь нужно сделать якорб для формы, чтобы после нажатия на кнопку "отправить", страница оставалась на том же месте. Для этого добавим ссылку:
	    <a name="form__anchor"></a>
	    <form action="http://ct.tmweb.ru/index.php#form__anchor" method="post" name="f1">
	    <input class="footer__name" placeholder="Ваше имя" type="text" name="name1" required>
	    <input class="footer__email" placeholder="Ваш Е-mail" type="email" name="email1" required="required">
	    <textarea class="footer__textarea" placeholder="Ваш текст" name="text" required="required"></textarea>
	    <input class="btn btn__form" value="Отправить" type="submit" name="sab">
	    </form> 
	На этом все. теперь у нас рабочая форма. Можем смело отправлять письмо и проверять почту. 
	Source:
	1. https://www.youtube.com/playlist?list=PLmaZf_calrAZizvrAlKPV0RW8nn6LsTE6

Frontend, Верстка окна лицензий
	Task:
	Верстка окна лицензий
    1. Сверстать приведенный ниже дизайн
    2. Тип лицензии выводить шрифтом Bebas - выводить через font-face
    3. Отображать тип выбранной лицензии и итоговую сумму
    4. Формат ссылки в кнопке Buy Now сформируйте по вашему усмотрению
	P.S. Все исходники залить на GitHub. Ссылку отправить через HH.ru/SJ.

Backend, Nginx
	Task:
	Сборка Nginx из исходного кода (Ubuntu 20.04)
	Decision:
	$ sudo apt-get update
	$ sudo apt-get -y install build-essential
	$ wget https://nginx.org/download/nginx-1.21.1.tar.gz
	$ tar -zxvf nginx-1.21.1.tar.gz
	$ cd nginx-1.21.1/     
	$ sudo apt-get install libpcre3 libpcre3-dev libpcrecpp0v5 libssl-dev zlib1g-dev
	$ ls -l
	  total 812
	  -rw-r--r-- 1 ubuntu ubuntu 313379 Jul  6 09:59 CHANGES
	  -rw-r--r-- 1 ubuntu ubuntu 478586 Jul  6 09:59 CHANGES.ru
	  -rw-r--r-- 1 ubuntu ubuntu   1397 Jul  6 09:59 Li-cENSE
	  -rw-r--r-- 1 ubuntu ubuntu     49 Jul  6 09:59 README
	  drwxr-xr-x 6 ubuntu ubuntu   4096 Jul 31 03:28 auto
	  drwxr-xr-x 2 ubuntu ubuntu   4096 Jul 31 03:28 conf
	  -rwxr-xr-x 1 ubuntu ubuntu   2590 Jul  6 09:59 configure
	  drwxr-xr-x 4 ubuntu ubuntu   4096 Jul 31 03:28 contrib
	  drwxr-xr-x 2 ubuntu ubuntu   4096 Jul 31 03:28 html
	  drwxr-xr-x 2 ubuntu ubuntu   4096 Jul 31 03:28 man
	  drwxr-xr-x 9 ubuntu ubuntu   4096 Jul 31 03:28 src
	$ ./configure --sbin-path=/usr/bin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-debug --with-pcre --with-http_ssl_module
	$ make
	$ sudo make install
	$ ls -l /etc/nginx/
	  total 68
	  -rw-r--r-- 1 root root 1077 Jul 31 03:50 fastcgi.conf
	  -rw-r--r-- 1 root root 1077 Jul 31 03:50 fastcgi.conf.default
	  -rw-r--r-- 1 root root 1007 Jul 31 03:50 fastcgi_params
	  -rw-r--r-- 1 root root 1007 Jul 31 03:50 fastcgi_params.default
	  -rw-r--r-- 1 root root 2837 Jul 31 03:50 koi-utf
	  -rw-r--r-- 1 root root 2223 Jul 31 03:50 koi-win
	  -rw-r--r-- 1 root root 5290 Jul 31 03:50 mime.types
	  -rw-r--r-- 1 root root 5290 Jul 31 03:50 mime.types.default
	  -rw-r--r-- 1 root root 2656 Jul 31 03:50 nginx.conf
	  -rw-r--r-- 1 root root 2656 Jul 31 03:50 nginx.conf.default
	  -rw-r--r-- 1 root root  636 Jul 31 03:50 scgi_params
	  -rw-r--r-- 1 root root  636 Jul 31 03:50 scgi_params.default
	  -rw-r--r-- 1 root root  664 Jul 31 03:50 uwsgi_params
	  -rw-r--r-- 1 root root  664 Jul 31 03:50 uwsgi_params.default
	  -rw-r--r-- 1 root root 3610 Jul 31 03:50 win-utf
	$ nginx
	  nginx: [alert] could not open error log file: open() "/var/log/nginx/error.log" failed (13: Per-tission denied)
	  2021/07/31 03:52:04 [emerg] 6512#0: mkdir() "/usr/local/nginx/client_body_temp" failed (13: Per-tission denied)
	$ sudo nginx
	$ ifconfig
	  enp0s3: flags=4163<UP,BROADCAST,RUNNING,MULTi-cAST>  mtu 1500
	          inet 192.168.0.105

	Web - 192.168.0.105/
	Source:
	1. https://www.asozykin.ru/courses/sql
	Task:
	Установка веб сервера с помощью Nginx, Php-fpm, PhpMyAdmin, Vsftpd
	Decision:
	В качестве веб сервера будет выступать Nginx с PHP-FPM, в качестве СУБД – MariaDB, в качестве ftp сервера – vsftpd настроенный на использование виртуальных пользователей, чтобы избежать проблем с правами и владельцами файлов при загрузке. А также поставим PHPMyAdmin
	$ sudo su
	# apt update
	# apt upgrade
	# add-apt-repository ppa:ondrej/php
	# add-apt-repository ppa:nginx/stable
	# apt update
	# apt install nginx
	# apt install php7.2-cli php7.2-fpm php7.2-curl php7.2-gd php7.2-mysql php7.2-mbstring zip unzip
	Task:
	После установки в целях безопасности отключим cgi.fix_pathinfo. В файле /etc/php/7.2/fpm/php.ini
	Decision:
	# vim /etc/php/7.2/fpm/php.ini
	;cgi.fix_pathinfo=1
	и меняем ее на
	cgi.fix_pathinfo=0
	# mv /etc/nginx/sites-available/default ~/
	# vim /etc/nginx/sites-available/default
	Содержимое должно быть таким:
	    server {
	        listen   80;
	        root /var/www/default;
	        index index.php index.html index.htm;
	        server_name  example.com www.example.com;
	        location / {
	                try_files $uri $uri/ /index.html;
	        }
	        error_page 404 /404.html;
	        error_page 500 502 503 504 /50x.html;
	        location = /50x.html {
	              root /usr/share/nginx/www;
	        }
	        location ~ .php$ {
	                try_files $uri =404;
	                fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;
	                fastcgi_index index.php;
	                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
	                include fastcgi_params;
	        }
	    }
	Task:
	Дальше посмотрим, сколько ядер имеется в нашей системе. И укажем это количество в качестве параметра worker_processes в файле /etc/nginx/nginx.conf
	Decision:
	# cat /proc/cpuinfo | grep processor | wc -l
	2
	# vim /etc/nginx/nginx.conf
	worker_processes 2;
	Task:
	Далее создадим папку для нашего сайта и в этой папке создадим файлик index.php.
	Decision:
	# mkdir /var/www/default
	# vim /var/www/default/index.php
	# cat /var/www/default/index.php
	    <?php
	        phpinfo();
	    ?>
	# chown -R www-data:www-data /var/www
	# /etc/init.d/nginx restart
	[ ok ] Restarting nginx (via systemctl): nginx.servi-ce.
	# /etc/init.d/php7.2-fpm restart
	[ ok ] Restarting php7.2-fpm (via systemctl): php7.2-fpm.servi-ce.
	# ifconfig
	enp0s8: flags=4163 mtu 1500
	inet 192.168.0.51 netmask 255.255.255.0 broadcast 192.168.0.255
	inet6 fe80::8e4a:9ec8:8bb7:dd53 prefixlen 64 scopeid 0x20
	ether 08:00:27:2f:ca:92 txqueuelen 1000 (Ethernet)
	RX packets 52059 bytes 57651545 (57.6 MB)
	RX errors 0 dropped 0 overruns 0 frame 0
	TX packets 41290 bytes 5027564 (5.0 MB)
	TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
	lo: flags=73 mtu 65536
	inet 127.0.0.1 netmask 255.0.0.0
	inet6 ::1 prefixlen 128 scopeid 0x10
	loop txqueuelen 1000 (Локальная петля (Loopback))
	RX packets 3202 bytes 323497 (323.4 KB)
	RX errors 0 dropped 0 overruns 0 frame 0
	TX packets 3202 bytes 323497 (323.4 KB)
	TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
	Web - 192.168.0.51
	Task:
	Далее поставим mariadb. Опять добавляем необходимый репозиторий, обновляем список пакетов и устанавливаем mariadb-server и mariadb-client
	Decision:
	# sudo apt-key adv —recv-keys —keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8
	# sudo add-apt-repository ‘deb [arch=amd64,ar-t64,ppc64el] http://mirror.timeweb.ru/mariadb/repo/10.3/ubuntu bioni-c main’
	# apt update
	# apt install mariadb-server mariadb-client
	# /etc/init.d/mysql restart
	[ ok ] Restarting mysql (via systemctl): mysql.servi-ce.
	# mysql -u root -p
	Enter password:
	Welcome to the MariaDB monitor. Commands end with ; or \g.
	Your MariaDB connection id is 37
	Server version: 10.3.20-MariaDB-1:10.3.20+maria~bioni-c-log mariadb.org binary distribution
	Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.
	Type ‘help;’ or ‘\h’ for help. Type ‘\c’ to clear the current input statement.
	MariaDB [(none)]> q
	-> Ctrl-C — exit!
	Aborted	
	Task:
	В Ubuntu 18.04 вы можете столкнуться с ситуацией, что после установки mariadb прекрасно работает, но после перезагрузки сервера, внезапно перестает запускаться – очень долго думает, но не запускается. Наиболее вероятная причина подобного поведения – app ar-tor. Что бы его отключить для mariadb необходимо выполнить
	Decision:
	# apt install appar-tor-utils
	# aa-disable /usr/sbin/mysqld
	Task:
	Теперь, давайте поставим phpMyAdmin, что бы упростить обслуживание баз данных. Ссылку на последнюю версию phpMyAdmin вы можете найти на сайте www.phpmyadmin.net.
	Decision:
	Скачаем архив, разарзхивируем его, создадим папку в папке с нашим сайтом и перенесем туда файлы.
	# cd /tmp
	# wget https://files.phpmyadmin.net/phpMyAdmin/4.9.2/phpMyAdmin-4.9.2-all-languages.zip
	# unzip phpMyAdmin-4.9.2-all-languages.zip
	# mkdir /var/www/default/phpmyadmin
	# mv phpMyAdmin-4.9.2-all-languages/* /var/www/default/phpmyadmin/
	# cp /var/www/default/phpmyadmin/config.sample.inc.php /var/www/default/phpmyadmin/config.inc.php
	# vim /var/www/default/phpmyadmin/config.inc.php
	В этом файле нужно задать значение для параметра $cfg[‘blowfish_secret’]. Значением должен быть случайный набор симоволов, например:
	$cfg[‘blowfish_secret’] = ‘af897a09df0897adf’;
	# chown -R www-data:www-data /var/www/default/phpmyadmin
	Web - 192.168.0.51/phpmyadmin/index.php
	Task:
	Теперь необходимо поставить ftp сервер. Если мы будем делать ftp сервер, с реальными пользователями, то будут проблемы с правами и владельцами файлов. Самый простой способ этого избежать – использовать виртуальных пользователей. Т.е. мы будем подключаться под пользователем vasya, но система будет считать, что работает пользователь www-data. Сегодня покажу, как такое сделать в vsftpd.Ставим vsftp и db-util. Обратите внимание, что на момент написания статьи актуальной версией является db5.3-util. Когда вы будете это читать, версия может быть другой. Нужно ставить актуальную версию.
	Decision:
	# apt install vsftpd db5.3-util
	# mkdir /etc/vsftpd
	# touch /etc/vsftpd/vsftpdusers
	# chmod 0600 /etc/vsftpd/vsftpdusers
	Отредактируем файл, тут первая строчка – имя пользователя, вторая – пароль, дальше по аналогии можно добавить несколько пользователей – сперва имя, ниже пароль.
	# vim /etc/vsftpd/vsftpdusers
	    ftpuser
	    123
	Захешируем наш файл и отредактируем разрешения на полученный:
	# db5.3_load -T -t hash -f /etc/vsftpd/vsftpdusers /etc/vsftpd/users.db
	# chmod 0600 /etc/vsftpd/users.db
	# mv /etc/vsftpd.conf ~/
	# vim /etc/vsftpd.conf
	Содержимое конфига должно быть следующим:
	listen=YES
	anonymous_enable=NO
	local_enable=YES
	xferlog_enable=YES
	user_sub_token=$USER
	local_root=/var/www/
	chroot_local_user=YES
	hide_ids=YES
	guest_enable=YES
	guest_username=www-data
	virtual_use_local_privs=YES
	write_enable=YES
	pasv_enable=YES
	#если сервер за натом — реальный адрес
	#pasv_address=1.2.3.4
	pasv_max_port=20200
	pasv_min_port=20400
	pam_servi-ce_name=vsftpd.virtual
	rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
	rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
	ssl_enable=NO
	connect_from_port_20=YES
	xferlog_file=/var/log/vsftpd.log
	xferlog_std_for-tat=YES
	idle_session_timeout=600
	data_connection_timeout=120
	ascii_upload_enable=YES
	ascii_download_enable=YES
	allow_writeable_chroot=YES
	seccomp_sandbox=NO
	local_umask=022
	Тут стоит обратить внимание на следующие параметры:
	local_root=/var/www/ — коревая папка, куда будут попадать пользователя, после подключения к серверу.
	guest_username=www-data – имя реального пользователя, который будет виден системе, от его имени будут происходить все операции с файлами.
	#pasv_address=1.2.3.4 – если у вас сервер за NAT, то тут нужно указать реальный, внешний адрес.
	И остался последний шаг – создадим конфиг для pam.d, что бы наши виртуальные пользователи могли подключаться:
	# vim /etc/pam.d/vsftpd.virtual
	Содержимое файла должно быть таким:
	auth       required     pam_userdb.so db=/etc/vsftpd/users
	account    required     pam_userdb.so db=/etc/vsftpd/users
	session    required     pam_loginuid.so
	# /etc/init.d/vsftpd restart
	[ ok ] Restarting vsftpd (via systemctl): vsftpd.service.
	Task:
	Поднять на VDS или локально виртуальный сервер с linux (желательно самостоятельно на virtualbox). 
	Поставить LEMP (Linux Nginx Mysql PHP)
	Настроить wordpress:
	1. Создать директорию в /var/www/wp
	2. Скачать wordpress с оф. сайта https://ru.wordpress.org/download/
	3. Разархивировать в нужную директорию
	4. Настроить отдачу по url-у. Если на VDS (по бесплатному техническому поддомену). Если настраивали на локальной машине, то по localhost.
	Task:
	Настроить nginx проксирование на php-fpm на сервере, который настроили по заданию 3.
	Учесть, чтобы по url-ам либо по домену, отдавался phpinfo с указанной версией php:
	1. IP/php5
	2. IP/php7.1
	3. IP/php7.3
	Task:
	Во время настройки NginX в качестве сервиса и обновление кастомного билда в Ubuntu 20.04 не мог запустить Nginx
	:/etc/init.d$ sudo service nginx start
	  ==== AUTHENTICATING FOR org.freedesktop.systemd1.manage-units ===
	  Authentication is required to start 'nginx.service'.
	  Authenticating as: Ubuntu,,, (ubuntu)
	  Password:
	  ==== AUTHENTICATION COMPLETE ===
	  Job for nginx.service failed because the control process exited with error code.
	  See "systemctl status nginx.service" and "journalctl -xe" for details.
	:/etc/init.d$ sudo systemctl status nginx
	  ● nginx.service - LSB: nginx init.d dash script for Ubuntu or other *nix.
	       Loaded: loaded (/etc/init.d/nginx; generated)
	       Active: failed (Result: exit-code) since Sat 2021-07-31 04:27:04 CDT; 49s ago
	         Docs: man:systemd-sysv-generator(8)
	      Process: 8612 ExecStart=/etc/init.d/nginx start (code=exited, status=7)
	  Jul 31 04:27:02 u nginx[8617]: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)
	  Jul 31 04:27:02 u nginx[8617]: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)
	  Jul 31 04:27:03 u nginx[8617]: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)
	  Jul 31 04:27:03 u nginx[8617]: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)
	  Jul 31 04:27:04 u nginx[8617]: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)
	  Jul 31 04:27:04 u nginx[8617]: nginx: [emerg] still could not bind()
	  Jul 31 04:27:04 u nginx[8612]:    ...fail!
	  Jul 31 04:27:04 u systemd[1]: nginx.service: Control process exited, code=exited, status=7/NOTRUNNING
	  Jul 31 04:27:04 u systemd[1]: nginx.service: Failed with result 'exit-code'.
	  Jul 31 04:27:04 u systemd[1]: Failed to start LSB: nginx init.d dash script for Ubuntu or other *nix..
	Decision:
	:/etc/init.d$ sudo netstat -antp | grep LISTEN
	  tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      512/systemd-resolve
	  tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      761/sshd: /usr/sbin
	  tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      657/cupsd           
	  tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      6521/nginx: master  
	  tcp6       0      0 :::22                   :::*                    LISTEN      761/sshd: /usr/sbin
	  tcp6       0      0 ::1:631                 :::*                    LISTEN      657/cupsd           
	  tcp6       0      0 :::33060                :::*                    LISTEN      766/mysqld          
	  tcp6       0      0 :::3306                 :::*                    LISTEN      766/mysqld          
	:/etc/init.d$ sudo kill -9 6521
	:/etc/init.d$ sudo netstat -antp | grep LISTEN
	  tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      512/systemd-resolve
	  tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      761/sshd: /usr/sbin
	  tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      657/cupsd           
	  tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      6522/nginx: worker  
	  tcp6       0      0 :::22                   :::*                    LISTEN      761/sshd: /usr/sbin
	  tcp6       0      0 ::1:631                 :::*                    LISTEN      657/cupsd           
	  tcp6       0      0 :::33060                :::*                    LISTEN      766/mysqld          
	  tcp6       0      0 :::3306                 :::*                    LISTEN      766/mysqld
	:/etc/init.d$ sudo kill -9 6522
	:/etc/init.d$ sudo service nginx stop
	:/etc/init.d$ sudo netstat -antp | grep LISTEN
	  tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      512/systemd-resolve
	  tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      761/sshd: /usr/sbin
	  tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      657/cupsd           
	  tcp6       0      0 :::22                   :::*                    LISTEN      761/sshd: /usr/sbin
	  tcp6       0      0 ::1:631                 :::*                    LISTEN      657/cupsd           
	  tcp6       0      0 :::33060                :::*                    LISTEN      766/mysqld          
	  tcp6       0      0 :::3306                 :::*                    LISTEN      766/mysqld
	:/etc/init.d$ sudo service nginx start
	:/etc/init.d$ sudo service nginx status
	  ● nginx.service - LSB: nginx init.d dash script for Ubuntu or other *nix.
	       Loaded: loaded (/etc/init.d/nginx; generated)
	       Active: active (running) since Sat 2021-07-31 05:14:17 CDT; 10s ago
	         Docs: man:systemd-sysv-generator(8)
	      Process: 9125 ExecStart=/etc/init.d/nginx start (code=exited, status=0/SUCCESS)
	     Main PID: 9131 (nginx)
	        Tasks: 2 (limit: 2313)
	       Memory: 2.1M
	       CGroup: /system.slice/nginx.service
	               ├─9131 nginx: master process /usr/bin/nginx -c /etc/nginx/nginx.conf
	               └─9132 nginx: worker process
	  Jul 31 05:14:17 u systemd[1]: Starting LSB: nginx init.d dash script for Ubuntu or other *nix....
	  Jul 31 05:14:17 u nginx[9125]:  * Starting Nginx Server...
	  Jul 31 05:14:17 u nginx[9125]:    ...done.
	  Jul 31 05:14:17 u systemd[1]: Started LSB: nginx init.d dash script for Ubuntu or other *nix..

Backend, Webpack
	Task:
	Установить Node.js в Ubuntu для настройки Webpack
	Decision:
	Заранее подготовим проект вебпак:
	$ ls
	  assets  package.json  package-lock.json  public  README.md  src  webpack
	Сначала давайте проверим установлена ли у вас эта программа:
	$ dpkg --get-selections | grep node
	Чтобы установить Node.js Ubuntu 20.04 с помощью NVM нам понадобится компилятор C++ в системе, а также другие инструменты для сборки. По умолчанию система не поставляется с этими программами, поэтому их необходимо установить. Также нам понадобится libssl. Для этого выполните команду:
	$ sudo apt update -y
	$ sudo apt -y install build-essential checkinstall
	$ sudo apt install libssl-dev
	Скачать и установить менеджер версий NVM можно с помощью следующей команды:
	$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash
	После завершения установки вам понадобится перезапустить терминал. Или можно выполнить:
	$ source /etc/profile
	Затем смотрим список доступных версий Node js:
	$ nvm ls-remote
	        v0.1.14
	        ...
	        v15.1.0
	        v15.2.0
	        v15.2.1
	Дальше можно устанавливать Node js в Ubuntu, при установке обязательно указывать версию (но у меня она уже установлена):
	$ nvm install 14.0
	  v14.0.0 is already installed.
	  Now using node v14.0.0 (npm v6.14.4)
	Список установленных версий вы можете посмотреть выполнив:
	$ nvm list
	  ->      v14.0.0
	  default -> 14.0 (-> v14.0.0)
	  node -> stable (-> v14.0.0) (default)
	  stable -> 14.0 (-> v14.0.0) (default)
	  iojs -> N/A (default)
	  lts/* -> lts/fermium (-> N/A)
	  lts/argon -> v4.9.1 (-> N/A)
	  lts/boron -> v6.17.1 (-> N/A)
	  lts/carbon -> v8.17.0 (-> N/A)
	  lts/dubnium -> v10.23.0 (-> N/A)
	  lts/erbium -> v12.19.1 (-> N/A)
	  lts/fermium -> v14.15.1 (-> N/A)
	Дальше необходимо указать менеджеру какую версию нужно использовать:
	$ nvm use 14.0
	  Now using node v14.0.0 (npm v6.14.4)
	Как только появятся более новые версии node.js, вы сможете их установить и активировать в системе. Посмотреть версию вы можете выполнив команду:
	$ node -v
	  v14.0.0
	$ npm -v
	  6.14.4
	Установим npm:
	$ npm i
	Чтоб просмотреть какие ошибки есть у проектора и исправить их:
	$ npm audit fix
	Запускаем проект:
	$ npm start
	  ...
	  ｢wdm｣: Compiled successfully.
	Сonclusion:
	Можно проверить запустив браузер и набрав localhost
	Чтобы удалить эту версию node js, ее нужно деактивировать:
	$ nvm deactivate 14.0
	Затем можно удалить:
	$ nvm uninstall 14.0
	Source:
	1. https://losst.ru/ustanovka-node-js-ubuntu-18-04

Frontend, разработка сайта django rest api
	Task:
	Установка Django Rest Framework
	Decision:
	$ mkdir drf
	$ cd drf/
	$ vim requirements.txt
	$ cat requirements.txt 
	django
	djangorestframework
	djoser
	djangorestframework-simplejwt
	$ pip install -r requirements.txt
	$ django-admin startproject drfsite
	$ cd drfsite/
	$ google-chrome http://127.0.0.1:8000 &
	$ python3 manage.py runserver
	$ python3 manage.py migrate
	$ vim settings.py
	$ cat settings.py
	... 
	#LANGUAGE_CODE = 'en-us'
	LANGUAGE_CODE = 'ru'
	#TIME_ZONE = 'UTC'
	TIME_ZONE = 'Europe/Moscow'
	...
	$ python3 manage.py startapp women
	$ cat settings.txt
	... 
	INSTALLED_APPS = [
		'django.contrib.admin',
		'django.contrib.auth',
		'django.contrib.contenttypes',
		'django.contrib.sessions',
		'django.contrib.messages',
		'django.contrib.staticfiles',
		'women.apps.WomenConfig',
	]
	...
	$ vim women\models.py
	$ cat women\models.py
	from django.db import models
	class Women(models.Model):
		title=models.CharField(max_length=255, verbose_name="Заголовок")
		content=models.TextField(blank=True, verbose_name="Текст статьи")
		time_create=models.DateTimeField(auto_now_add=True, verbose_name="Время создания")
		time_update=models.DateTimeField(auto_now=True, verbose_name="Время изменения")
		is_published=models.BooleanField(default=True, verbose_name="Публикация")
		cat=models.ForeignKey('Category', on_delete=models.PROTECT, null=True, verbose_name="Категории")
		def __str__(self):
			return self.title
	class Category(models.Model):
		name=models.CharField(max_length=100, db_index=True, verbose_name="Категория")
		def __str__(self):
			return self.name
	$ python3 manage.py makemigrations
	$ python3 manage.py migrate
	$ python3 manage.py createsuperuser
	Имя пользователя (leave blank to use 'tuser'): tuser
	Адрес электронной почты: tmail138@yandex.ru
	Password: 
	Password (again): 
	$ vim women\admin.py
	$ cat women\admin.py
	from django.contrib import admin
	from .models import Women
	admin.site.register(Women)
	$ sudo apt install sqlite3
	$ sqlite3 db.sqlite3
	sqlite> SELECT name from sqlite_master where type= "table";
	django_migrations
	sqlite_sequence
	auth_group_permissions
	auth_user_groups
	auth_user_user_permissions
	django_admin_log
	django_content_type
	auth_permission
	auth_group
	auth_user
	django_session
	women_category
	women_women
	sqlite> INSERT INTO women_category (name)
	VALUES ("Актрисы"), ("Певицы");
	sqlite> select * from women_category;
	1|Актрисы
	2|Певицы
	$ python3 manage.py startapp women
	$ cat settings.txt
	... 
	INSTALLED_APPS = [
		'django.contrib.admin',
		'django.contrib.auth',
		'django.contrib.contenttypes',
		'django.contrib.sessions',
		'django.contrib.messages',
		'django.contrib.staticfiles',
		'women.apps.WomenConfig',
		'rest_framework',    
	]
	...
	$ python3 manage.py runserver
	$ vim women\views.py
	$ cat women\views.py
	from django.shortcuts import render
	from rest_framework import generics
	from .models import Women
	from .serializers import WomenSerializer
	class WomenAPIView(generics.ListAPIView):
		queryset = Women.objects.all()
		serializer_class = WomenSerializer
	$ vim women\serializers.py
	$ cat women\serializers.py
	from rest_framework import serializers
	from .models import Women
	class WomenSerializer(serializers.ModelSerializer):
		class Meta:
			model = Women
			fields = ('title', 'cat_id')
	$ vim drfsite\urls.py
	$ cat drfsite\urls.py
	from django.contrib import admin
	from django.urls import path
	from women.views import WomenAPIView
	urlpatterns = [
		path('admin/', admin.site.urls),
		path('api/v1/womenlist/', WomenAPIView.as_view()),
	]
	$ google-chrome http://127.0.0.1:8000/api/v1/womenlist/ &
	Task:
	Базовый класс APIView для представлений
	Decision:
	$ vim women\views.py
	$ cat women\views.py
	from django.shortcuts import render
	from rest_framework import generics
	from .models import Women
	from .serializers import WomenSerializer
	from rest_framework.views import APIView
	from rest_framework.response import Response
	from django.forms import model_to_dict
	#class WomenAPIView(generics.ListAPIView):
	#   queryset = Women.objects.all()
	#   serializer_class = WomenSerializer
	class WomenAPIView(APIView):
		def get(self, request):
			lst=Women.objects.all().values()
			#return Response({'title':'Актриса1'})
			return Response({'posts':list(lst)})
		def post(self, request):
			#return Response({'title':'Актриса2'})
			post_new=Women.objects.create(
				title=request.data['title'],
				content=request.data['content'],
				cat_id=request.data['cat_id']
			)
			return Response({'post':model_to_dict(post_new)})
	$ google-chrome https://web.postman.co/workspace/ &
	Task:
	Класс Serializer
	Decision:
	$ vim women\serializers.py
	$ cat women\serializers.py
	from rest_framework import serializers
	from .models import Women
	from rest_framework.renderers import JSONRenderer
	class WomenModel:
		def __init__(self, title, content):
			self.title = title
			self.content = content
	#class WomenSerializer(serializers.ModelSerializer):
	#   class Meta:
	#       model = Women
	#       fields = ('title', 'cat_id')
	class WomenSerializer(serializers.Serializer):
		title = serializers.CharField(max_length=255)
		content = serializers.CharField()
	def encode():
		model = WomenModel('Actrice1', 'Content: Actrice1')
		model_sr = WomenSerializer(model)
		print(model_sr.data, type(model_sr.data), sep='\n')
		json = JSONRenderer().render(model_sr.data)
		print(json)
	$ python3 manage.py shell
	>>> from women.serializers import encode
	>>> encode()
	{'title': 'Actrice1', 'content': 'Content: Actrice1'}
	<class 'rest_framework.utils.serializer_helpers.ReturnDict'>
	b'{"title":"Actrice1","content":"Content: Actrice1"}'
	>>> quit()
	$ vim women\serializers.py
	$ cat women\serializers.py
	from rest_framework import serializers
	from .models import Women
	from rest_framework.renderers import JSONRenderer
	from rest_framework.parsers import JSONParser
	import io
	...
	def decode():
		stream = io.BytesIO(b'{"title":"Actrice1", "content":"Content: Actrice1"}')
		data = JSONParser().parse(stream)
		serializer = WomenSerializer(data=data)
		serializer.is_valid()
		print(serializer.validated_data)
	$ python3 manage.py shell
	>>> from women.serializers import decode
	>>> decode()
	OrderedDict([('title', 'Actrice1'), ('content', 'Content: Actrice1')])
	>>> quit()
	$ vim women\serializers.py
	$ cat women\serializers.py
	from rest_framework import serializers
	from .models import Women
	from rest_framework.renderers import JSONRenderer
	from rest_framework.parsers import JSONParser
	import io
	#class WomenModel:
	#   def __init__(self, title, content):
	#       self.title = title
	#       self.content = content
	#class WomenSerializer(serializers.ModelSerializer):
	#   class Meta:
	#       model = Women
	#       fields = ('title', 'cat_id')
	class WomenSerializer(serializers.Serializer):
		title = serializers.CharField(max_length=255)
		content = serializers.CharField()
		time_create=serializers.DateTimeField(read_only=True)
		time_update=serializers.DateTimeField(read_only=True)
		is_published=serializers.BooleanField(default=True)
		cat_id=serializers.IntegerField()   
	#def encode():
	#   model = WomenModel('Actrice1', 'Content: Actrice1')
	#   model_sr = WomenSerializer(model)
	#   print(model_sr.data, type(model_sr.data), sep='\n')
	#   json = JSONRenderer().render(model_sr.data)
	#   print(json)
	#def decode():
	#   stream = io.BytesIO(b'{"title":"Actrice1", "content":"Content: Actrice1"}')
	#   data = JSONParser().parse(stream)
	#   serializer = WomenSerializer(data=data)
	#   serializer.is_valid()
	#   print(serializer.validated_data)
	$ vim women\views.py
	$ cat women\views.py
	...
	class WomenAPIView(APIView):
		def get(self, request):
			#lst=Women.objects.all().values()
			#return Response({'title':'Актриса1'})
			#return Response({'posts':list(lst)})
			w = Women.objects.all()
			return Response({'posts':WomenSerializer(w, many=True).data})
		def post(self, request):
			#return Response({'title':'Актриса2'})
			serializer=WomenSerializer(data=request.data)
			serializer.is_valid(raise_exception=True)
			post_new=Women.objects.create(
				title=request.data['title'],
				content=request.data['content'],
				cat_id=request.data['cat_id']
			)
			#return Response({'post':model_to_dict(post_new)})
			return Response({'post':WomenSerializer(post_new).data})
	$ python3 manage.py runserver
	Task:
	Методы save(), create() и update() класса Serializer
	Decision:
	$ vim women\serializers.py
	$ cat women\serializers.py
	...
	class WomenSerializer(serializers.Serializer):
		title = serializers.CharField(max_length=255)
		content = serializers.CharField()
		time_create=serializers.DateTimeField(read_only=True)
		time_update=serializers.DateTimeField(read_only=True)
		is_published=serializers.BooleanField(default=True)
		cat_id=serializers.IntegerField()
		def create(self, validated_data):
			return Women.objects.create(**validated_data)
		def update(self, instance, validated_data):
			instance.title=validated_data.get("title", instance.title)
			instance.content=validated_data.get("content", instance.content)
			instance.time_update=validated_data.get("time_update", instance.time_update)
			instance.is_published=validated_data.get("is_published", instance.is_published)
			instance.cat_id=validated_data.get("cat_id", instance.cat_id)
			instance.save()
			return instance
	...
	$ vim women\serializers.py
	$ cat women\serializers.py
	...
		def post(self, request):
			#return Response({'title':'Актриса2'})
			serializer=WomenSerializer(data=request.data)
			serializer.is_valid(raise_exception=True)
			#post_new=Women.objects.create(
			#   title=request.data['title'],
			#   content=request.data['content'],
			#   cat_id=request.data['cat_id']
			#)
			#return Response({'post':model_to_dict(post_new)})
			#return Response({'post':WomenSerializer(post_new).data})
			serializer.save()
			return Response({'post':serializer.data})
		def put(self, request, *args, **kwargs):
			pk = kwargs.get("pk", None)
			if not pk:
				return Response({"error": "Method PUT not allowed"})
			try:
				instance = Women.objects.get(pk=pk)
			except:
				return Response({"error": "Object does not exists"})
			serializer = WomenSerializer(data=request.data, instance=instance)
			serializer.is_valid(raise_exception=True)
			serializer.save()
			return Response({"post": serializer.data})
		def delete(self, request, *args, **kwargs):
			pk = kwargs.get("pk", None)
			if not pk:
				return Response({"error": "Method DELETE not allowed"})
			return Response({"post":"delete post "+str(pk)})
	$ vim drfsite\urls.py
	$ cat drfsite\urls.py
	...
	urlpatterns = [
		path('admin/', admin.site.urls),
		path('api/v1/womenlist/', WomenAPIView.as_view()),
		path('api/v1/womenlist/<int:pk>/', WomenAPIView.as_view()),
	]
	$ python3 manage.py runserver
	Task:
	Класс ModelSerializer и представление ListCreateAPIView 
	Decision:
	$ vim women\serializers.py
	$ cat women\serializers.py
	...
	#class WomenSerializer(serializers.Serializer):
	#	title = serializers.CharField(max_length=255)
	#	content = serializers.CharField()
	#	time_create=serializers.DateTimeField(read_only=True)
	#	time_update=serializers.DateTimeField(read_only=True)
	#	is_published=serializers.BooleanField(default=True)
	#	cat_id=serializers.IntegerField()
	#	def create(self, validated_data):
	#		return Women.objects.create(**validated_data)
	#	def update(self, instance, validated_data):
	#		instance.title=validated_data.get("title", instance.title)
	#		instance.content=validated_data.get("content", instance.content)
	#		instance.time_update=validated_data.get("time_update", instance.time_update)
	#		instance.is_published=validated_data.get("is_published", instance.is_published)
	#		instance.cat_id=validated_data.get("cat_id", instance.cat_id)
	#		instance.save()
	#		return instance
	class WomenSerializer(serializers.ModelSerializer):
		class Meta:
			model=Women
			#fields = ("title", "content", "cat")
			fields="__all__"
	...
	$ vim women\views.py
	$ cat women\views.py
	...
	#class WomenAPIView(generics.ListAPIView):
	class WomenAPIList(generics.ListCreateAPIView):
		queryset=Women.objects.all()
		serializer_class=WomenSerializer
	...
	$ vim drfsite\urls.py
	$ cat drfsite\urls.py
	...
	#from women.views import WomenAPIView
	from women.views import *
	urlpatterns = [
		path('admin/', admin.site.urls),
		#path('api/v1/womenlist/', WomenAPIView.as_view()),
		path('api/v1/womenlist/', WomenAPIList.as_view()),
		path('api/v1/womenlist/<int:pk>/', WomenAPIView.as_view()),
	]
	$ python3 manage.py runserver
	Task:
	Представления UpdateAPIView и RetrieveUpdateDestroyAPIView
	Decision:
	$ vim women\views.py
	$ cat women\views.py
	...
	#class WomenAPIView(APIView):
	#	def get(self, request):
			#lst=Women.objects.all().values()
			#return Response({'title':'Актриса1'})
			#return Response({'posts':list(lst)})
	#		w = Women.objects.all()
	#		return Response({'posts':WomenSerializer(w, many=True).data})
	#	def post(self, request):
			#return Response({'title':'Актриса2'})
	#		serializer=WomenSerializer(data=request.data)
	#		serializer.is_valid(raise_exception=True)
			#post_new=Women.objects.create(
			#	title=request.data['title'],
			#	content=request.data['content'],
			#	cat_id=request.data['cat_id']
			#)
			#return Response({'post':model_to_dict(post_new)})
			#return Response({'post':WomenSerializer(post_new).data})
	#		serializer.save()
	#		return Response({'post':serializer.data})
	#	def put(self, request, *args, **kwargs):
	#		pk = kwargs.get("pk", None)
	#		if not pk:
	#			return Response({"error": "Method PUT not allowed"})
	#		try:
	#			instance = Women.objects.get(pk=pk)
	#		except:
	#			return Response({"error": "Object does not exists"})
	#		serializer = WomenSerializer(data=request.data, instance=instance)
	#		serializer.is_valid(raise_exception=True)
	#		serializer.save()
	#		return Response({"post": serializer.data})
	#	def delete(self, request, *args, **kwargs):
	#		pk = kwargs.get("pk", None)
	#		if not pk:
	#			return Response({"error": "Method DELETE not allowed"})
	#		return Response({"post":"delete post "+str(pk)})
	class WomenAPIUpdate(generics.UpdateAPIView):
		queryset = Women.objects.all()
		serializer_class = WomenSerializer
	class WomenAPIDetailView(generics.RetrieveUpdateDestroyAPIView):
		queryset = Women.objects.all()
		serializer_class = WomenSerializer
	$ vim drfsite\urls.py
	$ cat drfsite\urls.py
	...
	urlpatterns = [
		path('admin/', admin.site.urls),
		#path('api/v1/womenlist/', WomenAPIView.as_view()),
		path('api/v1/womenlist/', WomenAPIList.as_view()),
		#path('api/v1/womenlist/<int:pk>/', WomenAPIView.as_view()),
		path('api/v1/womenlist/<int:pk>/', WomenAPIUpdate.as_view()),
		path('api/v1/womendetail/<int:pk>/', WomenAPIDetailView.as_view()),
	]
	$ vim drfsite\settings.py
	$ cat drfsite\settings.py
	...
	REST_FRAMEWORK = {
		'DEFAULT_RENDERER_CLASSES':[
			'rest_framework.renderers.JSONRenderer',
			#'rest_framework.renderers.BrowsableAPIRenderer',
		]
	}
	$ python3 manage.py runserver
	Task:
	Viewsets и ModelViewSet
	Decision:
	$ vim women\views.py
	$ cat women\views.py
	from django.shortcuts import render
	from rest_framework import generics, viewsets, mixins
	from .models import Women
	from .serializers import WomenSerializer
	from rest_framework.views import APIView
	from rest_framework.response import Response
	from django.forms import model_to_dict
	from rest_framework.viewsets import GenericViewSet
	...
	#class WomenAPIList(generics.ListCreateAPIView):
	#	queryset=Women.objects.all()
	#	serializer_class=WomenSerializer
	...
	#class WomenAPIUpdate(generics.UpdateAPIView):
	#	queryset = Women.objects.all()
	#	serializer_class = WomenSerializer
	#class WomenAPIDetailView(generics.RetrieveUpdateDestroyAPIView):
	#	queryset = Women.objects.all()
	#	serializer_class = WomenSerializer
	#class WomenViewSet(viewsets.ModelViewSet):
	#class WomenViewSet(viewsets.ReadOnlyModelViewSet):
	class WomenViewSet(mixins.CreateModelMixin,
		mixins.RetrieveModelMixin,
		mixins.UpdateModelMixin,
		mixins.ListModelMixin,
		GenericViewSet):
		queryset = Women.objects.all()
		serializer_class = WomenSerializer
	$ vim drfsite\urls.py
	$ cat drfsite\urls.py
	from django.contrib import admin
	from django.urls import path, include
	#from women.views import WomenAPIView
	from women.views import *
	from rest_framework import routers
	router=routers.SimpleRouter()
	router.register(r'women', WomenViewSet)
	urlpatterns = [
	    path('admin/', admin.site.urls),
	    #path('api/v1/womenlist/', WomenAPIView.as_view()),
	    #path('api/v1/womenlist/', WomenAPIList.as_view()),
	    #path('api/v1/womenlist/<int:pk>/', WomenAPIView.as_view()),
	    #path('api/v1/womenlist/<int:pk>/', WomenAPIUpdate.as_view()),
	    #path('api/v1/womendetail/<int:pk>/', WomenAPIDetailView.as_view()),
	    #path('api/v1/womenlist/', WomenViewSet.as_view({'get':'list'})),
	    #path('api/v1/womendetail/<int:pk>/', WomenViewSet.as_view({'put':'update'})),
	    path('api/v1/', include(router.urls)),
	]
	$ python3 manage.py runserver
	Task:
	Роутеры: SimpleRouter и DefaultRouter 
	Decision:
	$ vim drfsite\urls.py
	$ cat drfsite\urls.py
	...
	class MyCustomRouter(routers.SimpleRouter):
		routes = [
			routers.Route(url=r'^{prefix}$',
						mapping={'get': 'list'},
						name='{basename}-list',
						detail=False,
						initkwargs={'suffix': 'List'}),
			routers.Route(url=r'^{prefix}/{lookup}$',
						mapping={'get': 'retrieve'},
						name='{basename}-detail',
						detail=True,
						initkwargs={'suffix': 'Detail'})
		]
	#router=routers.SimpleRouter()
	#router=routers.DefaultRouter()
	router=MyCustomRouter()
	#router.register(r'women', WomenViewSet)
	#router.register(r'women', WomenViewSet, basename='men')
	router.register(r'women', WomenViewSet, basename='women')
	print(router.urls)
	...
	$ vim women\views.py
	$ cat women\views.py
	from django.shortcuts import render
	from rest_framework import generics, viewsets, mixins
	from .models import Women, Category
	from .serializers import WomenSerializer
	from rest_framework.views import APIView
	from rest_framework.response import Response
	from django.forms import model_to_dict
	from rest_framework.viewsets import GenericViewSet
	from rest_framework.decorators import action
	...
	class WomenViewSet(mixins.CreateModelMixin,
		mixins.RetrieveModelMixin,
		mixins.UpdateModelMixin,
		mixins.ListModelMixin,
		GenericViewSet):
		#queryset = Women.objects.all()
		serializer_class = WomenSerializer
		def get_queryset(self):
			#return Women.objects.all()[:3]
			pk=self.kwargs.get("pk")
			if not pk:
				return Women.objects.all()[:3]
			return Women.objects.filter(pk=pk)
		@action(methods=['get'], detail=True)
		def category(self, request, pk=None):
			#cats = Category.objects.all()
			#return Response({'cats': [c.name for c in cats]})
			cats = Category.objects.get(pk=pk)
			return Response({'cats': cats.name})
	$ python3 manage.py runserver
	Task:
	Ограничения доступа (permissions)
	Decision:
	$ vim women\models.py
	$ cat women\models.py
	from django.db import models
	from django.contrib.auth.models import User
	...
		cat=models.ForeignKey('Category', on_delete=models.PROTECT, null=True, verbose_name="Категории")
		user=models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="Пользователь")
		def __str__(self):
	...
	$ python3 manage.py makemigrations
	Select an option: 1
	>>> 1
	$ python3 manage.py migrate
	$ vim women/views.py
	$ cat women/views.py
	from django.shortcuts import render
	from rest_framework import generics, viewsets, mixins
	from .models import Women, Category
	from .serializers import WomenSerializer
	from rest_framework.views import APIView
	from rest_framework.response import Response
	from django.forms import model_to_dict
	from rest_framework.viewsets import GenericViewSet
	from rest_framework.decorators import action
	from rest_framework.permissions import IsAuthenticatedOrReadOnly, IsAdminUser
	from .permissions import IsAdminOrReadOnly, IsOwnerOrReadOnly
	class WomenAPIList(generics.ListCreateAPIView):
		queryset=Women.objects.all()
		serializer_class=WomenSerializer
		#permissions_classes=(IsAuthenticatedOrReadOnly, )
	class WomenAPIUpdate(generics.RetrieveUpdateAPIView):
		queryset = Women.objects.all()
		serializer_class = WomenSerializer
		permissions_classes=(IsOwnerOrReadOnly, )
	class WomenAPIDestroy(generics.RetrieveDestroyAPIView):
		queryset = Women.objects.all()
		serializer_class = WomenSerializer
		permissions_classes=(IsAdminOrReadOnly, )
	$ vim drfsite\urls.py
	$ cat drfsite\urls.py
	...
	#class MyCustomRouter(routers.SimpleRouter):
	#    routes = [
	#        routers.Route(url=r'^{prefix}$',
	#                      mapping={'get': 'list'},
	#                      name='{basename}-list',
	#                      detail=False,
	#                      initkwargs={'suffix': 'List'}),
	#        routers.Route(url=r'^{prefix}/{lookup}$',
	#                      mapping={'get': 'retrieve'},
	#                      name='{basename}-detail',
	#                      detail=True,
	#                      initkwargs={'suffix': 'Detail'})
	#    ]
	#router=routers.SimpleRouter()
	#router=routers.DefaultRouter()
	#router=MyCustomRouter()
	#router.register(r'women', WomenViewSet)
	#router.register(r'women', WomenViewSet, basename='men')
	#router.register(r'women', WomenViewSet, basename='women')
	#print(router.urls)
	urlpatterns = [
		path('admin/', admin.site.urls),
		#path('api/v1/womenlist/', WomenAPIView.as_view()),
		#path('api/v1/womenlist/', WomenAPIList.as_view()),
		#path('api/v1/womenlist/<int:pk>/', WomenAPIView.as_view()),
		#path('api/v1/womenlist/<int:pk>/', WomenAPIUpdate.as_view()),
		#path('api/v1/womendetail/<int:pk>/', WomenAPIDetailView.as_view()),
		#path('api/v1/womenlist/', WomenViewSet.as_view({'get':'list'})),
		#path('api/v1/womendetail/<int:pk>/', WomenViewSet.as_view({'put':'update'})),
		#path('api/v1/', include(router.urls)),
		path('api/v1/women/', WomenAPIList.as_view()),
		path('api/v1/women/<int:pk>/', WomenAPIUpdate.as_view()),
		path('api/v1/womendelete/<int:pk>/', WomenAPIDestroy.as_view()),
	]
	$ vim women/serializers.py
	$ cat women/serializers.py
	...
	class WomenSerializer(serializers.ModelSerializer):
		user=serializers.HiddenField(default=serializers.CurrentUserDefault())
		class Meta:
			model=Women
			#fields = ("title", "content", "cat")
			fields="__all__"
	...
	$ touch women/permissions.py
	$ vim women/permissions.py
	$ cat women/permissions.py
	from rest_framework import permissions
	class IsAdminOrReadOnly(permissions.BasePermission):
		def has_permission(self, request, view):
			if request.method in permissions.SAFE_METHODS:
				return True
			return bool(request.user and request.user.is_staff)
	class IsOwnerOrReadOnly(permissions.BasePermission):
		def has_object_permission(self, request, view, obj):
			if request.method in permissions.SAFE_METHODS:
				return True
			return obj.user == request.user
	$ vim drfsite\settings.py
	$ cat drfsite\settings.py
	...
	REST_FRAMEWORK = {
		'DEFAULT_RENDERER_CLASSES':[
			'rest_framework.renderers.JSONRenderer',
			'rest_framework.renderers.BrowsableAPIRenderer',
		],
		'DEFAULT_PERMISSION_CLASSES':[
			#'rest_framework.permissions.IsAuthenticated',
			'rest_framework.permissions.AllowAny',
		]
	}
	$ python3 manage.py runserver
	Task:
	Авторизация и аутентификация. Session-based authentication.
	Decision:
	$ vim drfsite\urls.py
	$ cat drfsite\urls.py
	...
	[
	...
		path('api/v1/womendelete/<int:pk>/', WomenAPIDestroy.as_view()),
		path('api/v1/drf-auth/', include('rest_framework.urls')),
	]
	$ python3 manage.py runserver
	$ google-chrome http://127.0.0.1:8000/api/v1/drf-auth/ & 
	Task:
	Аутентификация по токенам. Пакет Djoser
	Decision:
	$ vim drfsite\settings.py
	$ cat drfsite\settings.py
	...
	INSTALLED_APPS = [
		'django.contrib.admin',
		'django.contrib.auth',
		'django.contrib.contenttypes',
		'django.contrib.sessions',
		'django.contrib.messages',
		'django.contrib.staticfiles',
		'women.apps.WomenConfig',
		'rest_framework',
		'rest_framework.authtoken',
		'djoser',
	]
	...
	$ python3 manage.py migrate
	$ vim drfsite\urls.py
	$ cat drfsite\urls.py
	...
	from django.urls import path, include, re_path
	[
		...
		path('api/v1/drf-auth/', include('rest_framework.urls')),
		path('api/v1/auth/', include('djoser.urls')),
		re_path(r'^auth/', include('djoser.urls.authtoken')),
	]
	$ vim drfsite\settings.py
	$ cat drfsite\settings.py
	...
	REST_FRAMEWORK = {
		...
		'DEFAULT_AUTHENTICATION_CLASSES':[
			'rest_framework.authentication.TokenAuthentication',
			'rest_framework.authentication.BasicAuthentication',
			'rest_framework.authentication.SessionAuthentication',
		],
	}
	$ vim women\views.py
	$ cat women\views.py
	...
	from rest_framework.permissions import IsAuthenticatedOrReadOnly, IsAdminUser, IsAuthenticated
	from .permissions import IsAdminOrReadOnly, IsOwnerOrReadOnly
	from rest_framework.authentication import TokenAuthentication
	...
	class WomenAPIUpdate(generics.RetrieveUpdateAPIView):
		queryset = Women.objects.all()
		serializer_class = WomenSerializer
		#permissions_classes=(IsOwnerOrReadOnly, )
		permissions_classes=(IsAuthenticated, )
		#authentication_classes = (TokenAuthentication, )
	...
	$ python3 manage.py runserver
	$ google-chrome http://127.0.0.1:8000/api/v1/auth/ & 
	Task:
	Делаем авторизацию по JWT-токенам
	Decision:
	$ vim drfsite\settings.py
	$ cat drfsite\settings.py
	from pathlib import Path
	from datetime import timedelta
	...
	REST_FRAMEWORK = {
		...
		'DEFAULT_AUTHENTICATION_CLASSES':[
			#'rest_framework.authentication.TokenAuthentication',
			'rest_framework_simplejwt.authentication.JWTAuthentication',
			'rest_framework.authentication.BasicAuthentication',
			'rest_framework.authentication.SessionAuthentication',        
		],
	}
	SIMPLE_JWT = {
		"ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
		"REFRESH_TOKEN_LIFETIME": timedelta(days=1),
		"ROTATE_REFRESH_TOKENS": False,
		"BLACKLIST_AFTER_ROTATION": False,
		"UPDATE_LAST_LOGIN": False,
		"ALGORITHM": "HS256",
		"SIGNING_KEY": SECRET_KEY,
		"VERIFYING_KEY": "",
		"AUDIENCE": None,
		"ISSUER": None,
		"JSON_ENCODER": None,
		"JWK_URL": None,
		"LEEWAY": 0,
		#"AUTH_HEADER_TYPES": ("Bearer",),
		"AUTH_HEADER_TYPES": ("JWT",),
		"AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
		"USER_ID_FIELD": "id",
		"USER_ID_CLAIM": "user_id",
		"USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
		"AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
		"TOKEN_TYPE_CLAIM": "token_type",
		"TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
		"JTI_CLAIM": "jti",
		"SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
		"SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
		"SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
		"TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
		"TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
		"TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
		"TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
		"SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
		"SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
	}
	$ vim drfsite\urls.py
	$ cat drfsite\urls.py
	from django.contrib import admin
	from django.urls import path, include, re_path
	#from women.views import WomenAPIView
	from women.views import *
	from rest_framework import routers
	from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView, TokenVerifyView
	...
	urlpatterns = [
		...
		re_path(r'^auth/', include('djoser.urls.authtoken')),
		path('api/v1/token/verify/', TokenVerifyView.as_view(), name='token_verify'),
		path('api/v1/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
		path('api/v1/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
	]
	$ python3 manage.py runserver
	$ google-chrome http://127.0.0.1:8000/api/v1/token/ & 
	Task:
	Добавляем пагинацию (pagination)
	Decision:
	$ vim drfsite\settings.py
	$ cat drfsite\settings.py
	...
	REST_FRAMEWORK = {
		'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
		'PAGE_SIZE': 2,
		...
	}
	$ vim women\views.py
	$ cat women\views.py
	...
	from rest_framework.pagination import PageNumberPagination
	#class WomenAPIView(generics.ListAPIView):
	class WomenAPIListPagination(PageNumberPagination):
		page_size=3
		page_size_query_param='page_size'
		max_page_size=10000
	class WomenAPIList(generics.ListCreateAPIView):
		queryset=Women.objects.all()
		serializer_class=WomenSerializer
		permissions_classes=(IsAuthenticatedOrReadOnly, )
		pagination_class=WomenAPIListPagination
	...
	$ python3 manage.py runserver
	$ google-chrome http://127.0.0.1:8000/api/v1/women/ & 
	Source:
	https://www.youtube.com/playlist?list=PLA0M1Bcd0w8xZA3Kl1fYmOH_MfLpiYMRs
	https://www.freecodecamp.org/news/python-requirementstxt-explained/
	https://timeweb.cloud/tutorials/sqlite/rukovodstvo-po-nastrojke-sqlite
	https://itfy.org/threads/kak-poluchit-spisok-tablic-v-sqlite3.695/
	https://linuxgenie.net/how-to-install-postman-on-ubuntu-22-04/
	https://pyonlycode.com/post/how-to-solve-nameerror-name-io-is-not-defined/
	https://django-rest-framework-simplejwt.readthedocs.io/en/latest/index.html
	https://jwt.io/
