Mail for feedback: David138it@gmail.com

С++, Game development
    Task:
    Генерация. пытаемся отгадать число у компа
    Decision:
    #include<iostream>
    #include<cstdlib>
    #include<ctime>
    using namespace std;
    int main (){
            srand(time(0));
            bool done;
            do{
                    int j, i=rand()%100;
                    while (true){
                            cout<<"Какое число вы загадали?";
                            cin>>j;
                            if(i>j){
                                    cout<<"Мое число больше"<<endl;
                            }
                            else{
                                    if(i<j){
                                            cout<<"Мое число меньше"<<endl;
                                    }
                                    else{
                                            cout<<"Ты угадал"<<endl;
                                            break;
                                    }
                            }
                    }
                    cout<<"Продолжить? (y/n) ";
                    char c;
                    done=(c!='y');
                    cin>>c;
            }while(!done);
    }
    Task:
    Теперь наоборот комп пытаеmся угадать у нас число
    Decision:
    #include<iostream>
    #include<cmath>
    using namespace std;
    float f(float x){
            cout<<(int)x<<endl;
            while (true){
                    cout<<"Правильно? (+/-/=) ";
                    char c;
                    cin>>c;
                    switch (c){
                            case '+': return +1;
                            case '-': return -1;
                            case '=': return 0;
                    }
                    cout<<"Вы ввели не правильный символ, повторите"<<endl;
            }
    }
    float n(float x1, float x2){
            float x=(x1+x2)/2;
            float y=f(x);
            while(abs(y)>0.001){
                    if(y>0){
                            x1=x;
                    }else{
                            x2=x;
                    }
                    x=(x1+x2)/2;
                    y=f(x);
            }
            return x;
    }
    int main(){
            cout<<"Вы загадали "<< (int)n(0,100);
    }
    Task:
    Puzzle 15
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/15Puzzle/
    Task:
    Тетрис
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris
    Decision:
    $ g++ painter.cpp tetris.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    Draw a red square in the window
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris1
    Decision:
    $ g++ painter.cpp tetris.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    Draw figures for tetris
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris2
    Decision:
    $ g++ painter.cpp tetris.cpp tetromino.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    Let's draw a figure now, so that you can turn it over
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris3
    Decision:
    $ g++ painter.cpp tetris.cpp tetromino.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    We will also check other figures
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris4
    Decision:
    $ g++ painter.cpp tetris.cpp tetromino.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    Change the color of the shapes
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris5
    Decision:
    $ g++ painter.cpp tetris.cpp tetromino.cpp well.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    Let's create a movement for the figure
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris6
    Decision:
    $ g++ painter.cpp tetris.cpp tetromino.cpp well.cpp game.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    Final stage
    Decision:
    $ g++ painter.cpp tetris.cpp tetromino.cpp well.cpp game.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris7
    Task:
    chess rook
    The chess rook moves horizontally or vertically. Given two different cells of the chessboard, determine whether the rook can get from the first cell to the second one in one move. The program receives four numbers from 1 to 8 each, specifying the column number and row number first for the first cell, then for the second cell. The program should output YES if it is possible to get into the second cell from the first cell by the move of the rook, or NO otherwise.
    Task:
    Chess King
    The chess king moves horizontally, vertically and diagonally, but only by 1 square. Given two different squares of the chessboard, determine whether the king can get from the first square to the second one in one move. The program receives four numbers from 1 to 8 each, specifying the column number and row number first for the first cell, then for the second cell. The program should output YES if it is possible to get to the second square from the first square by the king's move, or NO otherwise.
    Task:
    Chess bishop
    Chess bishop moves diagonally. Given two different cells of the chessboard, determine whether the bishop can get from the first cell to the second one in one move. The program receives four numbers from 1 to 8 each, specifying the column number and row number first for the first cell, then for the second cell. The program should output YES if it is possible to get into the second cell from the first cell by the bishop's move, or NO otherwise.
    Task:
    Chess queen
    The chess queen moves diagonally, horizontally or vertically. Given two different cells of the chessboard, determine whether the queen can get from the first cell to the second one in one move. The program receives four numbers from 1 to 8 each, specifying the column number and row number first for the first cell, then for the second cell. The program should output YES if it is possible to get into the second cell from the first cell by the queen's move, or NO otherwise.
    Task:
    Chess knight
    The chess knight moves the letter "G" two squares vertically in any direction and one square horizontally, or vice versa. Given two different squares of the chessboard, determine whether the knight can get from the first square to the second one in one move. The program receives four numbers from 1 to 8 each, specifying the column number and row number first for the first cell, then for the second cell. The program should output YES if it is possible to get to the second square from the first square by the knight's move, or NO otherwise.
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Chess/
    Task:
    Шашки
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Checkers/
    Task:
    Крестики-нолики
    Decision:
    #include <iostream>
    using namespace std;
    int main() {
        char xo[3][3] = {
            {'.', '.','.'},
            {'.', '.','.'},
            {'.', '.','.'}
        };
        while(true) {
            int x, y;
            cin >> x >> y;
            xo[x][y] = 'x';
            for(int i=0;i<3; i++) {
                for(int j=0;j<3; j++) {
                    cout << xo[i][j] << " ";
                }
                cout << endl;
            }
        }
        return 0;
    }
    Decision:
    #include<iostream>
    using namespace std;
    //char d[9]={ '-', '-', '-', '-', '-', '-', '-', '-', '-'};
    char d[9]={};
    void clear(){
        for(int i=0; i<50; i++){
            cout<<endl;
        }
    }
    void clear_doska(){
        for(int i=0; i<9; i++){
            d[i]='-';
        }
    }
    void doska_player(){
        cout<<"ход игроков"<<endl;
        cout<<"-"<<d[6]<<"-|-"<<d[7]<<"-|-"<<d[8]<<"-"<<endl;
        cout<<"-"<<d[3]<<"-|-"<<d[4]<<"-|-"<<d[5]<<"-"<<endl;
        cout<<"-"<<d[0]<<"-|-"<<d[1]<<"-|-"<<d[2]<<"-"<<endl;
    }
    int doska(){
        cout<<"подсказка хода"<<endl;
        cout<<"-7-|-8-|-9-"<<endl;
        cout<<"-4-|-5-|-6-"<<endl;
        cout<<"-1-|-2-|-3-"<<endl;
        doska_player("");
        //cout<<"ход игроков"<<endl;
        //cout<<"-"<<d[6]<<"-|-"<<d[7]<<"-|-"<<d[8]<<"-"<<endl;
        //cout<<"-"<<d[3]<<"-|-"<<d[4]<<"-|-"<<d[5]<<"-"<<endl;
        //cout<<"-"<<d[0]<<"-|-"<<d[1]<<"-|-"<<d[2]<<"-"<<endl;
        int hod;
        cout<<"ваш ход: ";
        cin>>hod;
        while(hod>9 || hod<1 || d[hod-1]!='-'){
            cout<<"введите правильный ход: ";
            cin>>hod;
        }
        return hod;
    }
    int main(){
        clear_doska();
        int turn=0;
        for(int i=0; i<9; i++){
            clear();
            int hod=doska();
            cout<<"Вы ввели: "<<hod<<endl;
            if(i%2==0){
                d[hod-1]='x';
            }else{
                d[hod-1]='o';
            }
            turn++;
        }
        doska_player();
        return 0;
    }
    Decision:
    #include<iostream>
    #include<string>
    using namespace std;
    char d[9]={};
    void clear(){
        for(int i=0; i<50; i++){
            cout<<endl;
        }
    }
    void clear_doska(){
        for(int i=0; i<9; i++){
            d[i]='-';
        }
    }
    void doska_player(string indent){
        cout<<indent<<"-"<<d[6]<<"-|-"<<d[7]<<"-|-"<<d[8]<<"-"<<endl;
        cout<<indent<<"-"<<d[3]<<"-|-"<<d[4]<<"-|-"<<d[5]<<"-"<<endl;
        cout<<indent<<"-"<<d[0]<<"-|-"<<d[1]<<"-|-"<<d[2]<<"-"<<endl;
    }
    int doska(){
        cout<<"подсказка хода"<<endl;
        cout<<"-7-|-8-|-9-"<<endl;
        cout<<"-4-|-5-|-6-"<<endl;
        cout<<"-1-|-2-|-3-"<<endl;
        doska_player("");
        int hod;    
        cout<<"ваш ход: ";
        cin>>hod;
        while(hod>9 || hod<1 || d[hod-1]!='-'){
            cout<<"введите правильный ход: ";
            cin>>hod;
        }
        return hod;
    }
    bool finish_win(char player){
        int win[][3]={{0,1,2},{3,4,5},{6,7,8},{0,3,6},{1,4,7},{2,5,8},{6,4,2},{0,4,8}};
        for(int i=0; i<8; i++){
            int count=0;
            for(int j=0; j<3; j++){
                if(d[win[i][j]]==player){
                    count++;
                }
            }
            if(count==3){
                return true;
            }
        }
        return false;
    }
    char play_and_get_winner(){
        int turn=1;
        while(!finish_win('x') && !finish_win('o')){
            clear();
            int hod=doska();
            cout<<"Вы ввели: "<<hod<<endl;
            if(turn%2==1){
                d[hod-1]='x';
                if(finish_win('x')){
                    cout<<"player X: поздравляю, вы выйграли"<<endl;
                    return 'x';
                }
            }else{
                d[hod-1]='o';
                if(finish_win('o')){
                    cout<<"player O: поздравляю, вы выйграли"<<endl;
                    return 'o';
                }
            }
            turn++;
            if(turn==10){
                cout<<"Ничья"<<endl;
            }
        }
        return 'D';
    }
    int main(){
        cout<<"Welcome"<<endl;
        string reply="y";
        int x_wins=0, o_wins=0, ties=0;
        while(reply=="y"){
            clear_doska();
            char winner=play_and_get_winner();
            doska_player("\t");
            switch(winner){
                case 'x':
                    x_wins++;
                    break;
                case 'o':
                    o_wins++;
                    break;
                case 'D':
                    ties++;
                    break;
            }
            cout<<" Статистика Игрока Х: " <<x_wins<<", Игрока О: "<<o_wins<<" И нeчьи "<<ties<<endl;
            cout<<"Хотите продолжить?(y/n) ";
            cin>>reply;
            while(reply!="y" && reply!="n"){
                cout<<"Пожалуйста, введите правильный ответ(y/n) ";
                cin>>reply;
            }
        }
        return 0;
    }
    Task:
    Сапер
    Мальчику Васе очень нравится знаменитая игра "Сапер" ("Minesweeper").
    Один человек играет в "Сапера". Игра ведется на клетчатом поле (далее мы будем называть это картой) N×M (N строк, M столбцов). В K ячейках поля находятся мины, в остальных ячейках либо записывается число от 1 до 8 — количество мин в соседних ячейках, либо ничего не записывается, если в соседних ячейках нет мин. Ячейки являются смежными, если у них есть хотя бы одна общая точка, в одной ячейке не может быть более одной мины. Изначально все ячейки поля закрыты. Игрок может открыть ячейку за один ход. Если в открытой им ячейке есть мина, он проигрывает, в противном случае игроку показывается число, которое стоит в этой ячейке, и игра продолжается. Цель игры состоит в том, чтобы открыть все ячейки, в которых нет мин.
    У Васи есть эта игра на компьютере, но ему кажется, что все карточки, которые в ней есть, некрасивые и неинтересные. Поэтому он решил нарисовать свой собственный. Однако у него богатое воображение, а времени мало, и он хочет успеть нарисовать как можно больше карточек. Поэтому он просто выбирает N, M и K и расставляет мины на поле, после чего все остальные ячейки могут быть однозначно идентифицированы. Однако он не хочет тратить свое драгоценное время на определение оставшихся ячеек. Помогите ему!
    Decision:
    #include<iostream>
    #include<fstream>
    #include<ctime>
    #include<cstdlib>
    using namespace std;
    ifstream in("input.txt");
    ofstream out("output.txt");
    int main()
    {

        char massive[10][10]={
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'}
                };
        time_t now = time(NULL);
        srand(now);
        int x, y;
        for (int i=0; i<10; ){
            x = rand()%10;
            y = rand()%10;
            if (massive[x][y]=='*'){
                continue;
            }
            else {
                massive[x][y] ='*';
            }
           i++;
        }
        for (int i=0; i<10; i++){
            for (int j=0;j<10;j++)
            cout << massive[i][j] << " ";
            cout << endl;
        }

        return 0;
    }

C++, Работа с датами
    Task:
    Доработаем класс CppStudio так, чтобы в нём можно было хранить дату в формате дд.мм.гг. Для изменения и просмотра даты реализуем соответственно set и get функции.
    Decision:
    #include <iostream>
    using namespace std;
    class CppStudio // имя класса
    {
    private: // спецификатор доступа private
        int day, // день
            month, // месяц
            year; // год
    public: // спецификатор доступа public
        void message() // функция (метод класса) выводящая сообщение на экран
        {
            cout << "\nwebsite: cppstudio.comntheme: Classes and Objects in C + +\n";
        }
        void setDate(int date_day, int date_month, int date_year) // установка даты в формате дд.мм.гг
        {
            day   = date_day; // инициализация день
            month = date_month; // инициализация месяц
            year  = date_year; // инициализация год
        }
        void getDate() // отобразить текущую дату
        {
            cout << "Date: " << day << "." << month << "." << year << endl;
        }
    }; // конец объявления класса CppStudio
    int main(int argc, char* argv[])
    {
        int day, month, year;
        cout << "Введите текущий день месяц и год!\n";
        cout << "день: ";     cin >> day;
        cout << "месяц: ";    cin >> month;
        cout << "год: ";  cin >> year;
        CppStudio objCppstudio; // объявление объекта
        objCppstudio.message(); // вызов функции класса message
        objCppstudio.setDate(day, month, year); // инициализация даты
        objCppstudio.getDate(); // отобразить дату
        return 0;
    }
    Task:
    Пример с классом Counter, который представляет секундомер и хранит количество секунд
    Decision:
    #include <iostream>
    using namespace std;
    class Counter{
    public:
        Counter(int sec)
        {
            seconds = sec;
        }
        void display()
        {
            cout << seconds << " seconds" << endl;
        }
        int seconds;
    };
    Counter operator + (Counter c1, Counter c2){
        return Counter(c1.seconds + c2.seconds);
    }
    int main(){
        Counter c1(20);
        Counter c2(10);
        Counter c3 = c1 + c2;
        c3.display();   // 30 seconds
        return 0;
    }
    Decision:
    #include <iostream>
    using namespace std;
    class Counter{
    public:
        Counter(int sec){
            seconds = sec;
        }
        void display(){
            cout << seconds << " seconds" << endl;
        }
        Counter operator + (Counter c2){
            return Counter(this->seconds + c2.seconds);
        }
        int operator + (int s){
            return this->seconds + s;
        }
        int seconds;
    };
    int main(){
        Counter c1(20);
        Counter c2(10);
        Counter c3 = c1 + c2;
        c3.display();           // 30 seconds
        int seconds = c1 + 25;  // 45
        cout << seconds << endl;
        return 0;
    }

C++, Разработка программ для безопасности
    Task:
    Функция ввода пароля.
    Decision:
    #include <iostream>
    #include <string>
    using namespace std;
    void check_pass (string password){
        string valid_pass="qwerty123";
        if (password==valid_pass){
            cout<<"Доступ разрешен." << endl;
        } else {
            cout << "Неверный пароль!" << endl;
        }
    }
    int main()
    {
        setlocale(LC_CTYPE, "rus");
        string user_pass;
        cout<< "Введите пароль: ";
        getline(cin, user_pass);
        check_pass(user_pass);
        return 0;
    }
    Task:
    Шифрование ключевых фраз с помощью функции crypt    
    Decision:
    $ ./project hunter2 '$1$42'
    $1$42$7l6Y3xT5282XmZrtDOF9f0
    $ ./project hunter2 '$6$42' $6$42$OqFFAVnI3gTSYG0yI9TZWX9cpyQzwIop7HwpG1LLEsNBiMr4w6OvLX1KDa./UpwXfrFk1i...
    $ ./project hunter2 '$1$hunter2'
    $1$hunter2$YVxrxDmidq7Xf8Gdt6qM2.
    $ gcc C-EncryptionOfKeyPhrasesUsingCrypt.c -o project -lcrypt
    $ ./project
    $ cat C-EncryptionOfKeyPhrasesUsingCrypt.c
    #include <stdio.h>
    #define __USE_XOPEN
    #include <unistd.h>
    int main(int argc, char** argv)
    {
     if(argc==3)
       {
           printf("%s\n", crypt(argv[1],argv[2]));
       }
       else
       {
           printf("Использование: MyCrypt $пароль $salt\n" );
       }
      return 0;
    }

С++, Interview
    Task:
    Преобразовать следующую программу:
    #include<stdio.h>
    #include<conio.h>
    void main()
    {
     int j; char k; double a;
     j=21; k=’m’; a=3.1415926;
     printf("PRINT INTEGER j =%d\n",j);
     printf("PRINT SYMBOL k=%c\n" ,k);
     printf("PRINT LONG FLOAT a=%lf \n",a);
     printf("PRINT STRING");
     getch();
    }
    так, чтобы в первой строке было напечатано:
    Value of symbol k = R, Value of integer j = -14,
     во второй строке:
    Value of float variable а is 1.652730E+02
    в экспоненциальной форме (по формату %е), а в третьей строке текст:
     END of PROGRAMM.
    Decision:
    #include<stdio.h>
    #include<curses.h>
    void main()
    {
      int j; char k; double a;
      j=21; k='R'; a=1.652730E+02;
      printf("Value of symbol k=%c\n",k);
      printf("Value of float variable a is %e\n",a);
      printf("End of programm\n");
      getch();
    } 
    Task:
    Напишите программу, которая отсортирует числа формата double хранящихся в текстовом файле размером 1Гб (одно число в одной строке).
    Пример
    1. 8.33891e+307
    2. 1.26192e+308
    3.
    4. 8.19572e+307    
    5. ...
    6. 0
    7. 1.64584e+304
    Программа должна использовать не более 100Мб оперативной памяти, и работать не дольше 25-30 минут (на 2Гц современном одноядерном процессоре).
    Обязательные параметры: <имя файла не отсортированного> <имя файла отсортированного> 
    Также должен быть написан генератор не отсортированного 1Гб файла с числами формата double
    Task:
    Написать собственную реализацию shared_mutex поддерживающий рекурсию. Не используя C14. 
    Использовать платформонезависимый код – средства stl и boost (но не использовать  shared_mutex).
    Task:
    Написать алгоритм поиска текста по маске с wildcards (можно просто функцию куда передается два параметра - строка поиска и строка с маской). Wildcards содержит символы * и ?
    Task:
    Представим что есть интерфейс к БД: 
    struct i_db
    {
        bool begin_transaction();
        bool commit_transaction();
        bool abort_transaction();
        std::string get(const std::string& key);
        std::string set(const std::string& key, const std::string& data);
        std::string delete(const std::string& key);
    }
    Написать реализацию кеша для БД, обратить внимание на многопоточность и на транзакционную модель работы с БД. 

Django, Разработка сайта
	Task:
	Для улучшения своего сайта, в котором публиковал все решенные мной интересные задачи, разработал еще один проект с разработкой сайта, в котором применялись следующие инструменты и библиотеки: python, django, pillow, html, css, sqlite3. Также поменял домен в timeweb.
	Decision:
	$ mkdir djsite
	$ cd djsite/
	$ python3 -m venv venv
	$ source venv/bin/activate
	$ pip install django
	$ django-admin startproject coolsite
	$ cd coolsite/
	$ python manage.py runserver
	$ python manage.py runserver 4000
	$ python manage.py startapp women
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	INSTALLED_APPS = [
	    'django.contrib.admin',
	    'django.contrib.auth',
	    'django.contrib.contenttypes',
	    'django.contrib.sessions',
	    'django.contrib.messages',
	    'django.contrib.staticfiles',
	    'women.apps.WomenConfig'
	]
	...
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse
	from django.shortcuts import render
	# Create your views here.
	def index(request): #HttpRequest
		return HttpResponse("Страница приложения Women")
	def categories(request): #HttpRequest
		return HttpResponse("<h1>Статьи по категориям</h1>")
	$ vim coolsite/urls.py
	$ cat coolsite/urls.py
	...
	from django.contrib import admin
	from django.urls import path, include
	#from women.views import index
	from women.views import *
	urlpatterns = [
	    path('admin/', admin.site.urls),
	    #path('women/', index), #http://127.0.0.1:8000/women/
	    #path('', index), #http://127.0.0.1:8000/
	    #path('cats/', categories), #http://127.0.0.1:8000/cats/
	    path('women/', include('women.urls')), #http://127.0.0.1:8000/women/
	]
	$ touch women/urls.py
	$ vim women/urls.py
	$ cat women/urls.py
	from django.urls import path
	from .views import *
	urlpatterns = [
		path('', index), #http://127.0.0.1:8000/women/
		path('cats/', categories), #http://127.0.0.1:8000/women/cats/
	]
	$ python manage.py runserver
	$ vim coolsite/urls.py
	$ cat coolsite/urls.py
	...
	urlpatterns = [
	    path('admin/', admin.site.urls),
	    #path('women/', index), #http://127.0.0.1:8000/women/
	    #path('', index), #http://127.0.0.1:8000/
	    #path('cats/', categories), #http://127.0.0.1:8000/cats/
	    #path('women/', include('women.urls')), #http://127.0.0.1:8000/women/
	    path('', include('women.urls')), #http://127.0.0.1:8000/women/
	]
	handler404 = pageNotFound
	$ vim women/urls.py
	$ cat women/urls.py
	from django.urls import path, re_path
	from .views import *
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		path('', index, name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
	]
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect
	# Create your views here.
	def index(request): #HttpRequest
		return HttpResponse("Страница приложения Women")
	#def categories(request):
		#return HttpResponse("<h1>Статьи по категориям</h1>")
	def categories(request, catid):
		#print(request.GET) #http://127.0.0.1:8000/cats/1/?name=Gagarina&type=pop
		#if(request.GET):
			#print(request.GET) #http://127.0.0.1:8000/cats/1
		if(request.POST):
			print(request.POST) 
		return HttpResponse(f"<h1>Статьи по категориям</h1><p>{catid}</p>")
	def archive(request, year):
		if int(year)>2020:
			#raise Http404() #http://127.0.0.1:8000/archive/2022/
			#return redirect('/', )
			return redirect('home', permanent=True)
		return HttpResponse(f"<h1>Архив по годам</h1><p>{year}</p>") #http://127.0.0.1:8000/archive/2020/
	def pageNotFound(request, exception):
		return HttpResponseNotFound("<h1>Страница не найдена</h1>")
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	#DEBUG = True
	DEBUG = False
	#ALLOWED_HOSTS = []
	ALLOWED_HOSTS = ['127.0.0.1']
	...
	$ python manage.py runserver
	$ vim women/models.py
	$ cat women/models.py
	from django.db import models
	# Create your models here.
	class Women(models.Model):
		"""docstring for Women"""
		title=models.CharField(max_length=255)
		content=models.TextField(blank=True)
		photo=models.ImageField(upload_to="photos/%Y/%m/%d/")
		time_create=models.DateTimeField(auto_now_add=True)
		time_update=models.DateTimeField(auto_now=True)
		is_published=models.BooleanField(default=True)
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	import os
	from pathlib import Path
	...
	DEBUG = True
	#DEBUG = False
	#ALLOWED_HOSTS = []
	...
	DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
	MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
	MEDIA_URL = '/media/'
	$ vim coolsite/urls.py
	$ cat coolsite/urls.py
	from django.conf.urls.static import static
	from django.contrib import admin
	from coolsite import settings
	from django.urls import path, include
	#from women.views import index
	from women.views import *
	...
	if settings.DEBUG:
	    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
	handler404 = pageNotFound
	$ python manage.py makemigrations
	$ python manage.py sqlmigrate women 0001
	$ python manage.py migrate
	$ sqlite3 db.sqlite3
	sqlite> SELECT * FROM sqlite_master where type='table';
	$ python manage.py shell
	>>> from women.models import Women
	>>> Women(title='Anjeline Joli', content='Биография Anjeline Joli')
	>>> w1=_
	>>> w1
	>>> w1.save()
	>>> w1
	>>> w1.id
	>>> w1.title
	>>> w1.time_create
	>>> w1.pk
	>>> from django.db import connection
	>>> connection.queries
	>>> w2.save()
	>>> connection.queries
	>>> w3=Women()
	>>> w3.title='Juli Roberts'
	>>> w3.content='Биография Juli Roberts'
	>>> w3.save()
	>>> connection.queries
	>>> # objects
	>>> Women.objects
	>>> w4=Women.objects.create(title='Uma Turman', content='Биография Uma Turman')
	>>> w4
	>>> Women.objects.create(title='Kira Nightly', content='Биография Kira Nightly')
	>>> Women.objects.all()
	>>> exit()
	$ vim women/models.py
	$ cat women/models.py
	...
		def __str__(self):
			return self.title
	$ python manage.py shell
	>>> from women.models import Women
	>>> Women.objects.all()
	>>> w=_
	>>> w[0]
	>>> w[1]
	>>> w[0].title
	>>> len(w)
	>>> for wi in w:
	...     print(wi.title)
	>>> Women.objects.filter(title='Enn Hatay')
	>>> from django.db import connection
	>>> connection.queries
	>>> Women.objects.filter(pk=2)
	>>> Women.objects.filter(pk__gte=2)
	>>> Women.objects.exclude(pk=2)
	>>> Women.objects.get(pk=2)
	>>> Women.objects.filter(pk__lte=4).order_by('title')
	>>> Women.objects.order_by('title')
	>>> Women.objects.order_by('time_update')
	>>> Women.objects.order_by('-time_update')
	>>> wu=Women.objects.get(pk=2)
	>>> wu.title='Margo Robbi'
	>>> wu.content='Биография Margo Robbi'
	>>> wu.save()
	>>> connection.queries
	>>> wd=Women.objects.filter(pk__gte=4)
	>>> wd
	>>> wd.delete()
	>>> exit()
	$ mkdir women/templates
	$ mkdir women/templates/women
	$ touch women/templates/women/index.html
	$ vim women/templates/women/index.html
	$ cat women/templates/women/index.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	<!--<p>Содержимое главной страницы</p>-->
	<ul>
		{% for p in posts %}
		<li>
			<h2>{{p.title}}</h2>
			<p>{{p.content}}</p>
			<hr>
		</li>
		{% endfor %}
	</ul>
	{% endblock %}
	$ touch women/templates/women/about.html
	$ vim women/templates/women/about.html
	$ cat women/templates/women/about.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	<p>Содержимое главной страницы</p>
	{% endblock %}
	$ touch women/templates/women/base.html
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	<!DOCTYPE html>
	<html lang="en"><head><meta charset="utf-8">
		<title>{{ title }}</title>
	</head><body>
	{% block mainmenu %}
	<ul>
		{% for m in menu %}
		<li>{{m}}</li>
		{% endfor %}
	</ul>
	{% endblock mainmenu %}
	{% block content %}
	{% endblock %}
	</ul>
	</body></html>
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect
	from .models import *
	# Create your views here.
	#def index(request): #HttpRequest
	#	return HttpResponse("Страница приложения Women")
	menu=["О сайте", "Добавить статью", "Обратная связь", "Войти"]
	def index(request):
		#return render(request, 'women/index.html', {'title':'Главная страница'})
		posts=Women.objects.all()
		return render(request, 'women/index.html', {'posts':posts, 'menu':menu, 'title':'Главная страница'})
	def about(request):
		return render(request, 'women/about.html', {'menu':menu, 'title':'О сайте'})
	...
	$ vim women/urls.py
	$ cat women/urls.py
	...
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		path('', index, name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		#path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		#re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
		path('about/', about, name='about'), #http://127.0.0.1:8000/
	]
	$ python manage.py runserver	
	$ mkdir women/static
	$ mkdir women/static/women
	$ mkdir women/static/women/css
	$ touch women/static/women/css/style.css
	html, body {
		font-family: 'Arial';
		margin: 0;
		padding: 0;
		height: 100%;
		width: 100%;
		color: #444;
	}
	a {
		color: #0059b2;
		text-decoration: none;
	}
	a:hover {
		color: #CC0000;
		text-decoration: underline;
	}
	img {max-width: 600px; height: auto;}
	img.img-article-left {
		max-width: 300px;
		height: auto;
		float: left;
		padding: 0 10px 10px 0;
	}
	img.img-article-left.thumb {
		max-width: 150px;
		height: auto;
	}
	p.link-read-post {
		text-align: right;
	}
	p.link-read-post a {
		padding: 10px;
		min-width: 100px;
		background: #333671;
		color: #fff;
		text-decoration: none;
	}
	div.article-panel {
	    background: #eee;
	    padding: 5px 10px 5px 10px;
	    box-sizing: border-box;
	    overflow: hidden;
	    color: #555;
	}
	div.article-panel p.first {
	    margin: 0;
	    float: left;
	}
	div.article-panel p.last {
	    margin: 0;
	    float: right;
	}
	ul.list-articles {
		list-style: none;
		margin: 0;
		padding: 0;
	}
	ul.list-articles li {
		border-bottom: 1px solid #ccc;
	}
	.table-page {
		width: 100%;
		height: 100%;
		vertical-align: top;
	}
	.table-page tr {height: 100%;}
	.clear {clear: both;}
	.header {
		background: #3F4137;
		height: 60px;
	}
	.logo {
		background: url('../images/logo.png') no-repeat 10px 5px;
		width: 70px;
		height: 60px;
	}
	ul.mainmenu {
		list-style: none;
		margin: 0;
		padding: 0;
		height: 60px;
		color: #fdc073;
		font-size: 20px;
		overflow: hidden;
	}
	ul.mainmenu li {
		float: left;
		margin: 18px 40px 0 30px;
	}
	ul.mainmenu li.logo {margin: 0;}
	ul.mainmenu li.last {float: right;}
	ul.mainmenu li a {
		color: #fdc073;
		text-decoration: none;
	}
	ul.mainmenu li a:hover {
		color: #FDA83D;
	}
	.panelitems {
		text-align: center;
	}
	ul.langitem {
		list-style: none;
		display: inline-block;
		margin: 30px;
		padding: 0;
		max-width: 300px
	}
	ul.langitem li {
		margin: 10px 0 0 0;
		width: 100%;
	}
	ul.langitem li.image {
		margin: 0;
		text-align: center;
		width: 100%;
		height: 250px;
		overflow: hidden;
	}
	ul.langitem li.descr {
		color: #777;
		height: 170px;
		overflow: hidden;
	}
	ul.langitem li a {
		color: #fdc073;
		text-decoration: none;
		font-size: 20px;
	}
	ul.langitem li a:hover {
		color: #FDA83D;
	}
	div.button {
		background: #3F4137;
		max-width: 200px;
		margin: 0 auto;
		padding: 5px 20px 5px 20px;
		border-radius: 10px;
		font-size: 20px;
	}
	.table-content {
		width: 100%;
		min-height: 100%;
		height: 100%;
	}
	.left-chapters {
		margin: 0;
		background: #eee;
		border-right: 1px solid #ccc;
		min-height: 100%;
	}
	.left-chapters ul {
		width: 230px;
		min-height: 100%;
		margin: 0;
		padding: 20px 10px 10px 20px;
		list-style: none;
		font-size: 20px;
	}
	.left-chapters ul li {
		margin: 30px 0 0 0;
		color: #999;
	}
	.left-chapters ul li.selected {color: #0059b2; }
	.left-chapters ul li a {
		color: #444;
		text-decoration: none;
	}
	.left-chapters ul li a:hover { color: #CC0000; }
	.left-chapters ul li.share {margin: 60px 0 0 0;}
	.left-chapters ul li.share p {margin: 30px 0 30px 0;}
	.left-chapters ul li.share a {
		display: inline-block;
		width: 40px;
		height: 40px;
		margin: 0 20px 0 0;
	}
	.left-chapters ul li.share a.share-yt {
		width: 100%;
		height: 30px;
		background: url('../images/share_yt.png') no-repeat 0 0
	}
	.left-chapters ul li.share a.share-yt:hover {
		width: 100%;
		height: 30px;
		background: url('../images/share_yt.png') no-repeat 0 -30px
	}
	.content {
		padding: 40px 20px 20px 40px;
		width: 100%;
		box-sizing: border-box;
	}
	ul.breadcrumbs {
		margin: 0;
		padding: 0;
		list-style: none;
		font-size: 20px;
		font-family: Sans-serif, Arial, Tahoma;
	}
	ul.breadcrumbs li {
		display: inline-block;
	}
	ul.breadcrumbs li a {
		color: #0059b2;
		text-decoration: none;
	}
	ul.breadcrumbs li a:hover { color: #CC0000; }
	ul.breadcrumbs li:after{
		padding: 0 10px 0 10px;
		content: "\2192";
	}
	ul.breadcrumbs li.last:after {content: "";}
	ul.control {
		margin: 0;
		padding: 60px 0 0 0;
		list-style: none;
		font-family: Sans-serif, Arial, Tahoma;
		font-size: 18px;
		width: 100%;
	}
	ul.control li {	float: left; padding: 0 0 0 10px;}
	ul.control li.first:before {content: "\2190"; padding: 0 10px 0 0;}
	ul.control li.last {float: right; padding: 0 40px 0 0;}
	ul.control li.last:after {content: "\2192"; padding: 0 0 0 10px;}
	ul.control li a { color: #0059b2; text-decoration: none; }
	ul.control li a:hover { color: #CC0000; }
	ul.content-table {
		margin: 0;
		padding: 60px 0 0 30px;
		list-style: none;
		font-family: Sans-serif, Arial, Tahoma;
		font-size: 28px;
	}
	ul.content-table li {
		margin: 0 0 40px 0;
	}
	ul.content-table li a {
		color: #BB5715;
		text-decoration: none;
	}
	ul.content-table li a:hover {color: #F0711C;}
	.content-text {
		margin: 60px 0 0 30px;
		color: #000;
		font-size: 20px;
		font-family: Yandex Sans Display Light;
	}
	.content-text h1 {font-size: 32px;}
	ul.lang-list {
		list-style: none;
		margin: 0;
		padding: 14px 0 0 0;
		background: #3F4137;
		width: 100%;
		height: 50px;
		border-top: 1px solid #959A82;
		box-sizing: border-box;
		font-size: 18px;
		font-family: Sans-serif, Arial, Tahoma;
	}
	ul.lang-list li {
		display: inline-block;
		margin-left: 40px;
	}
	ul.lang-list li.selected {color: #fdc073; border-bottom: 1px solid #fdc073;}
	ul.lang-list li a {
		color: #eee;
		text-decoration: none;
	}
	ul.lang-list li a:hover {color: #fdc073;}
	.topic-subject .topic-line {
		border-bottom: 1px solid #CC0000;
		margin-top: -16px;
	}
	.topic-subject .topic-text {
		display: inline-block;
		font-size: 28px;
		color: #777;
		padding: 0 10px 0 10px;
		margin-left: 30px;
		background: #fff;
		font-family: Sans-serif, Arial, Tahoma;
	}
	.list-topic {
		margin: 40px 0 60px 0;
		font-family: Sans-serif, Arial, Tahoma;
	}
	.list-topic p {
		margin: 0;
		font-size: 28px;
	}
	.list-topic ol {
		columns: 2;
		-webkit-columns: 2;
		column-gap: 40px;
	}
	.list-topic ol li {
		display: list-item;
		margin: 10px 10px 0 0px;
		padding: 0 0 0 10px;
	}
	.list-topic ol li a {
		color: #0059b2;
		text-decoration: none;
	}
	.list-topic ol li a:hover {color: #CC0000;}
	.highlight {
		max-width: 350px;
		padding: 0 10px 0 10px;
		margin: 0;
		overflow: auto;
		overflow-y: hidden;
		background: #f0f0f0;
	}
	.highlight p { margin: 0; }
	.highlight .block {
		width: 100%;
		margin: 0;
	}
	.highlight .block p { margin: 0; }
	.quote {
		background: url('../images/blockquote.png') no-repeat 0 10px;
		padding: 5px 5px 5px 70px;
		font-family: Sans-serif, Arial, Tahoma;
		font-style: italic;
	}
	#footer {
		box-sizing: border-box;
		background: #3F4137;
		padding: 5px;
		color: #aaa;
		font-size: 14px;
		font-family: Verdana, Geneva, Arial, Helvetica;
		text-align: left;
		overflow: hidden;
	}
	#footer a {
		text-decoration: underline;
		color: #aaa;
	}
	.form-input {
	    width: 300px;
	    font-size: 16px;
	}
	.form-label {
	    display: inline-block;
	    min-width: 150px;
	    vertical-align: top;
	}
	.form-error ul {
	    list-style: none;
	    padding: 0;
	    color: #CC0000;
	}
	.form-button {
	    min-width: 200px;
	    font-size: 16px;
	}
	$ mkdir women/static/women/js
	$ mkdir women/static/women/images
	$ ls women/static/women/images
	blockquote.png  btn_yt.png  logo.png  main.ico  share_yt.png  smallmenu.png
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	# Static files (CSS, JavaScript, Images)
	# https://docs.djangoproject.com/en/4.2/howto/static-files/
	STATIC_URL = '/static/'
	STATIC_ROOT = os.path.join(BASE_DIR, 'static')
	STATICFILES_DIRS=[]
	# Default primary key field type
	...
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	{% load static %}
	<!DOCTYPE html>
	<html>
	<head>
		<title>{{title}}</title>
		<link type="text/css" href="{% static 'women/css/style.css' %}" rel="stylesheet" />
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<link rel="shortcut icon" href="{% static 'women/images/main.ico' %}" type="image/x-icon"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
	</head>
	<body>
	<table class="table-page" border=0 cellpadding="0" cellspacing="0">
	<tr><td valign=top>
	{% block mainmenu %}
			<div class="header">
				<ul id="mainmenu" class="mainmenu">
				<li class="logo"><a href="#"><div class="logo"></div></a></li>
	{% for m in menu %}
		{% if not forloop.last %}
				<li><a href="#">{{m.title}}</a></li>
		{% else %}
				<li class="last"><a href="#">{{m.title}}</a></li>
		{% endif %}
	{% endfor %}
				</ul>
				<div class="clear"></div>
			</div>
	{% endblock mainmenu %}
	<table class="table-content" border=0 cellpadding="0" cellspacing="0">
	<tr>
	<!-- Sidebar слева -->
		<td valign="top" class="left-chapters">
		<ul id="leftchapters">
			<li class="selected">Все категории</li>
			<li><a href="#">Актрисы</a></li>
			<li><a href="#">Певицы</a></li>
			<li><a href="#">Спортсменки</a></li>
			<li class="share">
			<p>Наш канал</p>
			<a class="share-yt" href="https://www.youtube.com/channel/UClJzWfGWuGJL2t-3dYKcHTA/playlists" target="_blank" rel="nofollow"></a>
			</li>
		</ul>
	</td>
	<!-- Конец Sidebar'а -->
	<td valign="top" class="content">
		<!-- Хлебные крошки -->
		{% block breadcrumbs %}
		{% endblock %}
	<!-- Блок контента -->
		<div class="content-text">
	{% block content %}
	{% endblock %}
		</div>
	<!-- Конец блока контента -->
	</td></tr></table>
	</td></tr>
	<!-- Footer -->
	<tr><td valign=top>
		<div id="footer">
			<p>&copy; 2021 Частичное или полное копирование информации с данного сайта для распространения на других ресурсах, в том числе и бумажных, строго запрещено.</p>
		</div>
	</td></tr></table>
	<!-- Конец footer'а и страницы -->
	</body>
	</html>
	$ vim women/templates/women/index.html
	$ cat women/templates/women/index.html
	{% extends 'women/base.html' %}
	{% block content %}
	<ul class="list-articles">
		{% for p in posts %}
				<li><h2>{{p.title}}</h2>
		{% autoescape on %}
		{{p.content|linebreaks|truncatewords:50}}
		{% endautoescape %}
				<div class="clear"></div>
				<p class="link-read-post"><a href="#">Читать пост</a></p>
				</li>
		{% endfor %}
	</ul>
	{% endblock %}
	$ python manage.py runserver
	$ vim women/templates/women/index.html
	$ cat women/templates/women/index.html
	...
		{% for p in posts %}
				<li><h2>{{p.title}}</h2>
		{% autoescape on %}
		{{p.content|linebreaks|truncatewords:50}}
		{% endautoescape %}
				<div class="clear"></div>
				<p class="link-read-post">
					<!--<a href="#">-->
					<!--<a href="{% url 'post' p.pk %}">-->
					<a href="{{ p.get_absolute_url }}">
						Читать пост
					</a>
				</p>
				</li>
		{% endfor %}
	...
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	...
	{% block mainmenu %}
			<div class="header">
				<ul id="mainmenu" class="mainmenu">
				<li class="logo">
					<!--<a href="#">-->
					<a href="{% url 'home' %}">
						<div class="logo"></div>
					</a>
				</li>
	{% for m in menu %}
		{% if not forloop.last %}
				<li><a href="{% url m.url_name %}">{{m.title}}</a></li>
		{% else %}
				<li class="last"><a href="{% url m.url_name %}">{{m.title}}</a></li>
		{% endif %}
	{% endfor %}
				</ul>
				<div class="clear"></div>
			</div>
	{% endblock mainmenu %}
	...
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect
	from .models import *
	# Create your views here.
	#def index(request): #HttpRequest
	#	return HttpResponse("Страница приложения Women")
	#menu=["О сайте", "Добавить статью", "Обратная связь", "Войти"]
	menu=[{'title':"О сайте", 'url_name':'about'}, 
		{'title':"Добавить статью", 'url_name':'add_page'},
		{'title':"Обратная связь", 'url_name':'contact'},
		{'title':"Войти", 'url_name':'login'}]
	def index(request):
		#return render(request, 'women/index.html', {'title':'Главная страница'})
		posts=Women.objects.all()
		context={'posts':posts, 
			'menu':menu, 
			'title':'Главная страница'}
		return render(request, 'women/index.html', context=context)
	def about(request):
		return render(request, 'women/about.html', {'menu':menu, 'title':'О сайте'})
	#def categories(request):
		#return HttpResponse("<h1>Статьи по категориям</h1>")
	#def categories(request, catid):
		#print(request.GET) #http://127.0.0.1:8000/cats/1/?name=Gagarina&type=pop
		#if(request.GET):
			#print(request.GET) #http://127.0.0.1:8000/cats/1
		#if(request.POST):
			#print(request.POST) 
		#return HttpResponse(f"<h1>Статьи по категориям</h1><p>{catid}</p>")
	#def archive(request, year):
		#if int(year)>2020:
			#raise Http404() #http://127.0.0.1:8000/archive/2022/
			#return redirect('/', )
			#return redirect('home', permanent=True)
		#return HttpResponse(f"<h1>Архив по годам</h1><p>{year}</p>") #http://127.0.0.1:8000/archive/2020/
	def pageNotFound(request, exception):
		return HttpResponseNotFound("<h1>Страница не найдена</h1>")
	def addpage(request):
		return HttpResponse("Добавление статьи")
	def contact(request):
		return HttpResponse("Обратная связь")
	def login(request):
		return HttpResponse("Авторизация")
	def show_post(request, post_id):
		return HttpResponse(f"Отображение статьи с id = {post_id}")
	$ vim women/urls.py
	$ cat women/urls.py
	...
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		path('', index, name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		#path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		#re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
		path('about/', about, name='about'), #http://127.0.0.1:8000/
		path('addpage/', addpage, name='add_page'),
		path('contact/', contact, name='contact'),
		path('login/', login, name='login'),
		path('post/<int:post_id>/', show_post, name='post'),
	]
	$ vim women/models.py
	$ cat women/models.py
	from django.db import models
	from django.urls import reverse
	...
		def get_absolute_url(self):
			return reverse('post', kwargs={'post_id':self.pk})
	$ python manage.py runserver
	$ vim women/models.py
	$ cat women/models.py
	...
	class Women(models.Model):
		"""docstring for Women"""
		title=models.CharField(max_length=255)
		content=models.TextField(blank=True)
		photo=models.ImageField(upload_to="photos/%Y/%m/%d/")
		time_create=models.DateTimeField(auto_now_add=True)
		time_update=models.DateTimeField(auto_now=True)
		is_published=models.BooleanField(default=True)
		cat=models.ForeignKey('Category', on_delete=models.PROTECT, null=True)
		def __str__(self):
			return self.title
		def get_absolute_url(self):
			return reverse('post', kwargs={'post_id':self.pk})
	class Category(models.Model):
		name=models.CharField(max_length=100, db_index=True)
		def __str__(self):
			return self.name	
	$ python manage.py makemigrations
	$ python manage.py migrate
	$ sqlite3 db.sqlite3
	sqlite> SELECT * FROM sqlite_master where type='table';
	$ python manage.py shell
	>>> from women.models import *
	>>> Category.objects.create(name='Актрисы')
	>>> Category.objects.create(name='Певицы')
	>>> w_list=Women.objects.all()
	>>> w_list.update(cat_id=1)
	>>> exit()
	$ sqlite3 db.sqlite3
	sqlite> select * from women_women;
	sqlite> select * from women_category;
	$ python manage.py shell
	>>> from women.models import *
	>>> Women.title
	>>> w1=Women(title='t1',content='c1',cat_id=1)
	>>> type(w1.title)
	>>> type(Women.title)
	>>> type(w1.cat)
	>>> w1.pk
	>>> print(w1.id,w1.time_create,w1.time_update)
	>>> from django.db import connection
	>>> connection.queries
	>>> exit()
	$ python manage.py shell
	>>> from women.models import *
	>>> w1=Women(title='t1',content='c1',cat_id=1)
	>>> from django.db import connection
	>>> connection.queries
	>>> w1.cat
	>>> connection.queries
	>>> w2=Women.objects.get(pk=2)
	>>> connection.queries
	>>> w2.title
	>>> w2.cat
	>>> connection.queries
	>>> w2.cat.name
	>>> exit()
	$ vim women/models.py
	$ cat women/models.py
	from django.db import models
	from django.urls import reverse
	# Create your models here.
	class Women(models.Model):
		"""docstring for Women"""
		title=models.CharField(max_length=255)
		content=models.TextField(blank=True)
		photo=models.ImageField(upload_to="photos/%Y/%m/%d/")
		time_create=models.DateTimeField(auto_now_add=True)
		time_update=models.DateTimeField(auto_now=True)
		is_published=models.BooleanField(default=True)
		cat=models.ForeignKey('Category', on_delete=models.PROTECT, null=True)
		def __str__(self):
			return self.title
		def get_absolute_url(self):
			return reverse('post', kwargs={'post_id':self.pk})
	class Category(models.Model):
		name=models.CharField(max_length=100, db_index=True)
		def __str__(self):
			return self.name
		def get_absolute_url(self):
			return reverse('category', kwargs={'cat_id':self.pk})
	$ vim women/urls.py
	$ cat women/urls.py
	from django.urls import path, re_path
	from .views import *
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		path('', index, name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		#path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		#re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
		path('about/', about, name='about'), #http://127.0.0.1:8000/
		path('addpage/', addpage, name='add_page'),
		path('contact/', contact, name='contact'),
		path('login/', login, name='login'),
		path('post/<int:post_id>/', show_post, name='post'),
		path('category/<int:cat_id>/', show_category, name='category'),
	]
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect
	from .models import *
	# Create your views here.
	#def index(request): #HttpRequest
	#	return HttpResponse("Страница приложения Women")
	#menu=["О сайте", "Добавить статью", "Обратная связь", "Войти"]
	menu=[{'title':"О сайте", 'url_name':'about'}, 
		{'title':"Добавить статью", 'url_name':'add_page'},
		{'title':"Обратная связь", 'url_name':'contact'},
		{'title':"Войти", 'url_name':'login'}]
	def index(request):
		#return render(request, 'women/index.html', {'title':'Главная страница'})
		posts=Women.objects.all()
		cats=Category.objects.all()
		context={'posts':posts, 
			'cats':cats,
			'menu':menu, 
			'title':'Главная страница',
			'cat_selected':0}
		return render(request, 'women/index.html', context=context)
	def about(request):
		return render(request, 'women/about.html', {'menu':menu, 'title':'О сайте'})
	#def categories(request):
		#return HttpResponse("<h1>Статьи по категориям</h1>")
	#def categories(request, catid):
		#print(request.GET) #http://127.0.0.1:8000/cats/1/?name=Gagarina&type=pop
		#if(request.GET):
			#print(request.GET) #http://127.0.0.1:8000/cats/1
		#if(request.POST):
			#print(request.POST) 
		#return HttpResponse(f"<h1>Статьи по категориям</h1><p>{catid}</p>")
	#def archive(request, year):
		#if int(year)>2020:
			#raise Http404() #http://127.0.0.1:8000/archive/2022/
			#return redirect('/', )
			#return redirect('home', permanent=True)
		#return HttpResponse(f"<h1>Архив по годам</h1><p>{year}</p>") #http://127.0.0.1:8000/archive/2020/
	def pageNotFound(request, exception):
		return HttpResponseNotFound("<h1>Страница не найдена</h1>")
	def addpage(request):
		return HttpResponse("Добавление статьи")
	def contact(request):
		return HttpResponse("Обратная связь")
	def login(request):
		return HttpResponse("Авторизация")
	def show_post(request, post_id):
		return HttpResponse(f"Отображение статьи с id = {post_id}")
	#def show_category(request, cat_id):
		#return HttpResponse(f"Отображение категории с id = {cat_id}")
	def show_category(request, cat_id):
		posts=Women.objects.filter(cat_id=cat_id)
		cats=Category.objects.all()
		if len(posts)==0:
			raise Http404()
		context={'posts':posts,
			'cats':cats,
			'menu':menu,
			'title':'Главная страница',
			'cat_selected':cat_id,}
		return render(request, 'women/index.html', context=context)
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	{% load static %}
	<!DOCTYPE html>
	<html>
	<head>
		<title>{{title}}</title>
		<link type="text/css" href="{% static 'women/css/style.css' %}" rel="stylesheet" />
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<link rel="shortcut icon" href="{% static 'women/images/main.ico' %}" type="image/x-icon"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
	</head>
	<body>
	<table class="table-page" border=0 cellpadding="0" cellspacing="0">
	<tr><td valign=top>
	{% block mainmenu %}
			<div class="header">
				<ul id="mainmenu" class="mainmenu">
				<li class="logo">
					<!--<a href="#">-->
					<a href="{% url 'home' %}">
						<div class="logo"></div>
					</a>
				</li>
	{% for m in menu %}
		{% if not forloop.last %}
				<li><a href="{% url m.url_name %}">{{m.title}}</a></li>
		{% else %}
				<li class="last"><a href="{% url m.url_name %}">{{m.title}}</a></li>
		{% endif %}
	{% endfor %}
				</ul>
				<div class="clear"></div>
			</div>
	{% endblock mainmenu %}
	<table class="table-content" border=0 cellpadding="0" cellspacing="0">
	<tr>
	<!-- Sidebar слева -->
		<td valign="top" class="left-chapters">
		<ul id="leftchapters">
	{% if cat_selected == 0 %}
			<li class="selected">Все категории</li>
	{% else %}
			<li><a href="{% url 'home' %}">Все категории</a></li>
	{% endif %}
	{% for c in cats %}
		{% if c.pk == cat_selected %}
			<li class="selected">{{c.name}}</li>
		{% else %}
			<li><a href="{{ c.get_absolute_url }}">{{c.name}}</a></li>
		{% endif %}
	{% endfor %}
			<li class="share">
			<p>Наш канал</p>
			<a class="share-yt" href="https://www.youtube.com/channel/UClJzWfGWuGJL2t-3dYKcHTA/playlists" target="_blank" rel="nofollow"></a>
			</li>
		</ul>
	</td>
	<!-- Конец Sidebar'а -->
	<td valign="top" class="content">
		<!-- Хлебные крошки -->
		{% block breadcrumbs %}
		{% endblock %}
	<!-- Блок контента -->
		<div class="content-text">
	{% block content %}
	{% endblock %}
		</div>
	<!-- Конец блока контента -->
	</td></tr></table>
	</td></tr>
	<!-- Footer -->
	<tr><td valign=top>
		<div id="footer">
			<p>&copy; 2021 Частичное или полное копирование информации с данного сайта для распространения на других ресурсах, в том числе и бумажных, строго запрещено.</p>
		</div>
	</td></tr></table>
	<!-- Конец footer'а и страницы -->
	</body>
	</html>
	$ vim women/templates/women/index.html
	$ cat women/templates/women/index.html
	{% extends 'women/base.html' %}
	{% block content %}
	<ul class="list-articles">
		{% for p in posts %}
				<li>
					<div class="article_panel">
						<p class="first">Категория: {{p.cat}}</p>
						<p class="last">Дата: {{p.time_update|date:"d-m-Y H:i:s"}}</p>
					</div>
					<h2>{{p.title}}</h2>
		{% autoescape on %}
		{{p.content|linebreaks|truncatewords:50}}
		{% endautoescape %}
					<div class="clear"></div>
					<p class="link-read-post">
						<!--<a href="#">-->
						<!--<a href="{% url 'post' p.pk %}">-->
						<a href="{{ p.get_absolute_url }}">
							Читать пост
						</a>
					</p>
				</li>
		{% endfor %}
	</ul>
	{% endblock %}
	$ python manage.py runserver
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	# Internationalization
	# https://docs.djangoproject.com/en/4.2/topics/i18n/
	#LANGUAGE_CODE = 'en-us'
	LANGUAGE_CODE = 'ru'
	TIME_ZONE = 'UTC'
	USE_I18N = True
	USE_TZ = True
	...
	$ python manage.py createsuperuser
	$ vim women/admin.py
	$ cat women/admin.py
	from django.contrib import admin
	from .models import *
	# Register your models here.
	class WomenAdmin(admin.ModelAdmin):
	    list_display = ('id', 'title', 'time_create', 'photo', 'is_published')
	    list_display_links = ('id', 'title')
	    search_fields = ('title', 'content')
	class CategoryAdmin(admin.ModelAdmin):
	    list_display = ('id', 'name')
	    list_display_links = ('id', 'name')
	    search_fields = ('name',)
	admin.site.register(Women, WomenAdmin)
	admin.site.register(Category, CategoryAdmin)
	$ vim women/models.py
	$ cat women/models.py
	from django.db import models
	from django.urls import reverse
	# Create your models here.
	class Women(models.Model):
		"""docstring for Women"""
		title=models.CharField(max_length=255, verbose_name="Заголовок")
		content=models.TextField(blank=True, verbose_name="Текст статьи")
		photo=models.ImageField(upload_to="photos/%Y/%m/%d/", verbose_name="Фото")
		time_create=models.DateTimeField(auto_now_add=True, verbose_name="Время создания")
		time_update=models.DateTimeField(auto_now=True, verbose_name="Время изменения")
		is_published=models.BooleanField(default=True, verbose_name="Публикация")
		cat=models.ForeignKey('Category', on_delete=models.PROTECT, null=True, verbose_name="Категории")
		def __str__(self):
			return self.title
		def get_absolute_url(self):
			return reverse('post', kwargs={'post_id':self.pk})
		class Meta:
			verbose_name='Известные женщины'
			verbose_name_plural='Известные женщины'
			#ordering=['time_create','title']
			ordering=['-time_create','title']
	class Category(models.Model):
		name=models.CharField(max_length=100, db_index=True, verbose_name="Категория")
		def __str__(self):
			return self.name
		def get_absolute_url(self):
			return reverse('category', kwargs={'cat_id':self.pk})
		class Meta:
			verbose_name='Категория'
			verbose_name_plural='Категории'
			ordering=['id']
	$ vim women/apps.py
	$ cat women/apps.py
	from django.apps import AppConfig
	class WomenConfig(AppConfig):
	    default_auto_field = 'django.db.models.BigAutoField'
	    name = 'women'
	    verbose_name='Женщины мира'
	$ python manage.py makemigrations
	$ python manage.py migrate
	$ vim women/templates/women/index.html
	$ cat women/templates/women/index.html
	{% extends 'women/base.html' %}
	{% block content %}
	<ul class="list-articles">
		{% for p in posts %}
				<li>
					<div class="article_panel">
						<p class="first">Категория: {{p.cat}}</p>
						<p class="last">Дата: {{p.time_update|date:"d-m-Y H:i:s"}}</p>
					</div>
	{% if p.photo %}
					<p><img class="img-article-left thumb" src="{{p.photo.url}}"></p>
	{% endif %}
					<h2>{{p.title}}</h2>
		{% autoescape on %}
		{{p.content|linebreaks|truncatewords:50}}
		{% endautoescape %}
					<div class="clear"></div>
					<p class="link-read-post">
						<!--<a href="#">-->
						<!--<a href="{% url 'post' p.pk %}">-->
						<a href="{{ p.get_absolute_url }}">
							Читать пост
						</a>
					</p>
				</li>
		{% endfor %}
	</ul>
	{% endblock %}
	$ vim women/admin.py
	$ cat women/admin.py
	from django.contrib import admin
	from .models import *
	# Register your models here.
	class WomenAdmin(admin.ModelAdmin):
	    list_display = ('id', 'title', 'time_create', 'photo', 'is_published')
	    list_display_links = ('id', 'title')
	    search_fields = ('title', 'content')
	    list_editable = ('is_published',)
	    list_filter = ('is_published', 'time_create')
	class CategoryAdmin(admin.ModelAdmin):
	    list_display = ('id', 'name')
	    list_display_links = ('id', 'name')
	    search_fields = ('name',)
	admin.site.register(Women, WomenAdmin)
	admin.site.register(Category, CategoryAdmin)
	$ python manage.py runserver
	$ vim women/views.py
	$ cat women/views.py
	...
	def index(request):
		#return render(request, 'women/index.html', {'title':'Главная страница'})
		posts=Women.objects.all()
		#cats=Category.objects.all()
		context={'posts':posts, 
			#'cats':cats,
			'menu':menu, 
			'title':'Главная страница',
			'cat_selected':0}
		return render(request, 'women/index.html', context=context)
	...
	def show_category(request, cat_id):
		posts=Women.objects.filter(cat_id=cat_id)
		#cats=Category.objects.all()
		if len(posts)==0:
			raise Http404()
		context={'posts':posts,
			#'cats':cats,
			'menu':menu,
			'title':'Главная страница',
			'cat_selected':cat_id,}
		return render(request, 'women/index.html', context=context)
	$ mkdir women/templatetags
	$ touch women/templatetags/__init__.py
	$ touch women/templatetags/women_tags.py
	$ vim women/templatetags/women_tags.py
	$ cat women/templatetags/women_tags.py
	from django import template
	from women.models import *
	register=template.Library()
	@register.simple_tag(name='getcats')
	def get_categories(filter=None):
		#return Category.objects.all()
		if not filter:
			return Category.objects.all()
		else:
			return Category.objects.filter(pk=filter)
	@register.inclusion_tag('women/list_categories.html')
	#def show_categories():
	def show_categories(sort=None, cat_selected=0):
		#cats=Category.objects.all()
		#return {"cats": cats}
		if not sort:
			cats = Category.objects.all()
		else:
			cats = Category.objects.order_by(sort)
		return {"cats":cats, "cat_selected":cat_selected}
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	...
	<!-- Sidebar слева -->
		<td valign="top" class="left-chapters">
			<ul id="leftchapters">
	{% if cat_selected == 0 %}
				<li class="selected">Все категории</li>
	{% else %}
				<li><a href="{% url 'home' %}">Все категории</a></li>
	{% endif %}
	{% show_categories cat_selected=cat_selected %}
				<li class="share"><p>Наш канал</p><a class="share-yt" href="https://www.youtube.com/channel/UClJzWfGWuGJL2t-3dYKcHTA/playlists" target="_blank" rel="nofollow"></a></li>
			</ul>
		</td>
	...
	$ touch women/templates/women/list_categories.html
	$ vim women/templates/women/list_categories.html
	$ cat women/templates/women/list_categories.html
	{% for c in cats %}
		{% if c.pk == cat_selected %}
			<li class="selected">{{c.name}}</li>
		{% else %}
			<li><a href="{{ c.get_absolute_url }}">{{c.name}}</a></li>
		{% endif %}
	{% endfor %}
	$ python manage.py runserver
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect, get_object_or_404
	from .models import *
	...
	#def show_post(request, post_id):
	def show_post(request, post_slug):
		#return HttpResponse(f"Отображение статьи с id = {post_id}")
		#post=get_object_or_404(Women, pk=post_id)
		post=get_object_or_404(Women, slug=post_slug)
		context={'post':post,
			'menu':menu,
			'title':post.title,
			'cat_selected':post.cat_id,}
		return render(request, 'women/post.html', context=context)
	...
	$ touch women/templates/women/post.html
	$ vim women/templates/women/post.html
	$ cat women/templates/women/post.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{post.title}}</h1>
	{% if post.photo %}
	<p><img class="img-article-left thumb" src="{{post.photo.url}}"></p>
	{% endif %}
	{{post.content|linebreaks}}
	{% endblock %}
	$ vim women/models.py
	$ cat women/models.py
	...
	class Women(models.Model):
		"""docstring for Women"""
		title=models.CharField(max_length=255, verbose_name="Заголовок")
		slug=models.SlugField(max_length=255, unique=True, db_index=True, verbose_name="URL")
		content=models.TextField(blank=True, verbose_name="Текст статьи")
		photo=models.ImageField(upload_to="photos/%Y/%m/%d/", verbose_name="Фото")
		time_create=models.DateTimeField(auto_now_add=True, verbose_name="Время создания")
		time_update=models.DateTimeField(auto_now=True, verbose_name="Время изменения")
		is_published=models.BooleanField(default=True, verbose_name="Публикация")
		#cat=models.ForeignKey('Category', on_delete=models.PROTECT, null=True, verbose_name="Категории")
		cat=models.ForeignKey('Category', on_delete=models.PROTECT, verbose_name="Категории")
		def __str__(self):
			return self.title
		def get_absolute_url(self):
			return reverse('post', kwargs={'post_slug':self.slug})
		...
	class Category(models.Model):
		name=models.CharField(max_length=100, db_index=True, verbose_name="Категория")
		slug=models.SlugField(max_length=255, unique=True, db_index=True, verbose_name="URL")
		...
	$ vim women/admin.py
	$ cat women/admin.py
	...
	class WomenAdmin(admin.ModelAdmin):
	    list_display = ('id', 'title', 'time_create', 'photo', 'is_published')
	    list_display_links = ('id', 'title')
	    search_fields = ('title', 'content')
	    list_editable = ('is_published',)
	    list_filter = ('is_published', 'time_create')
	    prepopulated_fields = {"slug": ("title",)}
	class CategoryAdmin(admin.ModelAdmin):
	    list_display = ('id', 'name')
	    list_display_links = ('id', 'name')
	    search_fields = ('name',)
	    prepopulated_fields = {"slug": ("name",)}
	...
	$ vim women/urls.py
	$ cat women/urls.py
	...
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		path('', index, name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		#path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		#re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
		path('about/', about, name='about'), #http://127.0.0.1:8000/
		path('addpage/', addpage, name='add_page'),
		path('contact/', contact, name='contact'),
		path('login/', login, name='login'),
		#path('post/<int:post_id>/', show_post, name='post'),
		path('post/<slug:post_slug>/', show_post, name='post'),
		path('category/<int:cat_id>/', show_category, name='category'),
	]
	$ rm -rf women/migrations/000*.py
	$ rm -rf db.sqlite3
	$ python manage.py makemigrations
	$ python manage.py migrate
	$ python manage.py createsuperuser
	$ python manage.py runserver
	Decision:
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect, get_object_or_404
	from .forms import *
	from .models import *
	...
		return HttpResponseNotFound("<h1>Страница не найдена</h1>")
	def addpage(request):
		#return HttpResponse("Добавление статьи")
		#return render(request, 'women/addpage.html', {'menu':menu, 'title':'Добавление статьи'})
		#form=AddPostForm()
		if request.method=='POST':
			form=AddPostForm(request.POST)
			if form.is_valid():
				#print(form.cleaned_data)
				try:
					Women.objects.create(**form.cleaned_data)
					return redirect('home')
				except:
					form.add_error(None,'Ошибка добавления поста')
		else:
			form=AddPostForm()
		return render(request, 'women/addpage.html', {'form':form,'menu':menu, 'title':'Добавление статьи'})
	def contact(request):
		...
	$ touch women/templates/women/addpage.html
	$ vim women/templates/women/addpage.html
	$ cat women/templates/women/addpage.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	<form action="{% url 'add_page' %}" method="post">
		{% csrf_token %}
		<div class="form-error">{{ form.non_field_errors }}</div>
		{% for f in form %}
		<p><label class="form-label" for="{{ f.id_for_label }}">{{f.label}}:</label>{{ f }}</p>
		<div class="form-error">{{ f.errors }}</div>
		{% endfor %}
		<button type="submit">Добавить</button>
	</form>
	{% endblock %}
	$ touch women/forms.py
	$ vim women/forms.py
	$ cat women/forms.py
	from django import forms
	from .models import *
	class AddPostForm(forms.Form):
	    title=forms.CharField(max_length=255, label="Заголовок", widget=forms.TextInput(attrs={'class':'form-input'}))
	    slug=forms.SlugField(max_length=255, label="URL")
	    content=forms.CharField(widget=forms.Textarea(attrs={'cols':60, 'rows':10}), label="Контент")
	    is_published=forms.BooleanField(label="Публикация", required=False, initial=True)
	    cat=forms.ModelChoiceField(queryset=Category.objects.all(), label="Категория", empty_label="Категория не выбрана")
	$ python manage.py runserver
	Decision:
	$ vim women/forms.py
	$ cat women/forms.py
	from django import forms
	from django.core.exceptions import ValidationError
	from .models import *
	#class AddPostForm(forms.Form):
	    #title=forms.CharField(max_length=255, label="Заголовок", widget=forms.TextInput(attrs={'class':'form-input'}))
	    #slug=forms.SlugField(max_length=255, label="URL")
	    #content=forms.CharField(widget=forms.Textarea(attrs={'cols':60, 'rows':10}), label="Контент")
	    #is_published=forms.BooleanField(label="Публикация", required=False, initial=True)
	    #cat=forms.ModelChoiceField(queryset=Category.objects.all(), label="Категория", empty_label="Категория не выбрана")
	class AddPostForm(forms.ModelForm):
	    def __init__(self, *args, **kwargs):
	        super().__init__(*args, **kwargs)
	        self.fields['cat'].empty_label="Категория не выбрана"
	    class Meta:
	        model=Women
	        #fields='__all__'
	        fields=['title', 'slug', 'content', 'photo', 'is_published', 'cat']
	        widgets={
	            'title':forms.TextInput(attrs={'class':'form-input'}),
	            'content':forms.Textarea(attrs={'cols':60,'rows':10}),
	        }
	    def clean_title(self):
	        title=self.cleaned_data['title']
	        if len(title)>200:
	            raise ValidationError('Длина превышает 200 символов')
	        return title
	$ vim women/views.py
	$ cat women/views.py
	...
	def addpage(request):
		#return HttpResponse("Добавление статьи")
		#return render(request, 'women/addpage.html', {'menu':menu, 'title':'Добавление статьи'})
		#form=AddPostForm()
		if request.method=='POST':
			#form=AddPostForm(request.POST)
			form=AddPostForm(request.POST, request.FILES)
			if form.is_valid():
				#print(form.cleaned_data)
				#try:
					#Women.objects.create(**form.cleaned_data)
				form.save()
				return redirect('home')
				#except:
				#	form.add_error(None,'Ошибка добавления поста')
		else:
			form=AddPostForm()
		return render(request, 'women/addpage.html', {'form':form,'menu':menu, 'title':'Добавление статьи'})
	...
	$ vim women/templates/women/addpage.html
	$ cat women/templates/women/addpage.html
	...
	<h1>{{title}}</h1>
	<form action="{% url 'add_page' %}" method="post" enctype="multipart/form-data">
		{% csrf_token %}
		...
	$ python manage.py runserver
	Decision:
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect, get_object_or_404
	from django.urls import reverse_lazy
	from django.views.generic import ListView, DetailView, CreateView
	from .forms import *
	from .models import *
	...
	#def index(request):
		#return render(request, 'women/index.html', {'title':'Главная страница'})
		#posts=Women.objects.all()
		#cats=Category.objects.all()
		#context={'posts':posts, 
			#'cats':cats,
			#'menu':menu, 
			#'title':'Главная страница',
			#'cat_selected':0}
		#return render(request, 'women/index.html', context=context)
	class WomenHome(ListView):
		model=Women
		template_name='women/index.html'
		context_object_name='posts'
		#extra_context={'title':'Главная страница'}
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			context['menu']=menu
			context['title']='Главная страница'
			context['cat_selected']=0
			return context
		def get_queryset(self):
			return Women.objects.filter(is_published=True)
	...
	#def addpage(request):
		#return HttpResponse("Добавление статьи")
		#return render(request, 'women/addpage.html', {'menu':menu, 'title':'Добавление статьи'})
		#form=AddPostForm()
		#if request.method=='POST':
			#form=AddPostForm(request.POST)
			#form=AddPostForm(request.POST, request.FILES)
			#if form.is_valid():
				#print(form.cleaned_data)
				#try:
					#Women.objects.create(**form.cleaned_data)
				#form.save()
				#return redirect('home')
				#except:
				#	form.add_error(None,'Ошибка добавления поста')
		#else:
			#form=AddPostForm()
		#return render(request, 'women/addpage.html', {'form':form,'menu':menu, 'title':'Добавление статьи'})
	class AddPage(CreateView):
		form_class=AddPostForm
		template_name='women/addpage.html'
		success_url=reverse_lazy('home')
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			context['title']='Добав статьи'
			context['menu']=menu
			return context
	...
	#def show_post(request, post_slug):
		#return HttpResponse(f"Отображение статьи с id = {post_id}")
		#post=get_object_or_404(Women, pk=post_id)
		#post=get_object_or_404(Women, slug=post_slug)
		#context={'post':post,
			#'menu':menu,
			#'title':post.title,
			#'cat_selected':post.cat_id,}
		#return render(request, 'women/post.html', context=context)
	class ShowPost(DetailView):
		model=Women
		template_name='women/post.html'
		slug_url_kwarg='post_slug'
		context_object_name='post'
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			context['title']=context['post']
			context['menu']=menu
			return context
	...
	#def show_category(request, cat_id):
		#posts=Women.objects.filter(cat_id=cat_id)
		#cats=Category.objects.all()
		#if len(posts)==0:
			#raise Http404()
		#context={'posts':posts,
			#'cats':cats,
			#'menu':menu,
			#'title':'Главная страница',
			#'cat_selected':cat_id,}
		#return render(request, 'women/index.html', context=context)
	class WomenCategory(ListView):
		model=Women
		template_name='women/index.html'
		context_object_name='posts'
		allow_empty=False
		def get_queryset(self):
			return Women.objects.filter(cat__slug=self.kwargs['cat_slug'], is_published=True)
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			context['title']='Категория - ' + str(context['posts'][0].cat)
			context['menu']=menu
			context['cat_selected']=context['posts'][0].cat_id
			return context
	$ vim women/urls.py
	$ cat women/urls.py
	...
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		#path('', index, name='home'), #http://127.0.0.1:8000/
		path('', WomenHome.as_view(), name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		#path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		#re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
		path('about/', about, name='about'), #http://127.0.0.1:8000/
		#path('addpage/', addpage, name='add_page'),
		path('addpage/', AddPage.as_view(), name='add_page'),
		path('contact/', contact, name='contact'),
		path('login/', login, name='login'),
		#path('post/<int:post_id>/', show_post, name='post'),
		#path('post/<slug:post_slug>/', show_post, name='post'),
		path('post/<slug:post_slug>/', ShowPost.as_view(), name='post'),
		#path('category/<int:cat_id>/', show_category, name='category'),
		path('category/<slug:cat_slug>/', WomenCategory.as_view(), name='category'),
	]
	$ vim women/models.py
	$ cat women/models.py
	...
		def get_absolute_url(self):
			#return reverse('category', kwargs={'cat_id':self.pk})
			return reverse('category', kwargs={'cat_slug':self.slug})
	...
	$ python manage.py runserver
	Decision:
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect, get_object_or_404
	from django.urls import reverse_lazy
	from django.views.generic import ListView, DetailView, CreateView
	from django.contrib.auth.mixins import LoginRequiredMixin
	#from django.contrib.auth.decorators import login_required
	from .forms import *
	from .models import *
	from .utils import *
	...
	#menu=[{'title':"О сайте", 'url_name':'about'}, 
		#{'title':"Добавить статью", 'url_name':'add_page'},
		#{'title':"Обратная связь", 'url_name':'contact'},
		#{'title':"Войти", 'url_name':'login'}]
	...
	#class WomenHome(ListView):
	class WomenHome(DataMixin, ListView):
		model=Women
		template_name='women/index.html'
		context_object_name='posts'
		#extra_context={'title':'Главная страница'}
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			#context['menu']=menu
			#context['title']='Главная страница'
			#context['cat_selected']=0
			c_def = self.get_user_context(title="Главная страница")
			return dict(list(context.items())+list(c_def.items()))
		def get_queryset(self):
			return Women.objects.filter(is_published=True)
	...
	#@login_required
	def about(request):
		return render(request, 'women/about.html', {'menu':menu, 'title':'О сайте'})
	...
	#class AddPage(CreateView):
	class AddPage(LoginRequiredMixin, DataMixin, CreateView):
		form_class=AddPostForm
		template_name='women/addpage.html'
		success_url=reverse_lazy('home')
		login_url = reverse_lazy('home')
		raise_exception = True
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			c_def = self.get_user_context(title="Добавление статьи")
			return dict(list(context.items())+list(c_def.items()))
	...
	class ShowPost(DataMixin, DetailView):
		model=Women
		template_name='women/post.html'
		slug_url_kwarg='post_slug'
		context_object_name='post'
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			c_def = self.get_user_context(title=context['post'])
			return dict(list(context.items())+list(c_def.items()))
	...
	class WomenCategory(DataMixin, ListView):
		model=Women
		template_name='women/index.html'
		context_object_name='posts'
		allow_empty=False
		def get_queryset(self):
			return Women.objects.filter(cat__slug=self.kwargs['cat_slug'], is_published=True)
		def get_context_data(self, *, objecft_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			c_def = self.get_user_context(title='Категория - ' + str(context['posts'][0].cat), cat_selected=context['posts'][0].cat_id)
			return dict(list(context.items())+list(c_def.items()))
	$ touch women/utils.py
	$ vim women/utils.py
	$ cat women/utils.py
	from .models import *
	from django.db.models import Count
	menu=[{'title':"О сайте", 'url_name':'about'}, 
		{'title':"Добавить статью", 'url_name':'add_page'},
		{'title':"Обратная связь", 'url_name':'contact'},
		{'title':"Войти", 'url_name':'login'}]
	class DataMixin:
		def get_user_context(self, **kwargs):
			context = kwargs
			#cats = Category.objects.all()
			cats = Category.objects.annotate(Count('women'))
			#context['menu']=menu
			user_menu = menu.copy()
			if not self.request.user.is_authenticated:
				user_menu.pop(1)
			context['menu']=user_menu
			context['cats']=cats
			if 'cat_selected' not in context:
				context['cat_selected'] = 0
			return context
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	...
	{% if cat_selected == 0 %}
				<li class="selected">Все категории</li>
	{% else %}
				<li><a href="{% url 'home' %}">Все категории</a></li>
	{% endif %}
	{% for c in cats %}
	{% if c.women__count > 0 %}
		{% if c.pk == cat_selected %}
				<li class="selected">{{c.name}}</li>
		{% else %}
				<li class=""><a href="{{ c.get_absolute_url }}">{{c.name}}</a></li>
		{% endif %}
	{% endif %}
	{% endfor %}
				<li class="share"><p>Наш канал</p><a class="share-yt" href="https://www.youtube.com/channel/UClJzWfGWuGJL2t-3dYKcHTA/playlists" target="_blank" rel="nofollow"></a></li>
	...
	$ python manage.py runserver
	Decision:
	$ python manage.py shell
	>>> from django.core.paginator import Paginator
	>>> women=['Nicol Kidman', 'Марго Робби', '']
	>>> women=['Nicol Kidman', 'Марго Робби', 'Анжелика Джоли']
	>>> p= Paginator(women, 3)
	>>> p.count
	3
	>>> p.num.pages
	>>> p.num_pages
	1
	>>> p.page_range
	range(1, 2)
	>>> p1=p.page(1)
	>>> p1.object_list
	['Nicol Kidman', 'Марго Робби', 'Анжелика Джоли']
	>>> p1.has_next()
	>>> p1.has_previous()
	>>> p1.has_other_pages()
	>>> p1.next_page_number()
	>>> p1.previous_page_number()
	>>> quit()
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect, get_object_or_404
	from django.urls import reverse_lazy
	from django.views.generic import ListView, DetailView, CreateView
	from django.contrib.auth.mixins import LoginRequiredMixin
	#from django.contrib.auth.decorators import login_required
	from django.core.paginator import Paginator
	from .forms import *
	from .models import *
	from .utils import *
	...
	class WomenHome(DataMixin, ListView):
		#paginate_by = 2
		model=Women
		template_name='women/index.html'
		context_object_name='posts'
		#extra_context={'title':'Главная страница'}
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			#context['menu']=menu
			#context['title']='Главная страница'
			#context['cat_selected']=0
			c_def = self.get_user_context(title="Главная страница")
			return dict(list(context.items())+list(c_def.items()))
		def get_queryset(self):
			return Women.objects.filter(is_published=True)
	#@login_required
	def about(request):
		#return render(request, 'women/about.html', {'menu':menu, 'title':'О сайте'})
		contact_list=Women.objects.all()
		paginator=Paginator(contact_list,2)
		page_number=request.GET.get('page')
		page_obj=paginator.get_page(page_number)
		return render(request, 'women/about.html', {'page_obj':page_obj, 'menu':menu, 'title':'О сайте'})
	...
	class WomenCategory(DataMixin, ListView):
		#paginate_by=2
		model=Women
	...
	$ vim women/templates/women/about.html
	$ cat women/templates/women/about.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	{% endblock %}
	$ vim women/static/women/css/style.css
	$ cat women/static/women/css/style.css
	...
	.form-button {
		min-width: 200px;
		font-size: 16px;
	}
	.list-pages {
		text-align: center;
		margin: 0 0 20px 0;
	}
	.list-pages ul {
		margin: 20px 0 0 0;
		padding: 0;
		list-style: none;
	}
	.list-pages ul li {
		display: inline-block;
		margin: 0 20px 0 0;
	}
	.list-pages a {
		color: #000;
		font-size: 24px;
		text-decoration: none;
	}
	.list-pages .page-num, .page-num-selected {
		display: inline-block;
		width: 60px;
		height: 44px;
		padding: 16px 0 0 0;
		border: 1px solid #d0d0d0;
		border-radius: 30px;
	}
	.list-pages .page-num:hover {
		box-shadow: 3px 3px 1px #d0d0d0; 
	}
	.list-pages .page-num-selected {
		border: none;
		color: #000;
		font-size: 20px;
	}
	.list-pages .page-num-selected:hover {
		box-shadow: none; 
	}
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	...
	{% endblock %}
			{% if page_obj.has_other_pages %}
			<nav class="list-pages">
				<ul>
					{% if page_obj.has_previous %}
					<li class="page-num"><a href="?page={{ page_obj.previous_page_number }}">&lt;</a></li>
					{% endif %}
					{% for p in paginator.page_range %}
					{% if page_obj.number == p %}
					<li class="page-num page-num-selected">{{ p }}</li>
					{% elif p >= page_obj.number|add:-2 and p <= page_obj.number|add:2 %}
					<li class="page-num"><a href="?page={{ p }}">{{ p }}</a></li>
					{% endif %}
					{% endfor %}
					{% if page_obj.has_next %}
					<li class="page-num"><a href="?page={{ page_obj.next_page_number }}">&gt;</a></li>
					{% endif %}
				</ul>
			</nav>
			{% endif %}
		</div>
	...
	$ vim women/utils.py
	$ cat women/utils.py
	...
	class DataMixin:
		#paginate_by=30
		paginate_by=2
		def get_user_context(self, **kwargs):
	...
	$ vim women/models.py
	$ cat women/models.py
	...
		class Meta:
			verbose_name='Известные женщины'
			verbose_name_plural='Известные женщины'
			#ordering=['time_create','title']
			#ordering=['-time_create','title']
			ordering=['id']
	class Category(models.Model):
	...
	$ python manage.py runserver
	Decision:
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	...
	{% block mainmenu %}
			<div class="header">
				<ul id="mainmenu" class="mainmenu">
					<li class="logo"><a href="{% url 'home' %}"><div class="logo"></div></a></li>
					{% for m in menu %}
					<li><a href="{% url m.url_name %}">{{m.title}}</a></li>
					{% endfor %}
					<li class="last"><a href="{% url 'register' %}">Регистрация</a>|<a href="{% url 'login' %}">Войти</a></li>
				</ul>
				<div class="clear"></div>
			</div>
	{% endblock mainmenu %}
	...
	$ vim women/utils.py
	$ cat women/utils.py
	...
	menu=[{'title':"О сайте", 'url_name':'about'}, 
		{'title':"Добавить статью", 'url_name':'add_page'},
		{'title':"Обратная связь", 'url_name':'contact'}
		#{'title':"Войти", 'url_name':'login'}
		]
	...
	$ vim women/urls.py
	$ cat women/urls.py
	...
	[
		path('category/<slug:cat_slug>/', WomenCategory.as_view(), name='category'),
		#path('register/', login, name='register'),
		path('register/', RegisterUser.as_view(), name='register'),
	]
	$ vim women/views.py
	$ cat women/views.py
	...
	class RegisterUser(DataMixin, CreateView):
		form_class=UserCreationForm
		template_name='women/register.html'
		success_url=reverse_lazy('login')
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			c_def=self.get_user_context(title="Регистрация")
			return dict(list(context.items())+list(c_def.items()))
	$ touch women/templates/women/register.html
	$ vim women/templates/women/register.html
	$ cat women/templates/women/register.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	<form method="post">
		{% csrf_token %}
		{% for f in form %}
		<p><label class="form-label" for="{{ f.id_for_label }}">{{f.label}}:</label>{{ f }}</p>
		<div class="form-error">{{ f.errors }}</div>
		{% endfor %}
		<button type="submit">Регистрация</button>
	</form>
	{% endblock %}
	$ vim women/forms.py
	$ cat women/forms.py
	from django import forms
	from django.core.exceptions import ValidationError
	from django.contrib.auth.forms import UserCreationForm
	from django.contrib.auth.models import User
	from .models import *
	...
	class RegisterUserForm(UserCreationForm):
		username=forms.CharField(label='Логин', widget=forms.TextInput(attrs={'class':'form-input'}))
		email=forms.EmailField(label='Email', widget=forms.EmailInput(attrs={'class':'form-input'}))
		password1=forms.CharField(label='Пароль', widget=forms.PasswordInput(attrs={'class':'form-input'}))
		password2=forms.CharField(label='Повтор пароля', widget=forms.PasswordInput(attrs={'class':'form-input'}))
		class Meta:
			model=User
			fields=('username','email','password1','password2')
			#widgets={
			#    'username':forms.TextInput(attrs={'class':'form-input'}),
			#    'password1':forms.PasswordInput(attrs={'class':'form-input'}),
			#    'password2':forms.PasswordInput(attrs={'class':'form-input'}),
			#}
	$ python manage.py runserver
	Decision:
	$ vim women/views.py
	$ cat women/views.py
	from typing import Any
	from django.forms.models import BaseModelForm
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect, get_object_or_404
	from django.urls import reverse_lazy
	from django.views.generic import ListView, DetailView, CreateView
	from django.contrib.auth.mixins import LoginRequiredMixin
	#from django.contrib.auth.decorators import login_required
	from django.core.paginator import Paginator
	#from django.contrib.auth.forms import UserCreationForm
	from django.contrib.auth.views import LoginView
	#from django.contrib.auth.forms import AuthenticationForm
	from django.contrib.auth import logout, login
	...
	#def login(request):
	#	return HttpResponse("Авторизация")
	...
			return dict(list(context.items())+list(c_def.items()))
		def form_valid(self, form):
			user=form.save()
			login(self.request, user)
			return redirect('home')
	class LoginUser(DataMixin, LoginView):
		form_class=AuthenticationForm
		template_name='women/login.html'
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			c_def=self.get_user_context(title="Авторизация")
			return dict(list(context.items())+list(c_def.items()))
		def get_success_url(self):
			return reverse_lazy('home')	
	def logout_user(request):
		logout(request)
		return redirect('login')
	$ vim women/forms.py
	$ cat women/forms.py
	from django import forms
	from django.core.exceptions import ValidationError
	from django.contrib.auth.forms import UserCreationForm
	from django.contrib.auth.models import User
	from django.contrib.auth.forms import AuthenticationForm
	...
	class LoginUserForm(AuthenticationForm):
		username=forms.CharField(label='Логин', widget=forms.TextInput(attrs={'class':'form-input'}))
		password=forms.CharField(label='Пароль', widget=forms.PasswordInput(attrs={'class':'form-input'}))
	$ touch women/templates/women/login.html
	$ vim women/templates/women/login.html
	$ cat women/templates/women/login.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	<form method="post">
		{% csrf_token %}
		<div class="form-error">{{ form.non_field_errors }}</div>
		{% for f in form %}
		<p><label class="form-label" for="{{ f.id_for_label }}">{{f.label}}:</label>{{ f }}</p>
		<div class="form-error">{{ f.errors }}</div>
		{% endfor %}
		<button type="submit">Войти</button>
	</form>
	{% endblock %}
	$ vim women/urls.py
	$ cat women/urls.py
	...
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		#path('', index, name='home'), #http://127.0.0.1:8000/
		path('', WomenHome.as_view(), name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		#path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		#re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
		path('about/', about, name='about'), #http://127.0.0.1:8000/
		#path('addpage/', addpage, name='add_page'),
		path('addpage/', AddPage.as_view(), name='add_page'),
		path('contact/', contact, name='contact'),
		#path('login/', login, name='login'),
		#path('post/<int:post_id>/', show_post, name='post'),
		#path('post/<slug:post_slug>/', show_post, name='post'),
		path('post/<slug:post_slug>/', ShowPost.as_view(), name='post'),
		#path('category/<int:cat_id>/', show_category, name='category'),
		path('category/<slug:cat_slug>/', WomenCategory.as_view(), name='category'),
		#path('register/', login, name='register'),
		path('register/', RegisterUser.as_view(), name='register'),
		path('login/', LoginUser.as_view(), name='login'),
		path('logout/', logout_user, name='logout'),
	]
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	MEDIA_URL = '/media/'
	#LOGIN_REDIRECT_URL = '/'
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	...
				<ul id="mainmenu" class="mainmenu">
					<li class="logo"><a href="{% url 'home' %}"><div class="logo"></div></a></li>
					{% for m in menu %}
					<li><a href="{% url m.url_name %}">{{m.title}}</a></li>
					{% endfor %}
					{% if request.user.is_authenticated %}
					<li class="last">{{user.username}} | <a href="{% url 'logout' %}">Выйти</a></li>
					{% else %}
					<li class="last"><a href="{% url 'register' %}">Регистрация</a>|<a href="{% url 'login' %}">Войти</a></li>
					{% endif %}
				</ul>
	...
	$ python manage.py runserver
	Decision:
	$ pip install django-debug-toolbar
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	INSTALLED_APPS = [
		'django.contrib.admin',
		'django.contrib.auth',
		'django.contrib.contenttypes',
		'django.contrib.sessions',
		'django.contrib.messages',
		'django.contrib.staticfiles',
		'debug_toolbar',
		'women.apps.WomenConfig'
	]
	MIDDLEWARE = [
		'django.middleware.security.SecurityMiddleware',
		'django.contrib.sessions.middleware.SessionMiddleware',
		'django.middleware.common.CommonMiddleware',
		'django.middleware.csrf.CsrfViewMiddleware',
		'django.contrib.auth.middleware.AuthenticationMiddleware',
		'django.contrib.messages.middleware.MessageMiddleware',
		'django.middleware.clickjacking.XFrameOptionsMiddleware',
		'debug_toolbar.middleware.DebugToolbarMiddleware',
	]
	...
	INTERNAL_IPS=[
		'127.0.0.1',
	]
	$ vim coolsite/urls.py
	$ cat coolsite/urls.py
	...
	if settings.DEBUG:
		import debug_toolbar
		urlpatterns = [
			path('__debug__/', include(debug_toolbar.urls)),
		] + urlpatterns
		urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
	handler404 = pageNotFound
	$ vim women/views.py
	$ cat women/views.py
	...
		def get_queryset(self):
			return Women.objects.filter(is_published=True).select_related('cat')
	#@login_required
	...
	class WomenCategory(DataMixin, ListView):
		#paginate_by=2
		model=Women
		template_name='women/index.html'
		context_object_name='posts'
		allow_empty=False
		def get_queryset(self):
			return Women.objects.filter(cat__slug=self.kwargs['cat_slug'], is_published=True).select_related('cat')
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			c = Category.objects.get(slug=self.kwargs['cat_slug'])
			#c_def = self.get_user_context(title='Категория - ' + str(context['posts'][0].cat), cat_selected=context['posts'][0].cat_id)
			c_def = self.get_user_context(title='Категория - ' + str(c.name), cat_selected=c.pk)
			return dict(list(context.items())+list(c_def.items()))
	...
	$ python manage.py runserver
	Decision:
	$ mkdir coolsite_cache
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	CACHES = {
		'default':{
			'BACKEND':'django.core.cache.backends.filebased.FileBasedCache',
			'LOCATION':os.path.join(BASE_DIR, 'coolsite_cache'),
		}
	}
	$ vim women/urls.py
	$ cat women/urls.py
	from django.urls import path, re_path
	from .views import *
	from django.views.decorators.cache import cache_page
	...
		path('', WomenHome.as_view(), name='home'), #http://127.0.0.1:8000/
		#path('', cache_page(60)(WomenHome.as_view()), name='home'),
	...
	$ vim women/utils.py
	$ cat women/utils.py
	from .models import *
	from django.db.models import Count
	from django.core.cache import cache
	...
			context = kwargs
			#cats = Category.objects.all()
			#cats = Category.objects.annotate(Count('women'))
			#context['menu']=menu
			cats = cache.get('cats')
			if not cats:
				cats = Category.objects.annotate(Count('women'))
				cache.set('cats', cats, 60)
			user_menu = menu.copy()
	...
	$ python manage.py runserver
	Decision:
	$ pip install django-simple-captcha
	$ vim women/views.py
	$ cat women/views.py
	...
	from django.views.generic import ListView, DetailView, CreateView, FormView
	...
	class ContactFormView(DataMixin, FormView):
		form_class = ContactForm
		template_name = 'women/contact.html'
		success_url = reverse_lazy('home')
		def get_context_data(self, *, object_list=None, **kwargs):
			context = super().get_context_data(**kwargs)
			c_def = self.get_user_context(title="Обратная связь")
			return dict(list(context.items()) + list(c_def.items()))
		def form_valid(self, form):
			print(form.cleaned_data)
			return redirect('home')
	$ vim women/forms.py
	$ cat women/forms.py
	...
	from django.contrib.auth.forms import AuthenticationForm
	from captcha.fields import CaptchaField
	...
	class ContactForm(forms.Form):
		name = forms.CharField(label='Имя', max_length=255)
		email = forms.EmailField(label='Email')
		content = forms.CharField(widget=forms.Textarea(attrs={'cols': 60, 'rows': 10}))
		capatcha = CaptchaField()
	$ vim women/urls.py
	$ cat women/urls.py
	from django.urls import path, re_path
	from .views import *
	from django.views.decorators.cache import cache_page
	...
		#path('contact/', contact, name='contact'),
		path('contact/', ContactFormView.as_view(), name='contact'),
	...
	$ touch women/templates/women/contact.html
	$ vim women/templates/women/contact.html
	$ cat women/templates/women/contact.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	<form method="post">
		{% csrf_token %}
		<div class="form-error">{{ form.non_field_errors }}</div>
		{% for f in form %}
		<p><label class="form-label" for="{{ f.id_for_label }}">{{f.label}}:</label>{{ f }}</p>
		<div class="form-error">{{ f.errors }}</div>
		{% endfor %}
		<button type="submit">Отправить</button>
	</form>
	{% endblock %}
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	INSTALLED_APPS = [
		'django.contrib.admin',
		'django.contrib.auth',
		'django.contrib.contenttypes',
		'django.contrib.sessions',
		'django.contrib.messages',
		'django.contrib.staticfiles',
		'debug_toolbar',
		'captcha',
		'women.apps.WomenConfig'
	]
	...
	$ vim coolsite/urls.py
	$ cat coolsite/urls.py
	...
		path('captcha/', include('captcha.urls')),
	]
	...
	$ python manage.py migrate
	$ python manage.py runserver
	Decision:
	$ mkdir templates
	$ mkdir templates/admin
	$ touch templates/admin/base_site.html
	$ vim templates/admin/base_site.html
	$ cat templates/admin/base_site.html
	{% extends "admin/base.html" %}
	{% load static %}
	{% block extrastyle %}
	<link rel="stylesheet" href="{% static 'css/admin.css' %}">
	{% endblock %}
	{% block title %}{% if subtitle %}{{ subtitle }} | {% endif %}{{ title }} | {{ site_title|default:_('Django site admin') }}{% endblock %}
	{% block branding %}
	<h1 id="site-name"><a href="{% url 'admin:index' %}">{{ site_header|default:_('Django administration') }}</a></h1>
	{% if user.is_anonymous %}
		{% include "admin/color_theme_toggle.html" %}
	{% endif %}
	{% endblock %}
	{% block nav-global %}{% endblock %}
	$ mkdir women/static/css
	$ touch women/static/css/admin.css
	$ vim women/static/css/admin.css
	$ cat women/static/css/admin.css
	#header, .module caption  {
		background: #5e3a00;
	}
	$ vim women/admin.py
	$ cat women/admin.py
	from django.contrib import admin
	from .models import *
	from django.utils.safestring import mark_safe
	...
	class WomenAdmin(admin.ModelAdmin):
		#list_display = ('id', 'title', 'time_create', 'photo', 'is_published')
		list_display = ('id', 'title', 'time_create', 'get_html_photo', 'is_published')
		list_display_links = ('id', 'title')
		search_fields = ('title', 'content')
		list_editable = ('is_published',)
		list_filter = ('is_published', 'time_create')
		prepopulated_fields = {"slug": ("title",)}
		fields = ('title', 'slug', 'cat', 'content', 'photo', 'get_html_photo', 'is_published', 'time_create', 'time_update')
		readonly_fields = ('time_create', 'time_update', 'get_html_photo')
		save_on_top = True
		def get_html_photo(self, object):
			if object.photo:
				return mark_safe(f"<img src='{object.photo.url}' width=50>")
		get_html_photo.short_description="Миниатюра"
	...
	admin.site.site_title='Админ-панель сайта о женщинах'
	admin.site.site_header='Админ-панель сайта о женщинах 2'
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	TEMPLATES = [
		{
			'BACKEND': 'django.template.backends.django.DjangoTemplates',
			'DIRS': [os.path.join(BASE_DIR, 'templates')],
			'APP_DIRS': True,
			'OPTIONS': {
				'context_processors': [
					'django.template.context_processors.debug',
					'django.template.context_processors.request',
					'django.contrib.auth.context_processors.auth',
					'django.contrib.messages.context_processors.messages',
				],
			},
		},
	]
	...
	$ python manage.py runserver
	Decision:
	$ deactivate
	Task:
	Создаем API блога на Django REST Framefork
	Decision:
	$ vim coolsite/settings
	$ cat coolsite/settings
	...
	INSTALLED_APPS = [
		'django.contrib.admin',
		'django.contrib.auth',
		'django.contrib.contenttypes',
		'django.contrib.sessions',
		'django.contrib.messages',
		'django.contrib.staticfiles',
		'debug_toolbar',
		'captcha',
		'women.apps.WomenConfig',
		'rest_framework',
	]
	...
	$ vim women/serializers.py
	$ cat women/serializers.py
	from rest_framework import serializers
	from django.contrib.auth.models import User
	class UserSerializer(serializers.ModelSerializer):
		class Meta:
			model = User
			fields = ['id', 'username']
	$ vim women/views.py
	$ cat women/views.py
	...
	from rest_framework import generics
	from . import serializers
	from django.contrib.auth.models import User
	...
	class UserList(generics.ListAPIView):
		queryset = User.objects.all()
		serializer_class = serializers.UserSerializer
	class UserDetail(generics.RetrieveAPIView):
		queryset = User.objects.all()
		serializer_class = serializers.UserSerializer
	$ vim women/urls.py
	$ cat women/urls.py
	...
	from rest_framework.urlpatterns import format_suffix_patterns
	from . import views
	urlpatterns = [
		...
		path('users/', views.UserList.as_view()),
		path('users/<int:pk>/', views.UserDetail.as_view()),
	]
	urlpatterns = format_suffix_patterns(urlpatterns)
	$ curl http://127.0.0.1:8000/users
	$ vim women/models.py
	$ cat women/models.py
	class Women(models.Model):
		...
		cat=models.ForeignKey('Category', on_delete=models.PROTECT, verbose_name="Категории")
		owner = models.ForeignKey('auth.User', related_name='womens', on_delete=models.CASCADE)
		...
	$ python3 manage.py makemigrations women
	It is impossible to add a non-nullable field 'owner' to women without specifying a default. This is because the database needs something to populate existing rows.
	Please select a fix:
	1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
	2) Quit and manually define a default value in models.py.
	Select an option: 2
	$ rm -rf women/migrations/000*.py
	$ rm -rf db.sqlite3
	$ python3 manage.py makemigrations women
	$ python3 manage.py migrate
	$ python3 manage.py createsuperuser
	Source:
	1. https://docs.python.org/3/tutorial/venv.html
	2. https://translated.turbopages.org/proxy_u/en-ru.ru.6b298518-64cb356b-c3e4f7d2-74722d776562/https/stackoverflow.com/questions/5334882/how-to-get-list-of-all-the-tables-in-sqlite-programmatically
	3. https://django-debug-toolbar.readthedocs.io/en/latest/
	4. https://pypi.org/project/django-recaptcha/#installation
	5. https://pythonru.com/uroki/django-rest-api

Django, Разработка сайта
    Task:
    Необходимо собрать с помощью bootstrap 5 и запустить новую страницу по макету 
    https://www.figma.com/file/csU67B0SQVZO1AkwvMZa3D/Тестовое-задание-N2?type=design&node-id=1-1012&mode=design&t=wz2qpqpXo6RochwT-0
    - сборку проекта осуществить с помощью python 3.9, Django 4.1 и MySQL
    - проект разместить в git репозитории
    - для сборки клиентской части страницы необходимо использовать bootstrap 5
    - для запуска слайдера необходимо использовать slick slider http://kenwheeler.github.io/slick/ (см. Slider Syncing)
    - по клику на большую фотографию на слайдере фотки должны открываться на весь экран и листаться галереей
    - необходимо чтобы slider заполнялся через админку django. Необходимо настроить визуально понятный admin.py, чтобы выводилась картинка и название в списке записей элементов слайдера.
    - для картинок модели слайдера необходимо использовать пакет django-filer и через него грузить картинки в слайдер
    - записи слайдера в админке должны сортироваться при помощи drag&drop, для этого необходимо использовать пакет django-admin-sortable2
    - все зависимости для запуска проекта расположить в файле req.pip в корне проекта.
    Тестовое задание проверяет поверхностно основные навыки кандидата необходимые для текущей вакансии:
    - умение работать с bootstrap 5;
    - базовые знания HTML, CSS, JavaScript;
    - умение запустить и собрать новый проект на Django, с подключением дополнительных пакетов;
    - базовые навыки работы с GIT;
    - базовые навыки работы с Figma.
    Decision:
    $ mkdir Python-SpaceAgency
    $ cd Python-SpaceAgency/
    $ sudo apt update
    $ sudo apt upgrade -y
    E: dpkg was interrupted, you must manually run 'sudo dpkg --configure -a' to correct the problem. 
    $ sudo dpkg --configure -a
    $ sudo apt upgrade -y
    Task:
    Check Mysql
    Decision:
    $ systemctl status mysql
    $ mysql -u tuser -p
    mysql> show databases;
    +--------------------+
    | Database           |
    +--------------------+
    | information_schema |
    | performance_schema |
    | tbase              |
    +--------------------+
    3 rows in set (0.00 sec)
    Task:
    Install Figma
    Decision:
    $ wget https://github.com/Figma-Linux/figma-linux/releases/download/v0.11.0/figma-linux_0.11.0_linux_amd64.deb
    $ sudo dpkg -i figma-linux_0.11.0_linux_amd64.deb
    $ figma-linux &
    $ google-chrome https://www.figma.com/file/csU67B0SQVZO1AkwvMZa3D/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%BE%D0%B5-%D0%B7%D0%B0%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-N2?type=design&node-id=1-1012&mode=design &
    Task:
    Figma to Bootstrap 5
    Decision:
    $ mkdir bootstrap
    $ cd bootstrap/
    $ wget https://github.com/twbs/bootstrap/releases/download/v5.3.2/bootstrap-5.3.2-dist.zip
    $ unzip bootstrap-5.3.2-dist.zip
    $ mkdir space/static/space/css
    $ mkdir js
    $ mkdir space/static/space/image
    $ cp bootstrap-5.3.2-dist/css/bootstrap.min.css space/static/space/css/
    $ cp bootstrap-5.3.2-dist/js/bootstrap.min.js js/
    $ touch index.html
    $ touch space/static/space/css/style.css
    $ wget https://github.com/kenwheeler/slick/archive/v1.8.1.zip
    $ unzip v1.8.1.zip 
    $ ls slick-1.8.1/slick
    ajax-loader.gif  config.rb  fonts  slick.css  slick.js  slick.less  slick.min.js  slick.scss  slick-theme.css  slick-theme.less  slick-theme.scss
    $ cp slick-1.8.1/slick/slick.min.js js/
    $ cp slick-1.8.1/slick/slick.css space/static/space/css/
    $ cp slick-1.8.1/slick/slick-theme.css space/static/space/css/
    Task:
    Install python 3.9
    Decision:
    $ cd ..
    $ python3 -V
    Python 3.10.12
    $ sudo apt install software-properties-common
    $ sudo add-apt-repository ppa:deadsnakes/ppa
    $ sudo apt install python3.9
    $ python3.9 -m venv venv
    Error: Command '['/home/tuser/Projects/Python-SpaceAgency/venv/bin/python3.9', '-Im', 'ensurepip', '--upgrade', '--default-pip']' returned non-zero exit status 1.
    $ sudo apt install python3.9-venv
    $ python3.9 -m venv venv
    $ source venv/bin/activate
    (venv) $ python3 -V
    Python 3.9.18
    Task:
    requirements.txt — это список внешних зависимостей
    Decision:
    (venv) $ vim req.pip
    (venv) $ cat req.pip
    Django==4.1.13
    django-filter
    django-admin-sortable2
    django-debug-toolbar
    django-simple-captcha
    mysqlclient
    (venv) $ pip install -r req.pip
    ...
    Getting requirements to build wheel ... error
    error: subprocess-exited-with-error
    × Getting requirements to build wheel did not run successfully.
    │ exit code: 1
    ╰─> [24 lines of output]
        /bin/sh: 1: pkg-config: not found
        /bin/sh: 1: pkg-config: not found
        Trying pkg-config --exists mysqlclient
        Command 'pkg-config --exists mysqlclient' returned non-zero exit status 127.
        Trying pkg-config --exists mariadb
        Command 'pkg-config --exists mariadb' returned non-zero exit status 127.
        Traceback (most recent call last):
            File "/home/tuser/Projects/Python-SpaceAgency/venv/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 353, in <module>
            main()
            File "/home/tuser/Projects/Python-SpaceAgency/venv/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 335, in main
            json_out['return_val'] = hook(**hook_input['kwargs'])
            File "/home/tuser/Projects/Python-SpaceAgency/venv/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 118, in get_requires_for_build_wheel
            return hook(config_settings)
            File "/tmp/pip-build-env-7j30p2fh/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 355, in get_requires_for_build_wheel
            return self._get_build_requires(config_settings, requirements=['wheel'])
            File "/tmp/pip-build-env-7j30p2fh/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 325, in _get_build_requires
            self.run_setup()
            File "/tmp/pip-build-env-7j30p2fh/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 341, in run_setup
            exec(code, locals())
            File "<string>", line 154, in <module>
            File "<string>", line 48, in get_config_posix
            File "<string>", line 27, in find_package_name
        Exception: Can not find valid pkg-config name.
        Specify MYSQLCLIENT_CFLAGS and MYSQLCLIENT_LDFLAGS env vars manually
        [end of output]
    note: This error originates from a subprocess, and is likely not a problem with pip.
    error: subprocess-exited-with-error
    × Getting requirements to build wheel did not run successfully.
    │ exit code: 1
    ╰─> See above for output.
    note: This error originates from a subprocess, and is likely not a problem with pip.
    (venv) $ sudo apt-get install pkg-config build-essential libmysqlclient-dev
    (venv) $ pip install -r req.pip
    ...
    Building wheels for collected packages: mysqlclient
    Building wheel for mysqlclient (pyproject.toml) ... error
    error: subprocess-exited-with-error
    × Building wheel for mysqlclient (pyproject.toml) did not run successfully.
    │ exit code: 1
    ╰─> [45 lines of output]
        Trying pkg-config --exists mysqlclient
        # Options for building extention module:
            extra_compile_args: ['-I/usr/include/mysql', '-std=c99']
            extra_link_args: ['-lmysqlclient']
            define_macros: [('version_info', (2, 2, 0, 'final', 0)), ('__version__', '2.2.0')]
        running bdist_wheel
        running build
        running build_py
        creating build
        creating build/lib.linux-x86_64-cpython-39
        creating build/lib.linux-x86_64-cpython-39/MySQLdb
        copying src/MySQLdb/_exceptions.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
        copying src/MySQLdb/__init__.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
        copying src/MySQLdb/connections.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
        copying src/MySQLdb/cursors.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
        copying src/MySQLdb/converters.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
        copying src/MySQLdb/times.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
        copying src/MySQLdb/release.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
        creating build/lib.linux-x86_64-cpython-39/MySQLdb/constants
        copying src/MySQLdb/constants/CLIENT.py -> build/lib.linux-x86_64-cpython-39/MySQLdb/constants
        copying src/MySQLdb/constants/ER.py -> build/lib.linux-x86_64-cpython-39/MySQLdb/constants
        copying src/MySQLdb/constants/FIELD_TYPE.py -> build/lib.linux-x86_64-cpython-39/MySQLdb/constants
        copying src/MySQLdb/constants/__init__.py -> build/lib.linux-x86_64-cpython-39/MySQLdb/constants
        copying src/MySQLdb/constants/FLAG.py -> build/lib.linux-x86_64-cpython-39/MySQLdb/constants
        copying src/MySQLdb/constants/CR.py -> build/lib.linux-x86_64-cpython-39/MySQLdb/constants
        running egg_info
        writing src/mysqlclient.egg-info/PKG-INFO
        writing dependency_links to src/mysqlclient.egg-info/dependency_links.txt
        writing top-level names to src/mysqlclient.egg-info/top_level.txt
        reading manifest file 'src/mysqlclient.egg-info/SOURCES.txt'
        reading manifest template 'MANIFEST.in'
        adding license file 'LICENSE'
        writing manifest file 'src/mysqlclient.egg-info/SOURCES.txt'
        copying src/MySQLdb/_mysql.c -> build/lib.linux-x86_64-cpython-39/MySQLdb
        running build_ext
        building 'MySQLdb._mysql' extension
        creating build/temp.linux-x86_64-cpython-39
        creating build/temp.linux-x86_64-cpython-39/src
        creating build/temp.linux-x86_64-cpython-39/src/MySQLdb
        x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -fPIC "-Dversion_info=(2, 2, 0, 'final', 0)" -D__version__=2.2.0 -I/home/tuser/Projects/Python-SpaceAgency/venv/include -I/usr/include/python3.9 -c src/MySQLdb/_mysql.c -o build/temp.linux-x86_64-cpython-39/src/MySQLdb/_mysql.o -I/usr/include/mysql -std=c99
        src/MySQLdb/_mysql.c:46:10: fatal error: Python.h: No such file or directory
            46 | #include "Python.h"
                |          ^~~~~~~~~~
        compilation terminated.
        error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1
        [end of output]
    note: This error originates from a subprocess, and is likely not a problem with pip.
    ERROR: Failed building wheel for mysqlclient
    Failed to build mysqlclient
    ERROR: Could not build wheels for mysqlclient, which is required to install pyproject.toml-based projects
    (venv) $ sudo apt-get install python3.9-dev
    (venv) $ pip install -r req.pip
    Task:
    Развернуть django проект
    Decision:
    (venv) $ django-admin startproject spaceagency
    (venv) $ cd spaceagency/
    (venv) $ python manage.py startapp space
    (venv) $ python manage.py migrate
    (venv) $ mysql -u tuser -p
    mysql> use tbase;
    mysql> show tables;
    +----------------------------+
    | Tables_in_tbase            |
    +----------------------------+
    | auth_group                 |
    | auth_group_permissions     |
    | auth_permission            |
    | auth_user                  |
    | auth_user_groups           |
    | auth_user_user_permissions |
    | captcha_captchastore       |
    | django_admin_log           |
    | django_content_type        |
    | django_migrations          |
    | django_session             |
    | ttable1                    |
    | ttable2                    |
    +----------------------------+
    13 rows in set (0.01 sec)
    (venv) $ python manage.py runserver
    (venv) $ google-chrome http://127.0.0.1:8000/ &
    (не запускается проект)
    Source:
    https://itslinuxfoss.com/install-python-3-9-ubuntu-22-04/
    https://pypi.org/project/Django/4.1.13/#history
    https://sky.pro/media/udalenie-vseh-paketov-ustanovlennyh-cherez-pip/
    https://semakin.dev/2020/04/requirements_txt/?ysclid=lp2q25vn81790283417
    https://unixcop.com/install-figma-ubuntu-different-methods/
    https://github.com/Figma-Linux/figma-linux/releases/tag/v0.11.0
    https://www.youtube.com/watch?v=7EKg_IgTztU&t=160s
    https://www.youtube.com/playlist?list=PLgT76xw3dCIWO5WnLzhbrmwO6t85G68_b
    https://getbootstrap.com/docs/5.3/getting-started/download/
    http://kenwheeler.github.io/slick/
    https://pythonpip.ru/django/kak-podklyuchit-mysql-k-django-za-5-shagov?ysclid=lp2re296g690922035
    https://www.8host.com/blog/kak-xranit-izobrazheniya-v-mysql-s-pomoshhyu-blob/?ysclid=lp4zs7pdrh496783742
    https://stackoverflow.com/questions/51117503/python-3-7-failed-building-wheel-for-mysql-python
    https://stackoverflow.com/questions/76875507/can-not-install-apache-airflow-providers-mysql-pkg-config-error
    https://www.youtube.com/playlist?list=PLxjLT04EBKpN_8aiP0PzKUZYnNYANUekx
    https://github.com/luketamang/Dynamic-image-slider-in-django/blob/master/core/models.py

Clouds Interview
    Task:
    Для проверки состояния заданы следующие параметры: тип — HTTP, интервал выполнения — 10 секунд, время ожидания — 5 секунд, 
    пороги работоспособности и неработоспособности — 2. ВМ пройдёт проверку, если...
    Decision:
    -дважды ответит с кодом 200 через 4,5 секунды

English Interview Engineer Yandex Cloud
    Task:
    Interview (Engineer Yandex Cloud)
    Task:
    Какие задачи можно решать с помощью Yandex Cloud?
    Decision:
    -Хранить бэкапы
    -Строить отказоустойчивые веб-приложения
    Task:
    Как называется сервис, отвечающий за иерархию ресурсов?
    Decision:
    -Yandex Resource Manager
    Task:
    Какой сервис отвечает за предоставление доступа к ресурсам?
    Decision:
    -Yandex Identity and Access Management
    Task:
    Как устроены ресурсы в Yandex.Cloud, от более крупных к более мелким?
    Decision:
    -Облако -> Каталог -> Ресурс
    Task:
    Какой тип аккаунта не используется для авторизации при доступе к ресурсам?
    Decision:
    -Платёжный аккаунт
    Task:
    В чём различия бизнес-аккаунта и личного аккаунта?
    Decision:
    -Бизнес-аккаунт — для юридических лиц, личный — для частных лиц
    Task:
    Как происходит переход на платную версию?
    Decision:
    -Нажатием специальной кнопки в консоли
    Task:
    Как можно передавать данные службе метаданных, обслуживающей виртуальные машины?
    Decision:
    -Из веб-консоли при создании и изменении виртуальной машины
    -С помощью Yandex Cloud CLI
    Task:
    Вы разрабатываете веб-приложение на ВМ на ноутбуке и хотите перенести ВМ в облако. Для этого нужно:
    Decision:
    -Загрузить образ в бакет Yandex Object Storage.
    Task:
    Какие задачи решает Yandex Network Load Balancer?
    Decision:
    -Обеспечивает отказоустойчивость
    -Распределяет веб-трафик
    Task:
    Какие базы данных представлены в сервисах управляемых баз данных Yandex Cloud?
    Decision:
    -Redis
    -Greenplum
    Task:
    Пользователи с какими ролями могут перезаписывать объекты в бакете?
    Decision:
    -storage.uploader
    -storage.editor
    Task:
    Рентгеновские снимки вашей клиники хранятся в объектном хранилище в облаке. Подумайте, какому сотруднику следует дать роль storage.admin, а какому — storage.configurer.
    Decision:
    Чтобы это определить, посмотрите, какие действия доступны для этих ролей, в документации. Обратите внимание, что роль storage.configurer не даёт доступа к данным в бакете, что важно с точки зрения сохранения медицинской тайны. То есть роль storage.admin лучше давать врачу, отвечающему за систему хранения, а роль storage.configurer — например, системному администратору клиники.
    Task:
    Вы используете Yandex Object Storage для хранения архива аудиозаписей. Какой класс хранилища стоит выбрать?
    Decision:
    -Холодное
    Task:
    Возможно ли создать балансировщик без обработчика?
    Decision:
    -Да
    Task:
    Задача балансировщика — узнать:
    Decision:
    -о состоянии ресурсов целевой группы
    Task:
    ВМ пройдёт проверку, если...
    Decision:
    -ВМ отдала код 200 через 8 секунд при опросе раз в 10 секунд
    Task:
    Вы хотите использовать ВМ для запуска веб-сервера и размещения базы данных (БД). Как вам лучше сконфигурировать дисковую подсистему с точки зрения быстродействия и стоимости?
    Decision:
    -Разместить веб-сервер на HDD, потому что он грузится в оперативную память при запуске ОС, а базу данных — на SSD, потому что к ней идёт постоянное обращение.
    Task:
    Группы ВМ применяются, чтобы...
    Decision:
    -перезапускать машины, которые перестали откликаться на запросы
    -автоматически увеличивать число машин при пиковых нагрузках
    Task:
    Чтобы максимально защитить группу ВМ фиксированного размера от сбоев, нужно разрешить:
    Decision:
    -и уменьшение, и превышение целевого размера группы
    Task:
    Чтобы сервис не создавал ВМ на каждый всплеск активности, нужно правильно:
    Decision:
    -настроить период усреднения
    -задать целевое значение метрики
    Task:
    Снимки дисков делаются, чтобы...
    Decision:
    -Сохранять состояние дисков с данными
    -Сохранять настройки операционной системы
    -Восстанавливать состояние дисков с данными
    Task:
    Публичные адреса также называют
    Decision:
    -белыми
    -внешними
    Task:
    Статические IP-адреса
    Decision:
    -сохраняются при остановке ресурса
    -можно зарезервировать без привязки к ресурсу
    Task:
    Вы создали группу безопасности с открытым портом 80. Как зайти на ВМ по SSH?
    Decision:
    -Открыть порт 22
    Task:
    Преимущества балансировки — это
    Decision:
    -Абстрактность имён
    -Устойчивость к отказам
    -Повышение производительности
    Task:
    Какой вариант доступа к ВМ безопаснее, если в облаке несколько пользователей с одинаковыми правами?
    Decision:
    -По SSH
    Task:
    Прерываемыми называются виртуальные машины, которые:
    Decision:
    -могут быть принудительно остановлены, если в той же зоне доступности не хватает ресурсов для запуска обычных ВМ.
    Task:
    Прерываемые ВМ подойдут, чтобы…
    Decision:
    -решать задачи, связанные с пакетной обработкой данных.
    -повысить производительность веб-сервисов при пиковых нагрузках.
    Task:
    Ваша ВМ, у которой есть только загрузочный диск, находится в зоне доступности ru-central1-a. Какими способами можно создать копию этой ВМ в зоне доступности ru-central1-b?
    Decision:
    -Сделать образ диска ВМ, он автоматически реплицируется в остальные зоны доступности, создать из этого образа ВМ в зоне ru-central1-b.
    -Сделать снимок диска ВМ, он сам реплицируется в нужную зону доступности, создать ВМ в зоне ru-central1-b из этого снимка.
    Task:
    Ваша ВМ всегда должна быть доступна по одному и тому же публичному IP-адресу. Укажите все оптимальные варианты решения задачи.
    Decision:
    -Выбрать статический IP-адрес при создании ВМ.
    -Сделать динамический IP-адрес статическим, если ВМ уже настроена и работает.
    Task:
    Какой главный принцип работы групп безопасности?
    Decision:
    -Запрещено всё, что не разрешено напрямую.
    Task:
    На всех копиях ВМ за балансировщиком работает несколько приложений, каждое из которых использует несколько портов, причём все порты уникальны. 
    Какая конфигурация балансировщика оптимальна?
    Decision:
    -Отдельный балансировщик на каждое приложение с обработчиками всех портов, используемых этим приложением.
    Task:
    На каждой машине в группе ВМ работает несколько «боевых» приложений. Как лучше настроить балансировщик?
    Decision:
    -Создать балансировщики на каждое приложение.
    Task:
    В работе одной из ВМ в группе произошёл сбой. Если при создании новой ВМ старая машина станет работоспособна, Instance Groups:
    Decision:
    -прекратит создавать ВМ.
    Task:
    Во время коротких всплесков активности на веб-сервисе Instance Groups автоматически создаёт ВМ. Когда нагрузка спадает — убирает их. Всплески происходят часто, и Instance Groups постоянно создаёт и удаляет ВМ. Какое решение обойдётся дешевле?
    Decision:
    -Увеличить период стабилизации, чтобы ВМ не удалялись слишком быстро.
    Task:
    У сервисов управляемых баз данных есть преимущество перед базами данных поверх виртуальных машин. Какое?
    Decision:
    -Пользователю не придётся их администрировать
    Task:
    В каком окружении рекомендуется развернуть БД, если вы начинаете разрабатывать приложение?
    Decision:
    -PRESTABLE
    Task:
    Какие компоненты не входят в набор серверного программного обеспечения LEMP?
    Decision:
    - Apache
    - Python
    Task:
    База данных MongoDB входит в стек технологий:
    Decision:
    -MEAN 
    Task:
    Какую базу данных стоит предпочесть для онлайн-обработки аналитических запросов?
    Decision:
    ClickHouse
    Task:
    Имеет ли смысл положить в объектное хранилище файл с очень большой базой данных SQLite, если к ней идет много запросов на чтение и лишь немного на запись?
    Decision:
    -Нет
    Task:
    Метаданные объекта в объектном хранилище нужны, чтобы:
    Decision:
    -описывать свойства объекта
    Task:
    Будет ли разрешён доступ к объекту, если запрос проходит проверку IAM, подпадает под правило Deny политики доступа и разрешается ACL?
    Decision:
    -нет. Доступ дается только при условии, что нет ни одного правила, которое бы запрещало доступ
    Task:
    После приостановки версионирования бакета один из загруженных в него объектов перезаписан. Какое значение version_id будет у новой версии объекта?
    Decision:
    -null
    Task:
    Какой класс хранилища по умолчанию нужно выбрать для бакета, в котором вы размещаете файлы веб-сайта?
    Decision:
    -Стандартное
    Task:
    Вы хотите поместить в облако БД, которая обслуживает работающий микросервис с постоянной, но не очень высокой нагрузкой. Какой тип ВМ стоит выбрать при создании кластера?
    Decision:
    -standard
    Task:
    Можно ли для экономии использовать при создании кластера хосты с уровнем производительности vCPU меньше 5%?
    Decision:
    -Нет
    Task:
    Какие функции выполняют сервисы управляемых БД?
    Decision:
    -Обновление ПО
    -Мониторинг хостов и БД
    -Резервное копирование БД
    -Репликация данных
    Task:
    Что делать, если показатель загрузки CPU почти достиг максимального уровня?
    Decision:
    -Увеличить число хостов в кластере и распределить нагрузку между ними
    -Проверить в логах, есть ли медленные запросы к БД, и оптимизировать их
    -Выбрать другой класс хоста
    Task:
    Средняя скорость восстановления из резервной копии — 10 МБ/с на каждое ядро vCPU хоста БД. Вы восстанавливаете из резервной копии БД размером 1,2 ГБ в кластер с одним хостом класса s2.small. Сколько примерно времени займёт восстановление?
    Decision:
    -0,5 минуты
    Task:
    Синхронная репликация:
    Decision:
    -медленнее асинхронной
    -надёжнее для сохранения данных
    Task:
    Какой тип трансфера выбрать, чтобы добавлять в БД приёмника только текущие изменения БД источника?
    Decision:
    -Репликация
    Task:
    Модель данных в MongoDB называется:
    Decision:
    -документо-ориентированной
    Task:
    Шардирование позволяет изолировать:
    Decision:
    -отказы хостов
    Task:
    Шард — это:
    Decision:
    -часть БД, хранящаяся на хосте
    Task:
    Выберите правильные утверждения. Ключ шардирования:
    Decision:
    -может быть причиной возникновения горячих точек
    -говорит БД о том, где найти или куда записать фрагмент данных
    -влияет на скорость чтения и записи данных
    Task:
    Вы используете для своего приложения управляемую базу данных MongoDB. Кластер состоит из одного хоста s2.large (12 vCPU, 48 ГБ) с быстрым сетевым хранилищем объёмом 50 ГБ.
    С учётом растущей нагрузки на кластер и далеко идущих планов по развитию приложения вы решаете разбить БД на два шарда, понизив при этом класс хостов до s2.medium (8 vCPU, 32 ГБ) и увеличив объём хранилища до 100 ГБ, а также сделать БД отказоустойчивой.
    Сколько хостов в кластере вам для этого понадобится?
    Decision:
    -6 (два хоста для шардов и еще по две реплики на каждый шард)
    Task:
    Сколько примерно времени займет восстановление кластера размером 10 ГБ из резервной копии?
    Decision:
    -17 минут
    Task:
    Какие особенности ClickHouse ускоряют работу с аналитическими запросами?
    Decision:
    -Поддержка приближенных вычислений
    -Шардирование БД
    -Распараллеливание выполнения запросов
    Task:
    Вы планируете поместить БД ClickHouse в облаке на четырех шардах и создаёте кластер с четырьмя хостами. Сколько хостов будет при этом создано? В поле ответа напишите число.
    Decision:
    7
    Task:
    Вы планируете создать кластер ClickHouse. Вы хотели бы минимизировать затраты и полагаете, что для вашей задачи достаточно одного хоста. Для вас важна скорость выполнения запросов, а отказоустойчивость — не очень (при этом вы, естественно, не хотите потерять данные). Какой тип хранилища стоит выбрать при создании кластера?
    Decision:
    -быстрое сетевое
    Task:
    Заходя на сайт Yahoo, посетители видят персонализированную новостную ленту. Алгоритмы компании автоматически категоризируют новостные статьи по мере появления, а также предсказывают, какие новости интересны каждому посетителю. Какую технологию работы с большими данными использует Yahoo?
    Decision:
    -Spark
    Task:
    Какие хосты входят в кластер Data Proc?
    Decision:
    -Master Node
    -Compute Node
    -Data Node
    Task:
    Какие источники данных подойдут для визуализации в DataLens?
    Decision:
    -Сервис AppMetrica
    -Сервис Яндекс.Метрика
    -Базы данных
    -Плоские файлы
    Task:
    Среди доступных в DataLens типов чартов есть географическая карта. Она позволяет создавать визуализации в виде точечной, фоновой и тепловой карты. На тепловой карте показаны:
    Decision:
    -географические точки с разной интенсивностью закрашивания
    Task:
    Выберите правильное утверждение. Вычисляемое поле может быть:
    Decision:
    -и полем-измерением, и полем-показателем
    Task:
    Выберите поля датасета, которые больше всего похожи на показатели и требуют указать правило агрегации:
    Decision:
    -Продажа без скидки, р. потребуется сделать два показателя по продажам с правилом агрегации SUM().
    -Продажа со скидкой, р. потребуется сделать два показателя по продажам с правилом агрегации SUM().
    Task:
    Представьте, что с помощью этого датасета вы хотите определить число потенциальных участников планирующейся рекламной акции «Разнообразное питание». Для этого нужно понять, сколько покупателей в прошлом месяце приобретали много разных продуктов. Дополнительный показатель из какого измерения понадобится определить?
    Decision:
    -Название продукта. для этого потребуется определить показатель «Количество уникальных продуктов» как Count Distinct (Название продукта).
    Task:
    Выберите правильные утверждения. Отказоустойчивая система:
    Decision:
    -имеет избыточность ресурсов
    -способна работать даже в случае отказа на уровне дата-центра
    -продолжает работать при выходе из строя одного из ее компонентов
    Task:
    Управляемые БД снимают с пользователя большую часть задач по обслуживанию системы. В частности, они обеспечивают:
    Decision:
    -мониторинг работы хостов и БД
    -обновление ПО
    -репликацию данных между хостами кластера
    -резервное копирование БД
    Task:
    Вы создаете кластер управляемой БД в облаке и хотите, чтобы ваша БД могла выдержать высокую нагрузку. Какой тип хранилища данных вам следует выбрать?
    Decision:
    -local-ssd
    Task:
    Объектное хранилище может использоваться для хранения:
    Decision:
    -очень больших файлов размером в несколько терабайт
    -статических веб-сайтов
    -резервной копии БД
    Task:
    Шардирование позволяет:
    Decision:
    -распределить нагрузку на БД и повысить ее производительность
    -ускорить выполнение запросов к БД
    -повысить доступность БД
    Task:
    Для OLAP-сценариев работы с БД характерно, что:
    Decision:
    -большинство запросов — это операции чтения
    -данные добавляются в БД большими порциями
    -на выходе данные фильтруют или агрегируют
    Task:
    Технологии работы с большими данными основаны на необходимости:
    Decision:
    -горизонтальной масштабируемости используемых вычислительных ресурсов
    -обеспечения отказоустойчивости систем
    -распределенного хранения и обработки данных
    Task:
    В датасете, который вы используете для визуализации данных в DataLens, есть такие поля: «Название производителя», «Категория товара», «Бренд», «Год выпуска». Эти поля, как правило, являются:
    Decision:
    -измерениями
    Task:
    Вы разрабатываете приложение, для хранения данных в котором используется кластер управляемой БД MySQL c двумя хостами типа s2.large и быстрым локальным хранилищем размером 100 ГБ. Завершив очередной этап тестирования приложения, вы остановили кластер. За какие ресурсы будет продолжать начисляться оплата?
    Decision:
    -хосты БД
    -хранилище данных
    -хранение резервных копий
    Task:
    С помощью политик доступа к объектному хранилищу вы можете:
    Decision:
    -настроить дополнительные условия действий с бакетами и объектами
    Task:
    Утилита yc нужна, чтобы...
    Decision:
    -управлять сервисами Yandex Cloud
    Task:
    Как можно задавать параметры выполнения команд в yc?
    Decision:
    -Оба варианта верны
    Task:
    Packer нужен, чтобы ...
    Decision:
    -создавать образы ВМ для определенной платформы
    Task:
    Секция source в конфигурации служит для описания ...
    Decision:
    -Платформы, с которой может использоваться образ. В конфигурации может быть только одна секция source
    Task:
    Переменные в Terraform нужны, чтобы...
    Decision:
    -задавать значения, которые могут различаться в разных инсталляциях одной спецификации
    Task:
    Что делает команда terraform plan?
    Decision:
    -Проверяет правильность спецификации и формирует список элементов инфраструктуры, которые будут созданы, изменены или удалены
    Task:
    Контейнеризация эффективна, потому что:
    Decision:
    -оптимально использует ресурсы системы
    Task:
    С помощью Docker можно создавать образы ...
    Decision:
    -контейнеров
    Task:
    Образы, созданные в Docker, можно хранить ...
    Decision:
    -в публичном или приватном хранилище образов, в том числе в Docker Hub и в Yandex Container Registry
    Task:
    Что такое репозиторий Yandex Container Registry?
    Decision:
    -Набор Docker-образов с одинаковыми именами
    Task:
    Что такое политика автоматического удаления?
    Decision:
    -Набор правил для автоматического удаления Docker-образов из Yandex Container Registry
    Task:
    Что такое Yandex Managed Kubernetes?
    Decision:
    -Сервис для управления контейнеризованными приложениями с помощью Kubernetes в инфраструктуре Yandex Cloud
    Task:
    Kubernetes нужен, чтобы ...
    Decision:
    -управлять большим количеством запущенных контейнеров
    -автоматизировать развёртывание
    -масштабировать приложения
    Task:
    Чем отличаются сценарии автомасштабирования Horizontal Pod Autoscaler и Cluster Autoscaler?
    Decision:
    -Оба ответа верны
    Task:
    Кому могут предоставляться роли в Yandex Managed Kubernetes? Отметьте все подходящие варианты.
    Decision:
    -пользователям
    -сервисам
    -сервисным аккаунтам
    Task:
    Квота в Yandex Managed Kubernetes — это количество ...
    Decision:
    -ресурсов, которое пользователь с определённой ролью может употребить
    Task:
    Отказоустойчивость — это:
    Decision:
    -Способность системы продолжить работу при неработоспособности одного или нескольких компонентов
    Task:
    Точка отказа — это:
    Decision:
    -Компонент системы, при выведении из строя которого система перестаёт работать корректно
    Task:
    Что такое метрика?
    Decision:
    -Количественная характеристика системы, меняющаяся во времени.
    Task:
    Что такое сервисный дашборд?
    Decision:
    -Дашборд, отражающий текущее состояние какого-то сервиса и доступный без дополнительных настроек, «из коробки».
    Task:
    Когда система мониторинга отправляет алерт администратору?
    Decision:
    -алерт отправляется при достижении порога предупреждения
    -алерт отправляется при достижении критического порога
    -алерт отправляется только если среднее значение за период достигает порога предупреждения или критического порога
    Task:
    Интерфейс командной строки Yandex.Cloud (CLI) — это:
    Decision:
    -бесплатная утилита, которую можно установить на компьютер пользователя и использовать для управления ресурсами в Yandex Cloud. Использование CLI не тарифицируется
    Task:
    В чём заключаются преимущества подхода Infrastructure as Code (можно отметить несколько пунктов)?
    Decision:
    -изменения, вносимые в спецификации, легко проконтролировать
    -для спецификаций можно хранить историю версий и при необходимости можно быстро извлечь и использовать нужную версию
    -описания отдельных объектов IT-инфраструктуры можно многократно использовать в разных инсталляциях, это ускоряет подготовку к развёртыванию и повышает надёжность за счет использования проверенных решений
    Task:
    Выберите правильное утверждение:
    Decision:
    -Packer создаёт образ виртуальной машины, готовый к использованию на конкретной облачной платформепеременных, задаваемых при создании виртуальной машины из образа
    Task:
    Выберите правильное утверждение:
    Decision:
    -при развёртывании облачной инфраструктуры с помощью Terraform создаются новые ресурсы, а ресурсы, уже существующие в облаке, могут быть обновлены или удалены
    Task:
    Контейнеризация отличается от виртуализации тем, что:
    Decision:
    -контейнеры используют меньше ресурсов, чем виртуальные машины: несколько контейнеров могут использовать одну хостовую ОС, тогда как для каждой виртуальной машины нужна отдельная ОС
    Task:
    Выберите верное утверждение:
    Decision:
    -Docker создаёт образы контейнеров на основе готовых образов с определёнными операционными системами
    Task:
    Где применяются кластеры Kubernetes:
    Decision:
    -кластеры используются для управления даже небольшими системами, развёрнутыми в облаке
    Task:
    Что такое проактивный мониторинг (можно отметить несколько пунктов)
    Decision:
    -автоматический мониторинг, который отправляет уведомления администратору, когда параметры приближаются к критическим значениям
    -автоматический мониторинг, который при возникновении проблем включает систему аварийного восстановления
    Task:
    Отметьте признаки отказоустойчивой архитектуры (можно отметить несколько пунктов):
    Decision:
    -использование компонентов одного вендора, которые хорошо интегрируются между собой
    Task:
    Для чего нужны алерты:
    Decision:
    -для оповещения администраторов о возникновении критической ситуации в системе
    -для оповещения администраторов о приближающейся критической ситуации в системе
    Task:
    Отметьте ключевые особенности разработки приложений при использовании serverless-сервисов:
    Decision:
    -Нет необходимости создавать и обслуживать виртуальные машины
    -Нет необходимости отслеживать утилизацию оборудования и добавлять или удалять ресурсы, чтобы инфраструктура обходилась дешевле и справлялась с повышенной нагрузкой
    -Можно писать приложения для Cloud Functions на любом удобном для вас языке программирования, для которого есть среда исполнения
    -Вы сможете написать и запустить приложение в интернете, обладая меньшими знаниями о серверах и операционных системах, чем при использовании виртуальных машин
    Task:
    Сервис Yandex Cloud Functions относится к модели:
    Decision:
    -FaaS
    Task:
    Как определить, сколько серверов и какой мощности нужно арендовать под сервер БД для моего приложения?
    Decision:
    -Это не нужно делать, для создания serverless БД Yandex Database нужно только указать её имя.
    Task:
    Что такое Serverless?
    Decision:
    -Клиент сервиса не занимается конфигурацией, администрированием или управлением ресурсами сервиса
    Task:
    К какому типу сервисов относятся бессерверные вычисления?
    Decision:
    -FaaS
    Task:
    Какие ограничения есть у serverless-функций?
    Decision:
    -Функции не хранят своего состояния
    -Функция не может быть бесконечной
    Task:
    На что похожа функция в терминологии Yandex Cloud Functions?
    Decision:
    -На контейнер
    Task:
    Какими способами можно добавить код функции (укажите все подходящие)?
    Decision:
    -В редакторе кода консоли управления
    -Загрузив ZIP-архив
    -Указав объект в Yandex Cloud Storage
    Task:
    Как можно вызвать функцию сервиса Yandex Cloud Functions?
    Decision:
    -Используя HTTPS-запрос
    Task:
    Какой среды исполнения НЕТ в сервисе Yandex Cloud Functions?
    Decision:
    -C++
    Task:
    Из каких параметров состоит функция в Yandex Cloud Functions?
    Decision:
    -Имя
    -Теги
    -Среда выполнения
    -Описание
    Task:
    Указать точку входа — обязательное требование для создания функции. Какие из имён точек входа соответствуют требованиям?
    Decision:
    -alice-skill.myFunction
    -alice_skill.myFunction
    Task:
    Зачем нужны триггеры в сервисе Yandex Cloud Functions?
    Decision:
    -Чтобы автоматически вызывать функцию по тем или иным событиям
    Task:
    Какие метрики можно отслеживать в мониторинге сервиса?
    Decision:
    -Errors — количество ошибок при выполнении
    Task:
    Код Cloud Functions выполняется:
    Decision:
    -На виртуальных машинах, но они скрыты от пользователя высокоуровневой абстракцией.
    Task:
    Для чего нужны триггеры:
    Decision
    -Чтобы не писать сложную систему создания и отправки HTTPS-запросов.
    -Чтобы автоматически вызывать функцию по тем или иным событиям.
    -Чтобы получить простую интеграцию с другими сервисами Yandex Cloud
    Task:
    Что из себя представляет сервис Yandex API Gateway?
    Decision:
    -Прокси-сервер
    Task:
    Что из нижеперечисленного НЕ УМЕЕТ делать Yandex API Gateway?
    Decision:
    -Отправлять почтовые сообщения
    Task:
    Какими способами Yandex API Gateway может обработать запрос?
    Decision:
    -Обратиться к Yandex Object Storage
    -Вызвать функцию из Yandex Cloud Functions
    -Автоматически сформулировать статический ответ
    -Отправить запрос на другой URL
    Task:
    Что нужно сделать, чтобы настроить сервис?
    Decision:
    -Написать спецификацию
    -Создать экземпляр API-шлюза
    Task:
    С какого параметра должна начинаться спецификация сервиса?
    Decision:
    -openapi
    Task:
    Что должен сделать сервис при том или ином типе пути?
    Decision:
    dummy - Выдать статический ответ
    cloud-functions - Вызвать функцию сервиса Yandex Cloud Functions
    http - Отправить http-запрос
    object-storage - Обратиться к сервису Yandex Object Storage
    Task:
    Какой код ошибки выдаёт функция, если не указан секрет?
    Decision:
    -401
    Task:
    Среди способов обработки запросов API-шлюзом есть следующие:
    Decision:
    -Статический ответ
    -Динамический ответ
    -Вызов Cloud Function
    -Обращение в Object Storage
    -Перенаправление запроса на другой URL
    Task:
    Для работы с API Gateway можно использовать:
    Decision:
    -Консоль управления
    -Yandex Cloud REST API
    Task:
    Спецификацию шлюза можно написать на основе спецификации:
    Decision:
    -OpenAPI 3.0
    Task:
    При работе в serverless-режиме для доступа к данным YDB вы можете использовать:
    Decision:
    -YQL-запросы через консоль управления и YDB CLI
    -YQL-запросы через консоль управления, YDB CLI, YDB API
    -Document API и cURL (для документных таблиц)
    -Document API через cURL, AWS CLI, AWS SDK (для документных таблиц)
    Task:
    Что такое RU для Serverless YDB?
    Decision:
    -Request Unit — универсальная единица измерения стоимости исполнения запроса YDB Serverless, к которой привязываются разные варианты тарификации
    Task:
    Что означает совместимость с AWS DynamoDB API? Выберите все правильные варианты:
    Decision:
    -Доступность документных таблиц
    -Доступность совместимого API для работы с документными таблицами
    -Возможность использовать AWS CLI и AWS SDK для создания приложений
    Task:
    Как называется тип очередей, который сохраняет последовательность элементов?
    Decision:
    -FIFO
    Task:
    В каких задачах полезны очереди?
    Decision:
    -Передачи данных
    Task:
    Сколько поставщиков и потребителей может быть у очереди?
    Decision:
    -В теории — бесконечное количество. На практике — зависит от конкретной очереди
    Task:
    Что происходит с сообщением, когда получатель начал обрабатывать сообщение?
    Decision:
    -Остаётся в очереди, но скрывается от других
    Task:
    Очереди FIFO в Yandex Message Queue поддерживают:
    Decision:
    -Любое количество поставщиков и потребителей
    Task:
    Стандартные очереди в Yandex Message Queue:
    Decision:
    -Пытаются сохранять порядок полученных сообщений при передаче поставщикам, но не гарантируют его
    Task:
    Какие ключевые понятия бессерверных решений выделяются их поставщиками?
    Decision:
    -Единого определения нет, но чаще всего упоминают контейнеризацию, динамическую оркестрацию, микросервисы. Впрочем, спорить на эту тему можно бесконечно.
    Task:
    За что разработчик платит при использовании Cloud Functions? Выберите все правильные ответы.
    Decision:
    -Количество вызовов функции
    -Использованные вычислительные ресурсы
    -Исходящий трафик
    Task:
    Какие концептуальные ограничения есть у сервиса? Выберите все правильные ответы.
    Decision:
    -Функции не могут бесконечно выполнять какую-то задачу
    -При вызове у функции нет информации о результате прошлых запусков.
    Task:
    Какие методы допустимо использовать в спецификации API-шлюза?
    Decision:
    -Можно использовать все HTTP-методы.
    Task:
    Можно ли использовать в спецификации свой домен?
    Decision:
    -Да, но эту функцию надо отдельно подключить, а затем подтвердить права на домен.
    Task:
    Ключевые отличия serverless-режима YDB от managed-режима:
    Decision:
    -Оплата идёт за фактические запросы к базе данных, а не за резервирование мощностей
    -Можно перенести своё приложение из AWS
    Task:
    Что учитывается при тарификации YDB в serverless-режиме:
    Decision:
    -стоимость использования CPU;
    -хранение данных;
    -ввод и вывод данных.
    Task:
    Для работы с документными таблицами в YDB вы можете использовать:
    Decision:
    -HTTP API;
    -gRPC;
    -AWS CLI;
    -AWS SDK.
    Task:
    Сказывается ли тип очереди на производительности?
    Decision:
    -Да, стандартные очереди разбираются быстрее FIFO.
    Task:
    Какую функцию выполняет таймаут видимости?
    Decision:
    -Скрывает сообщение от получателей на заданное пользователем время, чтобы первый забравший его получатель успел завершить обработку.
    Task:
    За какой из элементов обеспечения информационной безопасности всегда отвечает пользователь независимо от модели использования облачной инфраструктуры?
    Decision:
    -Управление правами доступа к ресурсам
    Task:
    Что влияет на необходимый уровень защищённости информации по российскому законодательству:
    Decision:
    -Обрабатываются ли данные сотрудников или внешних пользователей
    -Категория персональных данных
    Task:
    К какой категории персональных данных относится состояние здоровья:
    Decision:
    -Специальные
    Task:
    Какие действия должен выполнять пользователь для реализации третьего уровня защищённости при работе с персональными данными в облаке в соответствии с приказом ФСТЭК России от 18.02.2013 № 21?
    Decision:
    -Настраивать средства аутентификации внутри виртуальных машин
    -Контролировать доступ к виртуальным машинам
    -Обеспечивать антивирусную защиту виртуальных машин
    -Защищать данные от раскрытия и модификации при их передаче через интернет
    -Регистрировать события безопасности
    Task:
    Можно ли авторизоваться без предварительной аутентификации?
    Decision:
    -Можно. Если доступ к ресурсу или объекту открыт для всех пользователей интернета.
    Task:
    Какой тип аккаунтов лучше использовать для сотрудников компании, у которой есть своя система учёта пользователей?
    Decision:
    -Федеративный
    Task:
    Какие типы ролей есть в сервисе IAM Yandex.Cloud?
    Decision:
    -Сервисные
    -Примитивные
    Task:
    Один из типов ролей в IAM называется сервисным, потому что:
    Decision:
    -такие роли даются только на один сервис
    Task:
    Что такое DDoS-атака?
    Decision:
    -Атака типа «Отказ в обслуживании», которая основана на отправке большого числа пакетов TCP SYN или трафика прикладных протоколов
    Task:
    В чём заключается основная идея принципа наименьших привилегий, используемого для обеспечения информационной безопасности инфраструктуры?
    Decision:
    -Каждый элемент должен иметь доступ только к той информации и ресурсам, которые необходимы для их функционирования
    Task:
    Какие типы сертификатов поддерживает Certificate Manager?
    Decision:
    -Пользовательские
    -Let’s Encrypt
    Task:
    Происходит ли автоматическое обновление пользовательских сертификатов с помощью сервиса Certificate Manager?
    Decision:
    -Нет
    Task:
    Каких целей информационной безопасности можно достичь с помощью сервиса KMS?
    Decision:
    -Целостность
    -Конфиденциальность 
    Task:
    Как называется подход, при котором ключ шифрования данных шифруется дополнительным ключом?
    Decision:
    -envelope encryption
    Task:
    Можно ли расшифровать данные с использованием помеченной на удаление версии ключа?
    Decision:
    -Нет
    Task:
    Чтобы назначить роли, необходимые для управления ключами шифрования, используется сервис:
    Decision:
    -IAM
    Task:
    Может ли пользователь работать с ресурсами вашего облака, не имея в нем роли resource-manager.clouds.member?
    Decision:
    -Да, если он имеет доступ только к публичным ресурсам
    Task:
    К привилегированным относятся пользователи, имеющие следующие роли:
    Decision:
    -billing.accounts.owner
    -resource-manager.clouds.owner
    Task:
    Какие правовые документы определяют требования к защите персональных данных?
    Decision:
    -GDPR
    -Федеральный закон №152-ФЗ Российской Федерации
    -приказ ФСТЭК России от 18.02.2013 № 21
    Task:
    Федерация удостоверений позволяет:
    Decision:
    -Предоставить доступ к облаку пользователю, который прошел аутентификацию через поставщика удостоверений
    Task:
    Если ключ шифрования помечен, как запланированный к удалению, то:
    Decision:
    -воспользоваться им для расшифрования нельзя
    Task:
    Какие основные факторы влияют на стоимость ресурсов в Yandex.Cloud?
    Decision:
    -Количество ресурсов
    -Время использования ресурсов
    Task:
    Сколько облаков можно привязать к одному платёжному аккаунту?
    Decision:
    -Любое количество облаков
    Task:
    Вы физическое лицо из Киргизии. Какой тип платёжного аккаунта вы можете открыть?
    Decision:
    -Никакой. Yandex Cloud не работает с физическими лицами — нерезидентами РФ и РК.
    Task:
    Что произойдёт, если баланс лицевого счёта станет нулевым?
    Decision:
    -Начнётся использование кредитного лимита. Когда он будет исчерпан, Yandex Cloud попробует списать деньги с привязанной карты.
    Task:
    Какие бывают способы мониторинга затрат в Yandex.Cloud?
    Decision:
    -Просмотр детализации затрат в консоли
    -DataLens
    -Отгрузка детализации в формате CSV
    Task:
    Группировку по продуктам стоит использовать, если...
    Decision:
    -В облаке несколько продуктов одного сервиса, но с разными конфигурациями
    -Вы хотите узнать подробную детализацию по каждой SKU
    Task:
    В DataLens можно следить за потреблением:
    Decision:
    -По облакам
    -По каталогам
    -По сервисам
    -По ресурсам
    -Конкретной виртуальной машины
    Task:
    В чём преимущество экспорта детализации в CSV-файл?
    Decision:
    -Обработку CSV-файлов можно автоматизировать
    Task:
    Что произойдёт, если бюджет будет превышен?
    Decision:
    -Вы получите уведомление. Больше ничего не случится.
    Task:
    Представьте, что у вас интернет-магазин купальников. Количество покупателей растёт летом и падает зимой. Что лучше всего поможет сэкономить?
    Decision:
    -Instance Groups
    Task:
    В каких случаях стоит использовать ВМ с гарантированной долей vCPU ниже 100%?
    Decision:
    -Для пилотного проекта.
    Task:
    Почему управляемые БД выгодны, даже если у вас есть сотрудники для их администрирования?
    Decision:
    -Так можно освободить сотрудников для работы над продуктами компании, что принесёт больше прибыли.
    -Стоимость управляемых БД значительно меньше зарплат собственных специалистов.
    Task:
    У вас интернет-магазин сантехники. Ассортимент редко меняется, и спрос на такой товар не бывает сезонным. Значит, нагрузку на БД легко спрогнозировать.
    А что, если через полгода вам понадобится больше мощностей, чем вы зарезервировали? Скажем, было 8 CPU, а теперь нужно 12, потому что вы решили расширить бизнес и продавать не только сантехнику, но и керамическую плитку. Как быть?
    Decision:
    Оплатить дополнительные ресурсы можно двумя способами:
    Task:
    От чего зависят затраты в Yandex.Cloud?
    Decision:
    -От количества ресурсов и продолжительности их потребления. Такая модель оплаты называется Pay as you go.
    Task:
    Вы создали две группы виртуальных машин: в первой группе 20 ВМ с 5% vCPU, а во второй — две ВМ с 50% vCPU. Будут ли отличаться затраты на эти группы?
    Task:
    -Да: итоговая стоимость складывается из стоимости всех SKU, каждая из которых тарифицируется по своим правилам.
    Task:
    В последнее время вы не успеваете следить за затратами в облаке, так как загружены техническими вопросами. Бухгалтер может отслеживать и оптимизировать расходы. Но вы боитесь давать ему доступ к облаку: вдруг он что-нибудь там сломает. Как лучше поступить?
    Decision:
    -Предоставить бухгалтеру доступ к платёжному аккаунту облака с ролью admin, а в самом облаке оставить доступ с минимальными привилегиями — resource-manager.clouds.member.
    Task:
    Как узнать потребление одного кластера Managed Service for MySQL?
    Decision:
    -Подключить коннектор биллинга в DataLens, перейти на вкладку Resources и следить за потреблением кластера по его идентификатору.
    Task:
    У вашей компании десять ВМ. Пять из них вы используете для рендеринга видео одного клиента, пять других — для другого. Как автоматически генерировать счета на оплату услуг?
    Decision:
    -Обозначить ВМ метками по принадлежности к клиенту и настроить генерацию счетов на основе CSV-файла.
    Task:
    В каких случаях пригодится функция Бюджеты?
    Decision:
    -Если вы тестируете продукт и не знаете, сколько он может потребить ресурсов. Когда сумма бюджета будет достигнута, вы получите уведомление и сможете решить, продолжать ли тест.
    Task:
    Как экономить на виртуальных машинах?
    Decision:
    -Покупать долю vCPU меньше 100%.
    -Запускать прерываемые машины.
    -Использовать Instance Groups.
    Task:
    В чём преимущество резервирования ресурсов на длительный срок?
    Decision:
    -Цена на ресурсы формируется со скидкой.
    -Цена останется прежней, даже если изменятся тарифы Yandex Cloud.
    -Цена не зависит от колебаний курса рубля.

Windows vs Linux, Interview
  Task:
  Компьютер подключен к интернету с помощью pppoe соединения. Одно из необходимых условий функционирования – автоподключение интернета при запуске ОС. Предложите на ваш взгляд способ решения автозапуска в случае запуска рабочего стола при загрузке.
  Task:
  Прорешать первый том CCNA R&S
  Task:
  Создать образную инфраструктуру с серверами, обеспечить отказоустойчивые каналы между офисами и бекап линиями, потом создать еще два офиса используя Python. Выключить каналы или роутеры или свичи на линиях. Включить Firewall на сервере или рабочем пк с определенными правилами
  Task:
  Как узнать дистрибутив?
  Decision:
  $ cat /etc/*-release
  DISTRIB_ID=Ubuntu
  DISTRIB_RELEASE=20.04
  DISTRIB_CODENAME=focal
  DISTRIB_DESCRIPTION="Ubuntu 20.04.5 LTS"
  NAME="Ubuntu"
  VERSION="20.04.5 LTS (Focal Fossa)"
  ID=ubuntu
  ID_LIKE=debian
  PRETTY_NAME="Ubuntu 20.04.5 LTS"
  VERSION_ID="20.04"
  HOME_URL="https://www.ubuntu.com/"
  SUPPORT_URL="https://help.ubuntu.com/"
  BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
  PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
  VERSION_CODENAME=focal
  UBUNTU_CODENAME=focal
  Source:
  1. https://losst.ru/kak-uznat-versiyu-linux?ysclid=l7mrzpkpk917754519#%D0%A3%D0%B7%D0%BD%D0%B0%D1%82%D1%8C_%D0%B4%D0%B8%D1%81%D1%82%D1%80%D0%B8%D0%B1%D1%83%D1%82%D0%B8%D0%B2
  Task:
  В CentOS/Redhat/fedora нужно перечитать конфиг файл постгресса.
  Decision:
  # systemctl reload postgresql-bla-bla.servisw
  Task:
  Как посмотреть последние логи ос/ядра?
  Task:
  Вытащить последние 1000 строк лога, первые 1200 строк логов
  Decision:
  $ tail -n 1000 /var/log/syslog
  $ head -n 1200 /var/log/syslog
  Task:
  Предложите один или несколько программных средств, с помощью которых можно подготовить образ с ОС для последующей установки с этого носителя. 
  Task:
  посмотреть занятость файловой системы в %, в килограммах
  Decision:
  $ df --output=pcent
  Task:
  оценить объем свободной памяти RAM, раздела подкачки
  Decision:
  Task:
  В чем разница между этими двумя операциями: ls > file.txt и ls >> file.txt?
  Task:
  Что будет являться результатом работы команды cat file1.txt | wc -l?
  Task:
  Команды, которые покажут что у нас есть в составе системы
  посмотрим какие у нас есть модули ядра, которые отвечают за какие то устройства
  Decision:
  - lsmod
  Task:
  смотрим устройства на шине pci. Для получения списка всех подсоединенных к системе устройств PCI вы можете либо обратиться к содержимому файла /proc/bus/pci, либо использовать утилиту lspci - /usr/sbin/lspci (фрагмент вывода которой приведен ниже).
  Decision:
  - lspci
  Task:
  посмотрим все детально
  Decision:
  - lshw
  Task:
  Для получения списка всех устройств usb, соединенных с вашей системой, вам придется прочитать содержимое файла /proc/bus/usb/devices
  Decision:
  - lsusb
  Task:
  лиункс сам может находить устройства, но иногда нужно добавлять устаройства или модули ядра для того чтобы это устройство работало, для этого есть утилиты управления модулями ядра.
  Decision:
  - lsmod
  Task:
  в lsmod увидим e1000, это интернет модуль, который отвечает за сетевую карту, давайте проверим
  Decision:
  - modinfo e1000
  Task:
  в description увидим  название сет карты. удалим его
  Decision:
  - rmmod e1000
  Task:
  теперь пропадет интернет. чтоб вернуть его
  Decision:
  - insmod e1000
      insmod: ERROR: could not load module e1000: No such file or directory
  Task:
  - insmod e1000
      insmod: ERROR: could not load module e1000: No such file or directory
  но на нас будут ругаться так как от него заисят еще другие модули ядра.
  Decision:
  - modprobe e1000
  Task:
  Узнать сколько места занимает на диске:
  Decision:
  du [--max-depth <глубина> -h] <путь>
  du -h ~/
  du –-max-depth 1 -h .
  Task:
  Узнать сколько места занято/свободно во всей системе:
  Decision:
  - df [-h]

English Interview Engineer
	Task:
	admx что это
	Decision:
	Файл с расширением ADMX представляет собой XML-файл на основе параметров групповой политики Windows / Office.
	Файлы ADMX могут либо описывать групповые политики операционной системы (ОС), поставляемые вместе с Windows, либо могут описывать параметры приложений, которые являются отдельными от ОС и обычно могут быть загружены и установлены на компьютере.
	Task:
	Что такое Dns?
	Decision:
	Компьютерная распределённая система для получения информации о доменах. Чаще всего используется для получения IP-адреса по имени хоста, получения информации о маршрутизации почты и/или обслуживающих узлах для протоколов в домене.
	Task:
	как увидеть адрес в mx записи linux
	Decision:
	$ dig @сервер доменное.имя тип записи флаги
	Task:
	типы записей DNS
	Decision:
	A записи могут принимать только IP-адрес в качестве значения,  Вы можете направить один и тот же домен / поддомен на несколько IP-адресов, просто добавив еще одну запись A с тем же именем, но с другим IP-адресом в поле “значение”.
	Запись AAAA (также запись quad-A) указывает адрес IPv6 для данного хоста. Таким образом, он работает так же, как запись A, и разница заключается в типе IP-адреса.
	Записи CNAME (Canonical Name Record - запись канонического имени) используется для создания псевдонима для существующей  A и AAAA записи. При этом в поле со значением заполняется именем домена, которое ранее было связано с IP-адресом в файле. Таким образом, разные адреса могут ссылаться на один и тот же сервер. Например, псевдоним «service.google.ru» может использоваться для указания на существующую A-запись «story.google.ru», где размещен сервис.
	Запись ресурса MX ( Mail Exchange - почтовый обмен)  используется специально для отправки электронной почты и указывает сервер обмена почтой для доменного имени DNS. Эта информация используется протоколом SMTP для маршрутизации электронной почты на соответствующие узлы. Здесь определен один или несколько почтовых серверов, которые принадлежат соответствующему домену. При использовании нескольких почтовых серверов (например, для компенсации сбоя), лучше сразу указать разные уровни приоритета. 
	Запись PTR является аналогом записи A. По сути это обратная запись A, где поле «имя» содержит информацию о IP-адресе, а поле «значение» содержит строку имени хоста. Запись PTR используется для сопоставления IP-адреса с соответствующим именем хоста, обычно используется для определения того, какое имя хоста использует указанный IP-адрес.
	Запись TXT или текстовая запись - это особый тип записи DNS. Он не используется для пересылки трафика, а используется для предоставления информации о домене. TXT может быть создан в любой зоне в виде статической или динамической записи. Поле «имя» и поле «значение» могут быть заполнены чем угодно, как того требует программа или протокол. TXT запись часто используется для подтверждения владение доменом ( например, при добавлении Google-метрики на сайт).
	Запись SRV или служебная запись - это тип DNS-записи, используемой для указания служб. Запись SRV предоставляет информацию о том, какие службы доступны в определенной зоне или домене. Запись SRV имеет формат для поле «имя», где она начинается с имени службы, имени протокола, а затем имени зоны или домена. А поле  «значение» будет содержать несколько сведений, таких как приоритет, вес, номер порта службы и имя хоста, на котором находится служба.
	NS запись - это DNS-запись, основная ее цель связывать домен и хостинг, в ней  содержится список доверенных серверов имен для домена. Для этого нужно добавить в запись NS-сервера, которые предоставляет Ваш текущий хостинг провайдер для той или иной услуги. Минимум может быть два NS-сервера
	SOA запись или Start of Authority - это запись DNS, которая содержит имя сервера, на котором хранится вся информация, касающаяся этой записи. Он включает в себя достоверную информацию, такую как идентификационный номер сервера, ответственный почтовый адрес, основной сервер имен и т. д. Предполагается, что сервер, на который есть ссылка в записи SOA, отвечает за любой процесс в соответствующей записи.
	Task:
	типы записей DNS
	Task:
	Что такое Nslookup
	Decision:
	Утилита для DNS, предоставляющая пользователю интерфейс командной строки для обращения к системе DNS (проще говоря, DNS-клиент). Позволяет задавать различные типы запросов и опрашивать произвольно указываемые сервера.
	Task:
	Что такое объект групповой политики
	Decision:
	Общее название набора файлов, директорий и записей в базе Active Directory (если это не локальный объект), которые хранят ваши настройки и определяют, какие ещё параметры вы можете изменить с помощью групповых политик
	Task:
	Что такое групповая политика
	Decision:
	Набор правил или настроек, в соответствии с которыми производится настройка рабочей среды приёма/передачи
	Task:
	Что такое Брандмауэр
	Decision:
	Брандмауэр, он же фаервол (firewall), он же межсетевой экран — это технологический барьер, который защищает сеть от несанкционированного или нежелательного доступа
	Task:
	В чем разница между curl и Wget?
	Decision:
	curl и Wget – это две наиболее распространенные утилиты для выполнения запросов к серверам из командной строки Linux.
	Wget по умолчанию сохраняет запрашиваемую веб-страницу в системе, в то время как curl отображает ее в выводе терминала, но не сохраняет.
	Task:
	Что делает 10тый raid
    Task:
    При нажатии на кнопку включения компьютера запуск не происходит, светодиод не загорается. Предложите на ваш взгляд способы решения проблемы, которые могут вернуть работоспособное состояние. 
    Task:
    Не тот адрес у принтера Epson WorkForce Pro WF-5690. у него был адрес 169.254... (это смотришь в самом принтере, возле значка wifi). А нужен адрес 10.38.(свой адрес). Поэтому не все компьютеры, которые подключены к принтеру не видят его. И из-за этого выдавало ошибку, что не подключен принтер к компьюетру.
    Decision:
    Нужно поменять айпи адрес. ->С компа заходим в сеть -> ищем наш принтер ->правой кнопкой просмотр веб-стр -> небезопасно -> вводим админский логин и пароль  -> заходим в network/wifi basi-c -> заполняем printer name: EPS5690-31 -> location: 31 (то есть кабинет) -> obtain ipadr: manual  -> ip adr:10.38.(свой адрес) (именно на этот адрес мы сейчас меняем)  -> subnet mask:255..(свой адрес)..  -> default gateway:10.38...,  -> DNS sever setting: manual  -> primary dns server:10.77.(свой адрес).  -> secondary dns server:10.77..(свой адрес).  -> dns host name setting: manual  -> dns domain name setting:manual  -> dns domain name: пишем доменное имя -> register the network interface addr to dns:disable  -> proxy serve setting: do not  use  -> ipv6 setting:enable  -> ipv6 privarty extention:disable -> продолжить  -> ок -> перезагрузим принтер ->Теперь должен быть правильный адрес и долно все работать
    Task:
    Компьютер не видит сетевой принтер Kyocera FS-6525 MFP
    Decision:
    Нужно поменять ip-адрес в самом принтере. Вводим админ и пароль, мастер установки, вводим нужный адрес 10.38...., маски - 255.255...., и основной шлюз - 10.38..., ок, перезагружаемся, включаем и выключаем
    Task:
    Sharp AR-6020 был подключен к моноблоку локально через usb. В кабинете появился новый сотрудник, а значит надо подключить новый ноутбук сотрудника к принтеру Sharp AR-6020. Можно подключать через соседнего компа.
    Decision:
    Для этого в ноутбуке откроем любую папку -> ищем через \\ в адресной строке папку нужного компьютера, который подключен к нашему принтеру  ->В нашем случае - ищем моноблок ->И в папке мы должны будем увидеть нужный принтер. -> В моем случае папка была пустая,так как Моноблок ограничивал доступ к нашему принтеру.  ->  в моноблоке зайти в панель управления  -> устройства и принтеры ->свойства нашего принтера ->доступ ->поставить галочки на общий доступ -> И обратно, подходим к нотбуку -> в адресной строке компьюетра \\ -> появится принтер  ->Правой кнопкой мыши и подключаемся -> Все, принтер после этого заработает на двух компьютерах - мононблок и ноутбук.
    Task:
    сбой аппарата со100 (кеосера  fs-3040mfp)
    Decision:
    застряла бумага
    Task:
    Настроить новый принтер Epson WorkForce Pro WF-5690
    Decision:
    включ без кабеля, настраиваем дата и время и язык. подкл кабель, а4, без факса, устанавл дрйвера - soft/epsonwf64, устанвл prtDRV, перезагр, возле часов появится ярлык EPSON, прав кнопка, обновл дрйвера, ок, настройка принтера, прав кнопка, сервис, обвнол ПО, на верх галочки дб, настнавл, 2х галочек больше нету, выход,Сначала делаем на компе своем прошивку через Epson software, обязательно выбираем правильный принтер. обновляем, распечает листовку (2, 3), чтобы узнать какой IP адрес стоит у принтера. Настройки - статус сети - состояние сети - печать (4 лист). IP адреса постоянно меняются, поэтому нужно новый поставить в серверной. был адрес tIp1, general information  9с:АЕ:... Идем в сервер - диспетчер сервера DHCP - резервирование - создать рез-ние - и что еще было ... - идем обратно в наш кабиент - у принтера меняем thost имя, ищем у себя на компе ту сеть - просмотр Web, страницы устройства: adminstrat settle - change - tPassword, contacts add  - name: библиотеки и студенты, адр tIp2\общ папка\библиотека\scan, tIp2\студент\scan 
    Task:
    Как протестировать жесткий диск на ошибки? На всех компах устаовлены Raid. Поэтому в биос надо сменить режим Raid на Ide
    Decision:
    Bios, integer, SATA [Raid], запустить с флешки образ, запустить Victoria, выбрать диск, smart, тестирование, убрать галки в grid, звук, hints, scan, смотреть на повреждения - оранжевый, красный. Если сообщения такого вида:
    Warning! block start at...
    Значит надо менять диск
    Task:
    Как протестировать блок питания?
    Decision:
    Тестер powersupply, 6-пин разъем распиновка
    Task:
    После отключения света и перезагрузки, пищит сервер и появляется такое сообщение на сервере.
    The following VDs are missing: 00. If you proceed (or load the configuration utility), these VDs will be removed from your configuration. If you wish to use them at a later time, they will have to be imported. If you believe these VDs should be present, please power off your system and check your cables to ensure all disks are present. Press any key to continue, or 'C' to load the configuration utility.
    Нажать пробел и зайти в программу C:\ПУТЬКПРОГРАММЕ\MegaRAID Storage Manager\startupui.bat 
    во вкладке \Physical\ видим статус:
    Slot: 7 Unconfigurate Bad 
    Нужно менять на новый диск, сервер в моем случае автоматически сделает rebuild. Но пока новго диска нету, настроим временно кнкфитгурацию программы
    Decision:
    Во вкладке \Logical\Unconfigurate Drivers\ выбрать Change to Unconfigured Good. 
    Во вкладке \Logical\LSI Mega raid выбрать Scan Foreign Configuration и перезагрузиться. Зайти в программу C:\ПУТЬКПРОГРАММЕ\MegaRAID Storage Manager\startupui.bat и посмотреть статусы. Если rebuild - смотреть во вкладке \Dashboard\Drive operations in progress
    Task:
	Один диск в программе megaraid C:\ПУТЬКПРОГРАММЕ\MegaRAID Storage Manager\startupui.bat показывает статус failed.
	Decision:
	Во вкладке Physical выбрать проблемный диск с ошибкой failed, пометить офлайн make drive offline и вернуть обратно в онлайн make drive online
    Task:
    Самый простой способ проверки работы принтера с компьютера пользователя?
    Decision
    +Что-то распечатать, например пробную страницу
    Task:
    Как подключить пользователю с ОС Windows подключить сетевой принтер?
    Decision:
    -По кабелю USB
    -По кабелю Ethernet
    -Через "Панель управления" - "Устройства и принтеры" добавить новый принтер
    -Все варианты правильные
    Task:
    Документы не уходят из очереди печати при отправке на сетевой принтер, в чем может быть проблема?
    Decision:
    -Отсутствует доступ к принтеру по сети
    -Проблема с USB кабелем
    -Принтер выключен, принтер завис
    -Много документов отправлено на печать
    Task:
    Как добавить сетевой принтер на принт-сервер под управлением ОС Windows?
    Decision:
    -Скачать официальное ПО с сайта производителя и следовать инструкции по установке
    -Нужно подключить принтер по USB проводу к серверу, после этого дать на него доступ
    -Добавить запись хоста на DNS-сервере. После установить на принт-сервер локальный принтер с портом TCP/IP
    -Все варианты неправильные