Task:
Установить qemu-kvm.
Decision:
$ egrep -c '(vmx|svm)' /proc/cpuinfo
$ sudo apt install qemu-kvm libvirt-daemon-system virtinst libvirt-clients bridge-utils virt-manager
$ systemctl start libvirtd
$ systemctl enable libvirtd
$ kvm-ok
$ sudo usermod -aG kvm Tuser
$ sudo usermod -aG libvirt Tuser
$ ip link | grep virb
Task:
Установить виртуальную машину в qemu-kvm
Decision:
$ sudo virt-install \
--name thost \
--ram 2048 \
--disk path=/var/lib/libvirt/images/thost.qcow2,size=50 \
--vcpus 2 \
--os-variant ubuntu22.04 \
--network default \
--cdrom /var/lib/libvirt/images/ubuntu-22.04.3-desktop-amd64.iso
$ virt-viewer --connect qemu:///system --wait thost
Source:
https://winitpro.ru/index.php/2020/02/10/virsh-upravlenie-virtualnymi-mashinami-kvm/
https://winitpro.ru/index.php/2020/02/04/ustanovka-zapusk-kvm-v-linux-centos/
https://www.server-world.info/en/note?os=CentOS_Stream_9&p=kvm&f=1
https://www.server-world.info/en/note?os=CentOS_Stream_9&p=initial_conf&f=3
https://www.server-world.info/en/note?os=CentOS_Stream_9&p=kvm&f=2
https://bozza.ru/art-260.html
Task:
How to create snapshots of QEMU/KVM guests
Decision:
$ virsh snapshot-create-as thost snapshot0 --description "update+ssh"
$ virsh snapshot-list thost
Name    Creation Time       State
--------------------------------------------------
snapshot0 2024-03-09 09:46:33 +0800 running
Source:
Creating snapshots with virsh - https://linuxconfig.org/how-to-create-snapshots-of-qemu-kvm-guests
Task:
Установить dbeaver
Decision:
$ wget https://dbeaver.io/files/dbeaver-ce_latest_amd64.deb
$ sudo apt install ./dbeaver-ce_latest_amd64.deb
Task:
Добавить нового пользователя в posgresql, добавить ему пароль и создать новую базу с таблицей
Decision:
# CREATE USER tuser2 WITH PASSWORD 'tpassword2';
# CREATE DATABASE tdb2;
# \c tdb2
# CREATE TABLE ttable3 (
name varchar(80),
location point
);
# \d
    List of relations
Schema | Name | Type | Owner 
--------+--------+-------+-------
public | cities | table | tuser
(1 row)
Source:
Создание таблицы - https://postgrespro.ru/docs/postgrespro/9.5/tutorial-table
Task:
Изменить пароль в базе
Decision:
$ mysql -u root -p
mysql> SELECT user,authentication_string,plugin,host FROM mysql.user;
mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'tP@ssw0rd';
mysql> \q
Task:
Install PostgreSQL, добавить новую учетную запись и перенести базу данных в posgresql
Decision:
$ sudo apt install postgresql postgresql-contrib
$ sudo usermod -aG postgres tuser2
$ sudo -i -u postgres
$ psql
# \q
$ createuser --interactive
Enter name of role to add: tuser2
Shall the new role be a superuser? (y/n) y
$ createdb tdb2
$ exit
$ sudo -i -u tuser2
$ psql -U tuser2 -d tdb2
# \password
# GRANT ALL PRIVILEGES ON DATABASE tdb2 to tuser2;
# GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO "tuser2";
# ALTER DATABASE tdb2 OWNER TO tuser2;
# GRANT pg_read_all_settings TO tuser2;
# \conninfo
# \l+
# SHOW config_file;
...
/etc/postgresql/14/main/postgresql.conf
# \q
$ cat /etc/postgresql/14/main/postgresql.conf
...
#listen_addresses = 'localhost'       # what IP address(es) to listen on;
...
$ sudo vim /etc/postgresql/14/main/postgresql.conf
$ cat /etc/postgresql/14/main/postgresql.conf
...
listen_addresses = 'tip, tip2'       # what IP address(es) to listen on;
...
$ sudo cat /etc/postgresql/14/main/pg_hba.conf
...
# "local" is for Unix domain socket connections only
local all       all                   peer
...
$ sudo vim /etc/postgresql/14/main/pg_hba.conf
$ sudo cat /etc/postgresql/14/main/pg_hba.conf
...
# "local" is for Unix domain socket connections only
host  tdb2   tuser2      tip2/21   md5
local all       all                   peer
...
$ sudo systemctl restart postgresql
$ psql -U tuser2 -d tdb2 -h tip
Source:
How To Install PostgreSQL on Ubuntu 22.04 [Quickstart] - https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-22-04-quickstart
Измените пароль для выбранного пользователя - https://uchet-jkh.ru/i/kak-izmenit-parol-k-baze-dannyx-postgresql/
Grant Role to the non-default user - https://asvignesh.in/how-to-get-the-postgresql-conf-file-location/
Task:
Просмотр занятого места на разделах
Decision:
$ sudo df -h
Filesystem   Size Used Avail Use% Mounted on
tmpfs     196M 1.6M 195M 1% /run
/dev/sda3    49G 31G 16G 67% /
tmpfs     980M   0 980M 0% /dev/shm
tmpfs     5.0M 4.0K 5.0M 1% /run/lock
/dev/sda2   512M 6.1M 506M 2% /boot/efi
tmpfs     196M 76K 196M 1% /run/user/127
tmpfs     196M 64K 196M 1% /run/user/1001
Source:
Просмотр занятого места на разделах командой du - https://winitpro.ru/index.php/2021/02/20/svobodnoe-mesta-na-diske-v-linux/
Task:
Настроить диск с файловой системой exfat.
Decision:
$ sudo apt install exfat-fuse
$ sudo mkfs -t exfat /dev/sdc1
Task:
На физическом сервере критически было мало места на диске. В связи с этим настроил подключение к другому физическому диску для хранилища виртуальных машин и баз данных, а сервер оставил для корректной работы с Веб-сервером на Django.
Decision:
$ lsblk
...
sdc   8:32 0 931,5G 0 disk 
$ sudo fdisk /dev/sdc
...
Команда (m для справки): n
...
Выберите (по умолчанию - p): p
...
$ lsblk
...
sdc   8:32 0 931,5G 0 disk 
└─sdc1 8:33 0 931,5G 0 part 
$ sudo mkfs -t ext4 /dev/sdc1
$ sudo mount /dev/sdc1 /var/lib/libvirt/images/
$ sudo cp -p ubuntu22.04.qcow2 /var/lib/libvirt/images/
$ sudo virt-install \
--name Ubuntu2204 \
--ram 2048 \
--vcpus 2 \
--disk /var/lib/libvirt/images/ubuntu22.04.qcow2,bus=sata \
--import \
--os-variant ubuntu22.04 \
--network default
$ virsh shutdown Ubuntu2204
$ sudo virt-install \
--name Centos9 \
--ram 2048 \
--vcpus 2 \
--disk /var/lib/libvirt/images/Centos_9.img,bus=sata \
--import \
--os-variant rhel9-unknown \
--network default
$ sudo qemu-img info /var/lib/libvirt/images/Kali.qcow2
$ virt-install --os-variant list | grep debian
$ sudo virt-install \
--name Kali \
--ram 2048 \
--vcpus 2 \
--disk /var/lib/libvirt/images/Kali.qcow2,bus=sata \
--import \
--os-variant debian11 \
--network default
$ sudo virt-install \
--name Windows \
--ram 2048 \
--vcpus 2 \
--disk path=/var/lib/libvirt/images/Windows.qcow2,bus=sata \
--import \
--os-variant win10 \
--network default
$ sudo virt-install \
--name Windows12 \
--ram 2048 \
--vcpus 2 \
--disk path=/var/lib/libvirt/images/Windows12.qcow2,bus=sata \
--import \
--os-variant win2k12 \
--network default
$ sudo umount /var/lib/libvirt/images/
$ sudo systemctl stop postgresql
$ sudo -i -u postgres
$ cp -r 14 14.backup
$ ls -l
итого 8
drwxr-xr-x 3 postgres postgres 4096 фев 25 19:33 14
drwxr-xr-x 3 postgres postgres 4096 фев 25 19:57 14.backup
$ sudo mount /dev/sdc1 /var/lib/postgresql/14
$ sudo cp -pr /var/lib/postgresql/14.backup /var/lib/postgresql/14/
$ sudo mv /var/lib/postgresql/14/14.backup /var/lib/postgresql/14/14
$ sudo ls -l /var/lib/postgresql/14
итого 87992628
drwxr-xr-x 3 postgres postgres    4096 фев 25 19:57 14
drwx------ 2 root   root     16384 фев 21 20:50 lost+found
-rw------- 1 tuser   tuser   90104397824 фев 24 19:44 ubuntu22.04.qcow2
$ sudo umount /var/lib/postgresql/14
$ sudo mount /dev/sdc1 /var/lib/postgresql
$ sudo systemctl start postgresql
$ sudo -u tuser psql -d tdb
# \d
    List of relations
Schema | Name | Type | Owner 
--------+--------+-------+-------
public | cities | table | tuser
(1 row)
# CREATE TABLE countries (
  name      varchar(80),
  location    point
);
# exit
$ sudo systemctl stop postgresql
$ sudo umount /var/lib/postgresql
$ sudo systemctl start postgresql
Source:
Import Qcow2 images using virt-install command - https://ostechnix.com/create-a-kvm-virtual-machine-using-qcow2-image-in-linux/
Перенос базы - https://etogeek.dev/posts/move-psql/
копирование файлов с правами и пользователями - https://www.linux.org.ru/forum/general/8186570
Importing a virtual machine image - https://access.redhat.com/documentation/ru-ru/red_hat_enterprise_linux/7/html/virtualization_deployment_and_administration_guide/sect-guest_virtual_machine_installation_overview-creating_guests_with_virt_install
Task:
Установить и настроить SSH в Ubuntu 22.04
Decision:
$ sudo apt update && sudo apt upgrade
$ sudo apt install openssh-server
$ sudo systemctl enable --now ssh
Source:
Как установить и настроить SSH в Ubuntu 22.04 - https://timeweb.cloud/tutorials/ubuntu/kak-ustanovit-i-nastroit-ssh-v-ubuntu-22-04
Task:
Добавьте новый ключ для безопасной авторизации по ssh
Decision:
$ ssh-keygen -t rsa -q -N '' -f ~/.ssh/tkey
$ cat .ssh/tkey.pub 
ssh-rsa ...tuser@tkey
$ ssh-copy-id -i ~/.ssh/tkey.pub tuser@tip
Source:
Создание SSH-ключей - https://beget.com/ru/kb/how-to/ssh/avtomaticheskaya-ssh-avtorizacziya-po-klyuchu#sozdanie-ssh-klyuchey
Task:
Создание пользователя
Decision:
$ cat /etc/passwd | grep tuser
tuser:x:1000:1000:Tuser,,,:/home/tuser:/bin/bash
$ sudo useradd -m -d /home/tuser1 -u 1001 -s /bin/bash Tuser1
$ cat /etc/passwd | grep tuser1
Tuser1:x:1001:1001::/home/tuser1:/bin/bash
$ sudo passwd Tuser1
$ id Tuser1
$ sudo usermod -aG sudo tuser1
Source:
Манипуляции с пользователями - https://www.inp.nsk.su/~bolkhov/teach/inpunix/setup_users.ru.html
Команда useradd - https://losst.pro/kak-sozdat-polzovatelya-linux
Task:
Переименовать пользователя в Linux (также переименовать группу и домашний каталог)
Decision:
$ sudo usermod -l tuser1 Tuser
$ sudo groupmod -n tuser1 Tuser
Source:
Изменить имя пользователя на Linux - https://itsecforu.ru/2020/04/29/%F0%9F%90%A7-%D0%BA%D0%B0%D0%BA-%D0%BF%D0%B5%D1%80%D0%B5%D0%B8%D0%BC%D0%B5%D0%BD%D0%BE%D0%B2%D0%B0%D1%82%D1%8C-%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F-%D0%B2-linux/
Task:
Создать директорию или файл с пробелом в названии
Decision:
$ mkdir /mnt/Program\ Files
Task:
Скопировать файлы с теми же правами
Decision:
$ sudo cp -pr /var/lib/postgresql/14.backup /var/lib/postgresql/14/
Source:
копирование файлов с правами и пользователями - https://www.linux.org.ru/forum/general/8186570
Task:
Общие папки Linux
Decision:
$ sudo mkdir /var/share
$ sudo chmod ugo+rw -R /var/share
Source:
Общие папки в Linux - https://losst.pro/obshhie-papki-linux
Task:
Создать ссылку на директорию tdir1.
Decision:
$ mkdir tdir1
$ mkdir tdir2
$ touch tdir1/tfile1
$ ln -s /home/tuser/tdir1 /home/tuser/tdir2
Task:
Переименовать имя хоста
Decision:
$ hostname
thost1.twc1.net
$ sudo hostname thost.twc1.net
$ cat /etc/hosts
127.0.0.1 thost1.twc1.net
$ sudo vim /etc/hosts
$ cat /etc/hostname
thost1.twc1.net
$ sudo vim /etc/hostname
$ sudo cat /etc/hostname
thost.twc1.net
$ cat /etc/hosts
127.0.0.1 thost.twc1.net
$ sudo reboot
Source:
https://serverspace.ru/support/help/osnovnye-komandy-ufw/
 Task:
Установить vscode.
Decision:
$ wget https://vscode.download.prss.microsoft.com/dbazure/download/stable/903b1e9d8990623e3d7da1df3d33db3e42d80eda/code_1.86.2-1707854558_amd64.deb
$ sudo apt install ./code_1.86.2-1707854558_amd64.deb
Source:
Debian and Ubuntu based distributions - https://code.visualstudio.com/docs/setup/linux
Task:
Миграция виртуальных машин с Qemu-Kvm в VirtualBox
У руководителя уже установлена тестовая система Centos в машине Qemu-Kvm. Наша первая задача скоипровать у него систему 
Decision:
$ sudo virsh list --all
 ID   Имя           Состояние
-------------------------------
 2    Centos9       работает
 -    Alt           выключен
 -    Centos        выключен
 -    Kali          выключен
 -    ubuntu22.04   выключен
 -    Windows       выключен
$ sudo virsh shutdown Centos9
$ sudo virsh domblklist Centos9
 Назначение   Источник
---------------------------------------------------
 vda          /images/Centos9.img
 sda          -
$ rsync -avzP user@tipcentos:/images/Centos9.img Centos/.
$ sudo virsh dumpxml Centos9 > Centos9.xml
$ head Centos9.xml
<domain type='kvm'>
  <name>Centos9</name>
  <uuid>8cdbcba9-a955-4ca1-b75e-ab3145255c8d</uuid>
  <metadata>
    <libosinfo:libosinfo xmlns:libosinfo="http://libosinfo.org/xmlns/libvirt/domain/1.0">
      <libosinfo:os id="http://centos.org/centos-stream/9"/>
    </libosinfo:libosinfo>
  </metadata>
  <memory unit='KiB'>2097152</memory>
  <currentMemory unit='KiB'>2097152</currentMemory>
$ sudo head /etc/libvirt/qemu/Centos9.xml
<!--
WARNING: THIS IS AN AUTO-GENERATED FILE. CHANGES TO IT ARE LIKELY TO BE
OVERWRITTEN AND LOST. Changes to this xml configuration should be made using:
  virsh edit Centos9
or other application using the libvirt API.
-->
<domain type='kvm'>
  <name>Centos9</name>
  <uuid>8cdbcba9-a955-4ca1-b75e-ab3145255c8d</uuid>
$ sudo qemu-img info Centos9.img
image: Centos9.img
file format: qcow2
virtual size: 50 GiB (53687091200 bytes)
disk size: 50 GiB
cluster_size: 65536
Snapshot list:
ID        TAG               VM SIZE                DATE     VM CLOCK     ICOUNT
1         snapshot1             0 B 2023-09-28 13:18:14 00:00:00.000          0
Format specific information:
    compat: 1.1
    compression type: zlib
    lazy refcounts: true
    refcount bits: 16
    corrupt: false
    extended l2: false
Child node '/file':
    filename: Centos9.img
    protocol type: file
    file length: 50 GiB (53695545344 bytes)
    disk size: 50 GiB
$ sudo qemu-img convert Centos9.img tmp.bin -p
$ VBoxManage convertdd tmp.bin virtualbox.vdi
$ VBoxManage modifyvdi virtualbox.vdi compact
Task:
Обновление лицензии DrWeb
Decision:
Администрирование, менеджер лицензии, ОРГАНИЗАЦИЯ, распр-ть ключ на группы и станции, EveryOne,Заменить ключи
Task:
Для подготовки стенда:
1. Необходимо скачать архив по ссылке: courses-shop.zip (Зеркало: courses-shop.zip Яндекс.Диск)
2. Распаковать данный архив и перейти в появившуюся директорию courses-shop-prod в терминальной оболочке вашей ОС. Выполнить команду (при запущенном сервисе docker): docker-compose up -d. По адресу http://localhost:1337 появится приложение лабораторного стенда.
Возможные проблемы:
1. На некоторых компьютерах приложение может долго ожидать подключения к базе данных. Это зависит от мощностей вашего компьютера.
2. По той же причине бот (администратор приложения) может не запуститься, если база данных запускалась дольше 15 секунд. В таком случае вы можете перезагрузить сервис бота из папки приложения после загрузки базы данных командой:
docker-compose restart bot
Необходимо находиться в директории приложения, в одном месте с файлом docker-compose.yml
Проанализируйте защищенность механизмов аутентификации административной панели и проэксплуатируйте найденные уязвимости.
В качестве подтверждения успешной эксплуатации предоставьте флаг (секретную строку в формате 32 букв и цифр) из кода страницы панели администратора.
Вопрос для самопроверки на протяжении работы с данным лабораторным стендом:
Что опасного в этой информационной системе может сделать злоумышленник? Какие риски он мог бы реализовать?
Decision:
$ firefox https://disk.yandex.ru/d/bXfeC1DM4vrUsw
$ unzip Downloads/courses-shop.zip
$ cd courses-shop-prod
$ docker-compose up -d
$ firefox https://portswigger.net/burp/releases/professional-community-2023-9-4?requestededition=community&requestedplatform=
$ chmod ugo+x burpsuite_community_linux_v2023_9_4.sh
$ ./burpsuite_community_linux_v2023_9_4.sh
$ /home/tuser/BurpSuiteCommunity/BurpSuiteCommunity &
$ firefox https://github.com/empty-jack/YAWR/blob/master/brute/passwords/realyBest.txt 
Source:
1. https://portswigger.net/burp/documentation/desktop/getting-started/download-and-install
2. https://losst.pro/zapusk-skripta-sh-v-linux
Task:
Проанализируйте существующие поддомены основного домена компании cyber-ed.ru. Выявите домен, который похож на название домена для задания, и изучите его DNS TXT записи.
В качестве подтверждения успешной эксплуатации предоставьте флаг (секретную строку в формате 32 букв и цифр несвязного текста) из DNS записи типа TXT (Чтобы получить TXT записи для домена, выполните команду nslookup -q=TXT domain.name).
Decision:
$ google-chrome https://crt.sh/?q=cyber-ed.ru
$ nslookup -q=TXT task.cyber-ed.ru
Server:		tip.1
Address:	tip.1#53
Non-authoritative answer:
task.cyber-ed.ru	text = "FLAG=ОТВЕТ"
Authoritative answers can be found from:
Task:
Использование симметричного шифрования.
Давайте зашифруем и расшифруем данные с помощью симметричного метода. Для этого выполним команду gpg с опцией -c, которая сообщает, что нужно использовать симметричный режим шифрования. Далее указываем файл, который необходимо зашифровать. По умолчанию применяется алгоритм CAST5, который можно изменить с помощью опции --cipher-algo. Посмотреть доступные алгоритмы можно в выводе команды gpg --version (строка Cipher:).
Decision:
# vim myfile.txt
# cat myfile.txt
        --------SECRTET!!-------
        ---------=)------------
# ls -l
        -rw-r--r--. 1 root   root     49 апр 15 22:42  myfile.txt
# gpg -c myfile.txt
# ls -l
        -rw-r--r--. 1 root   root     49 апр 15 22:42  myfile.txt
        -rw-r--r--. 1 root   root    103 апр 15 22:44  myfile.txt.gpg
# cat myfile.txt.gpg
        ��%��A���V�O��κQ��S��gj�Vyv��cƒ�]��$[)8�]l��S�w�Z���ȝ���<�n�R��y�`W7'�F�⬚�m���
Task:
У меня есть Другая система Убунту, перенесем туда файл. После передачи файла в удаленную/другую систему его необходимо расшифровать. Для этого в команде gpg с помощью опции -o указываем имя для файла, которое будет после расшифровки, а с помощью опции -d указываем зашифрованный файл, который будем расшифровывать.
Decision:
# ls -l
        -rwxrwx--- 1 linux linux   103 апр 16 05:44  myfile.txt.gpg
# cat myfile.txt.gpg
        ��%��A���V�O��κQ��S��gj�Vyv��cƒ�]��$[)8�]l��S�w�Z���ȝ���<�n�R��y�`W7'�F�⬚�m���
# gpg -o myfile -d myfile.txt.gpg
    gpg: Внимание: небезопасный владелец домашнего каталога '/home/linux/.gnupg'
    gpg: данные зашифрованы алгоритмом AES
    gpg: зашифровано одной фразой-паролем
# ls -l
        -rw-r--r-- 1 root  root     49 апр 16 06:04  myfile
        -rwxrwx--- 1 linux linux   103 апр 16 05:44  myfile.txt.gpg
Task:
Проверим содержимое файла. Как видим, это действительно оригинальный файл с первой машины Centos.
Decision:
# cat myfile
        --------SECRTET!!-------
        ---------=)------------
Task:
Использование асимметричного шифрования начинается с генерации пары ключей — открытого и секретного. Для этого используется команда gpg с опцией --gen-key:
Decision:
# gpg --gen-key
        gpg (GnuPG) 2.2.9; Copyright (C) 2018 Free Software Foundation, Inc.
        This is free software: you are free to change and redistribute it.
        There is NO WARRANTY, to the extent permitted by law.
        gpg: создан каталог '/root/.gnupg'
        gpg: создан щит с ключами '/root/.gnupg/pubring.kbx'
        Замечание: "gpg --full-generate-key" вызывает полнофункциональный диалог создания ключа.
        GnuPG должен составить идентификатор пользователя для идентификации ключа.
        Ваше полное имя: Admin3
        Адрес электронной почты: testAdmin3@mail.ru
        Вы выбрали следующий идентификатор пользователя:
            "Admin3 <testAdmin3@mail.ru>"
        Сменить (N)Имя, (E)Адрес; (O)Принять/(Q)Выход? o
        Необходимо получить много случайных чисел. Желательно, чтобы Вы
        в процессе генерации выполняли какие-то другие действия (печать
        на клавиатуре, движения мыши, обращения к дискам); это даст генератору
        случайных чисел больше возможностей получить достаточное количество энтропии.
        Необходимо получить много случайных чисел. Желательно, чтобы Вы
        в процессе генерации выполняли какие-то другие действия (печать
        на клавиатуре, движения мыши, обращения к дискам); это даст генератору
        случайных чисел больше возможностей получить достаточное количество энтропии.
        gpg: /root/.gnupg/trustdb.gpg: создана таблица доверия
        gpg: ключ 8EAEFED2A8D76C1E помечен как абсолютно доверенный
        gpg: создан каталог '/root/.gnupg/openpgp-revocs.d'
        gpg: сертификат отзыва записан в '/root/.gnupg/openpgp-revocs.d/CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E.rev'.
        открытый и секретный ключи созданы и подписаны.
        pub   rsa2048 2020-04-16 [SC] [   годен до: 2022-04-16]
              CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
        uid                      Admin3 <testAdmin3@mail.ru>
        sub   rsa2048 2020-04-16 [E] [   годен до: 2022-04-16]
Task:
Указываем идентификационный номер для ключа, по которому его можно будет отличить от других. Обычно это имя и e-mail адрес владельца ключа. Не всегда процесс генерации ключа идет гладко, чтобы это исправить нужно еще один консоль открыть и сделать активность в системе. Это для тех у кого консольная система. А если у вас графический интерфейс, можете просто мышкой потыкать. После этого должно пойти процесс генерации. После этого в каталоге ~/.gnupg/ будут созданы соответствующие файлы.
Decision:
ls -liR /usr/
ls -l ~/.gnupg/
Task:
Посмотреть ключи можно командой gpg с опцией --list-keys
Decision:
# gpg --list-keys
        gpg: проверка таблицы доверия
        gpg: marginals needed: 3  completes needed: 1  trust model: pgp
        gpg: глубина: 0  достоверных:   1  подписанных:   0  доверие: 0-, 0q, 0n, 0m, 0f, 1u
        gpg: срок следующей проверки таблицы доверия 2022-04-16
        /root/.gnupg/pubring.kbx
        ------------------------
        pub   rsa2048 2020-04-16 [SC] [   годен до: 2022-04-16]
              CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
        uid         [  абсолютно ] Admin3 <testAdmin3@mail.ru>
        sub   rsa2048 2020-04-16 [E] [   годен до: 2022-04-16]
Task:
Перед использованием вашего публичного ключа другими пользователями его необходимо экспортировать. По умолчанию ключ экспортируется в бинарном формате, что не всегда удобно. С помощью опции --armor мы получим наш публичный ключ на консоль, откуда его можно скопировать и отправить по почте или выложить на свой сайт.
Decision:
# gpg --armor --export Admin3
        -----BEGIN PGP PUBLIC KEY BLOCK-----
        mQENBF6X83gBCACxdea4V0yruICk52BJ4/+i2h7iTLHSBINl4rDFWtFhYYDIjFAs
        BbW3tVT5Pd+vXQyFUD/fedP4n36OY8IrJB44jFGWZysuWYy4+WAQ0gyJh3GbkW6D
        QZ5QFOK3XHcijhK1ejCIWH6qPoVmLuY3KKKqb7Cm8Ufr06mhDO6hNVIPI62/2liv
        ws4g8HYRFqJvif1uhAvPZZUUwIckDnZnxci42wNgsgmVlo9DfXw919Y5M935jySY
        caTk5+yht4DzjwZzFz4cYaNUU1CPudG8rcoWemfiWvtCWwB8RD++chsO+JWizk6l
        PMnqUMq+ZxVIbpBZzPHccW5nLr/MINQ2KxzBABEBAAG0G0FkbWluMyA8dGVzdEFk
        bWluM0BtYWlsLnJ1PokBVAQTAQgAPhYhBM3qKHDgW/OWnvx8oY6u/tKo12weBQJe
        l/N4AhsDBQkDwmcABQsJCAcCBhUKCQgLAgQWAgMBAstrongBAheAAAoJEI6u/tKo12we
        roAIAI/v3/JkkBHDD9QjvHicooo60R52+U+Xdpr5gYnfMUgEPOjHQFwgrhXgvQrT
        Pxf4DMUa1TlbrEgThvOb+y4Q6P22jR7Nc/uy6ZIFsUPWif96kYoyKZX9tlvxXMmV
        IqbSrWdxF6rsEs/CaXKLNRj1bCwb8UPkDODlt1yv/A7Td0mhbKGgISXhZZYMgN6Q
        nrTwZoBZw65cCfGDGGjgGUYZkEZA0Lyke2quTxZjdkq4PHPSThX/eiTjHYgMY95r
        ScJDIMWpnJVeG3wDmWMXwOm+mCZKuRinvUGlyCDkzGDloV0O63FNDKaA1x6wIAyv
        Z8FLXUC0VNI7ZjfDVplUTkH5rHe5AQ0EXpfzeAEIAP6hXCx+24fXfzhOHjb/CVlY
        T7mVDzeWItkQ6gLfoBcidfMLA9pzx6IlchbCzbLGvZEQmpMFilkOGw6Et+2Nw6AG
        RMNRlgZ+PXptlElWTR4mnube5AODBPw+OwUsqogW9V+MSXFA7U6Cia+88jTFE8Zp
        9LJsdNM8vbYgS+X1vTJBLtO1cUQS/8B5ndvKJds5aqC/Lw7JA2UqIU1Eu9BenKKG
        h5NdVbwHwwAiYrYjSr0a/Gl2NPSqo1tfVSDhxkHBe8m+VZt7NffpDMYDdAgfk3At
        8WtuuwMRbVehMRcij8wdSOhVbBXtB5x86biqjKD+7QRM7iPFmIAii6uSsDGTik8A
        EQEAAYkBPAQYAQgAJhYhBM3qKHDgW/OWnvx8oY6u/tKo12weBQJel/N4AhsMBQkD
        wmcAAAoJEI6u/tKo12wevkkIAIL4tg4xRAbL1kDH2u01++3q4dc76JmwV96BuIe0
        O3BdsT8c0zdRRamfRNghI8SHxR42uXg+GnMrNOqOC9FQ7Fpd5Q3+XQxvEjGNrctN
        4YkwjTWQLstrongM8psB7L4fshXK/dEVlm9IGD3Y47+2K3Hrt13Ttt8DQmnTZEjPr3bZ
        29VeUWOqy/UV0ULxKYFqxHuIWmBycW4A3usLm4a0UGm6S6Z/5Yz0xdSIuvXD/2Rc
        CYyxynbLeIxw29LYqLBWATEfJQTkr0jJjkjDSWUd82nSSp9iSdhCQiVN7ytHgbxR
        ms4UCJxlkE2uoZ/VNMKoxFCLWdEsK3mI+f8BtCr2SmQwObY=
        =ooVe
        -----END PGP PUBLIC KEY BLOCK-----
Task:
В удаленной системе импортируем публичный ключ, чтобы мы его могли использовать. Для этого текст публичного ключа сохраняем в текстовый файл и передаем в качестве аргумента команде gpg. вставляем скопированный публичный ключ
Decision:
# vim box-key
# cat box-key
        -----BEGIN PGP PUBLIC KEY BLOCK-----
        mQENBF6X83gBCACxdea4V0yruICk52BJ4/+i2h7iTLHSBINl4rDFWtFhYYDIjFAs
        BbW3tVT5Pd+vXQyFUD/fedP4n36OY8IrJB44jFGWZysuWYy4+WAQ0gyJh3GbkW6D
        QZ5QFOK3XHcijhK1ejCIWH6qPoVmLuY3KKKqb7Cm8Ufr06mhDO6hNVIPI62/2liv
        ws4g8HYRFqJvif1uhAvPZZUUwIckDnZnxci42wNgsgmVlo9DfXw919Y5M935jySY
        caTk5+yht4DzjwZzFz4cYaNUU1CPudG8rcoWemfiWvtCWwB8RD++chsO+JWizk6l
        PMnqUMq+ZxVIbpBZzPHccW5nLr/MINQ2KxzBABEBAAG0G0FkbWluMyA8dGVzdEFk
        bWluM0BtYWlsLnJ1PokBVAQTAQgAPhYhBM3qKHDgW/OWnvx8oY6u/tKo12weBQJe
        l/N4AhsDBQkDwmcABQsJCAcCBhUKCQgLAgQWAgMBAstrongBAheAAAoJEI6u/tKo12we
        roAIAI/v3/JkkBHDD9QjvHicooo60R52+U+Xdpr5gYnfMUgEPOjHQFwgrhXgvQrT
        Pxf4DMUa1TlbrEgThvOb+y4Q6P22jR7Nc/uy6ZIFsUPWif96kYoyKZX9tlvxXMmV
        IqbSrWdxF6rsEs/CaXKLNRj1bCwb8UPkDODlt1yv/A7Td0mhbKGgISXhZZYMgN6Q
        nrTwZoBZw65cCfGDGGjgGUYZkEZA0Lyke2quTxZjdkq4PHPSThX/eiTjHYgMY95r
        ScJDIMWpnJVeG3wDmWMXwOm+mCZKuRinvUGlyCDkzGDloV0O63FNDKaA1x6wIAyv
        Z8FLXUC0VNI7ZjfDVplUTkH5rHe5AQ0EXpfzeAEIAP6hXCx+24fXfzhOHjb/CVlY
        T7mVDzeWItkQ6gLfoBcidfMLA9pzx6IlchbCzbLGvZEQmpMFilkOGw6Et+2Nw6AG
        RMNRlgZ+PXptlElWTR4mnube5AODBPw+OwUsqogW9V+MSXFA7U6Cia+88jTFE8Zp
        9LJsdNM8vbYgS+X1vTJBLtO1cUQS/8B5ndvKJds5aqC/Lw7JA2UqIU1Eu9BenKKG
        h5NdVbwHwwAiYrYjSr0a/Gl2NPSqo1tfVSDhxkHBe8m+VZt7NffpDMYDdAgfk3At
        8WtuuwMRbVehMRcij8wdSOhVbBXtB5x86biqjKD+7QRM7iPFmIAii6uSsDGTik8A
        EQEAAYkBPAQYAQgAJhYhBM3qKHDgW/OWnvx8oY6u/tKo12weBQJel/N4AhsMBQkD
        wmcAAAoJEI6u/tKo12wevkkIAIL4tg4xRAbL1kDH2u01++3q4dc76JmwV96BuIe0
        O3BdsT8c0zdRRamfRNghI8SHxR42uXg+GnMrNOqOC9FQ7Fpd5Q3+XQxvEjGNrctN
        4YkwjTWQLstrongM8psB7L4fshXK/dEVlm9IGD3Y47+2K3Hrt13Ttt8DQmnTZEjPr3bZ
        29VeUWOqy/UV0ULxKYFqxHuIWmBycW4A3usLm4a0UGm6S6Z/5Yz0xdSIuvXD/2Rc
        CYyxynbLeIxw29LYqLBWATEfJQTkr0jJjkjDSWUd82nSSp9iSdhCQiVN7ytHgbxR
        ms4UCJxlkE2uoZ/VNMKoxFCLWdEsK3mI+f8BtCr2SmQwObY=
        =ooVe
        -----END PGP PUBLIC KEY BLOCK-----
# ls -l
        -rw-r--r-- 1 root  root   1753 апр 16 09:02  box-key
# gpg --gen-key
        gpg: Внимание: небезопасный владелец домашнего каталога '/home/linux/.gnupg'
        gpg (GnuPG) 2.2.4; Copyright (C) 2017 Free Software Foundation, Inc.
        This is free software: you are free to change and redistribute it.
        There is NO WARRANTY, to the extent permitted by law.
        Замечание: "gpg --full-generate-key" вызывает полнофункциональный диалог создания ключа.
        GnuPG должен составить идентификатор пользователя для идентификации ключа.
        Ваше полное имя: Client1
        Адрес электронной почты: testClient1@mail.ru
        Вы выбрали следующий идентификатор пользователя:
            "Client1 <testClient1@mail.ru>"
        Сменить (N)Имя, (E)Адрес; (O)Принять/(Q)Выход? o
        Необходимо получить много случайных чисел. Желательно, чтобы Вы
        в процессе генерации выполняли какие-то другие действия (печать
        на клавиатуре, движения мыши, обращения к дискам); это даст генератору
        случайных чисел больше возможностей получить достаточное количество энтропии.
        Необходимо получить много случайных чисел. Желательно, чтобы Вы
        в процессе генерации выполняли какие-то другие действия (печать
        на клавиатуре, движения мыши, обращения к дискам); это даст генератору
        случайных чисел больше возможностей получить достаточное количество энтропии.
        gpg: ключ 05A2E96C7147C8B8 помечен как абсолютно доверенный
        gpg: создан каталог '/home/linux/.gnupg/openpgp-revocs.d'
        gpg: сертификат отзыва записан в '/home/linux/.gnupg/openpgp-revocs.d/C0A7FE019BB0D430C465CBCA05A2E96C7147C8B8.rev'.
        открытый и секретный ключи созданы и подписаны.
        pub   rsa3072 2020-04-16 [SC] [годен до: 2022-04-16]
              C0A7FE019BB0D430C465CBCA05A2E96C7147C8B8
        uid                      Client1 <testClient1@mail.ru>
        sub   rsa3072 2020-04-16 [E] [годен до: 2022-04-16]
# gpg --import box-key
        gpg: Внимание: небезопасный владелец домашнего каталога '/home/linux/.gnupg'
        gpg: ключ 8EAEFED2A8D76C1E: импортирован открытый ключ "Admin3 <testAdmin3@mail.ru>"
        gpg: Всего обработано: 1
        gpg:               импортировано: 1
Task:
После импорта можно убедиться, что ключ действительно был импортирован. должен быть Dmitry и Eugeny. Для этого используется команда gpg --list-keys. A После импорта ключа его необходимо активировать, а для этого необходимо перейти в режим редактирования этого ключа. Вы попадете в специальный интерфейс.
Decision:
# gpg --list-keys
        gpg: Внимание: небезопасный владелец домашнего каталога '/home/linux/.gnupg'
        gpg: проверка таблицы доверия
        gpg: marginals needed: 3  completes needed: 1  trust model: pgp
        gpg: глубина: 0  достоверных:   1  подписанных:   0  доверие: 0-, 0q, 0n, 0m, 0f, 1u
        gpg: срок следующей проверки таблицы доверия 2022-04-16
        /home/linux/.gnupg/pubring.kbx
        ------------------------------
        pub   rsa3072 2020-04-16 [SC] [годен до: 2022-04-16]
              C0A7FE019BB0D430C465CBCA05A2E96C7147C8B8
        uid         [  абсолютно ] Client1 <testClient1@mail.ru>
        sub   rsa3072 2020-04-16 [E] [годен до: 2022-04-16]
        pub   rsa2048 2020-04-16 [SC] [годен до: 2022-04-16]
              CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
        uid         [ неизвестно ] Admin3 <testAdmin3@mail.ru>
        sub   rsa2048 2020-04-16 [E] [годен до: 2022-04-16]
# gpg --edit-key Admin3
        gpg: Внимание: небезопасный владелец домашнего каталога '/home/linux/.gnupg'
        gpg (GnuPG) 2.2.4; Copyright (C) 2017 Free Software Foundation, Inc.
        This is free software: you are free to change and redistribute it.
        There is NO WARRANTY, to the extent permitted by law.
        pub  rsa2048/8EAEFED2A8D76C1E
             создан: 2020-04-16  годен до: 2022-04-16  назначение: SC  
             доверие: неизвестно достоверность: неизвестно
        sub  rsa2048/764375B485FCFEAF
             создан: 2020-04-16  годен до: 2022-04-16  назначение: E   
        [ неизвестно ] (1). Admin3 <testAdmin3@mail.ru>
gpg> help
Task:
Для начала нужно вывести отпечаток ключа и сравнить его с отпечатком ключа из целевой системы. Можно позвонить к пользователю, попросить чтоб он сообщил отпечаток ключа и сравнить по телефону. F379 B9FC CC0E 825B 476E  E68B 6610 EC5A D37E 27AC - отпечаток ключа пользователя Eugeny. Если они совпадают, то все нормально, ключ можно верифицировать.
Decision:
gpg> fpr
        pub   rsa2048/8EAEFED2A8D76C1E 2020-04-16 Admin3 <testAdmin3@mail.ru>
         Отпечаток первичного ключа: CDEA 2870 E05B F396 9EFC  7CA1 8EAE FED2 A8D7 6C1E
gpg> sign
        pub  rsa2048/8EAEFED2A8D76C1E
             создан: 2020-04-16  годен до: 2022-04-16  назначение: SC  
             доверие: неизвестно достоверность: неизвестно
         Отпечаток первичного ключа: CDEA 2870 E05B F396 9EFC  7CA1 8EAE FED2 A8D7 6C1E
             Admin3 <testAdmin3@mail.ru>
        Срок действия данного ключа истекает 2022-04-16.
        Вы уверены, что хотите подписать этот ключ
        своим ключом "Client1 <testClient1@mail.ru>" (05A2E96C7147C8B8)?
        Действительно подписать? (y/N) y
gpg> check
Task:
На другом компьютере нужно будет проделать то же самое. Единственное отличие — имя ключа будет другим. получатель публикует ключ, копирует его.
Decision:
# gpg --armor --export Client1
        gpg: Внимание: небезопасный владелец домашнего каталога '/home/linux/.gnupg'
        -----BEGIN PGP PUBLIC KEY BLOCK-----
        mQGNBF6X9VwBDADIWL7gvO1KUpGLzzBewGbkyaBJGEhO3dMAtrGvP1xRcWXRgphK
        AJfVu1t4wIjfWhumv1jo6uE9phk9BHQkqmzCVlPdEOSYsuyP6jNkWQnuc4sNAIqA
        7bKMH9nccojJa7Ba67qx7Kp4jtzXRrdswr8h+ilimwZjpsKSasNZfAIE0XoBUyI+
        EZeEl8SPRyTe09R4kRLcgQgDhrTyUeU9Q2xaok6zeEl39HhivXibSu+/a3DzKOXV
        Q0gdrQZqciAUfxsd0ZNK8SSGWlNt18JMC/uCKFTqsLtaRo/oGMeZTltZzYBXoF5G
        yKakOlAnYKPF6T6RestT8lVOTNsRYfWxSOZFYKkD3gyq9AK6+rOG2ROUAQObAnJg
        DafERktkQQvDW3SB7VkQzJAy0OicaDSlFBdo43snBxAngWNZ/HXYLmw2Zoba4VGv
        /6iJ1AjaDNwu+9WkdNJ6KPQEb932R8wi0savVcfXAw/HNtIgpXT1zPlq3A0UaPpQ
        bW0ZFeAA7gvzDqsAEQEAAbQdQ2xpZW50MSA8dGVzdENsaWVudDFAbWFpbC5ydT6J
        AdQEEwEKAD4WIQTAp/4Bm7DUMMRly8oFoulscUfIuAUCXpf1XAIbAwUJA8JnAAUL
        CQgHAgYVCgkICwIEFgIDAQIeAQIXgAAKCRAFoulscUfIuLU2DACpir1O1XD8AlkR
        6DW+lQL0nJpVAIUo8z664gg0l4raU/EQqp//mxEdRR2jSTRbVj9YgPqqr34AIWqp
        FW7GL6erKpaP33UrKPcDUfZzf3a1t57+0GdulfoPAjxWpmqf11qjaKsJOHEqT2VE
        GvsumaqUvwUfvIfXchQgqpFDaxICk0YbAIub2T0nU49IcMxsF9Exsam3N2VUinlS
        6EPhuRYsbEUH9uTp29BHE8FQDjM4zyQS3nf3HX42snYGeexCx6KiR2MhCuv7VRS4
        VtmfknLv9zJq5z/NbsFSRse3xpVsaT4TdPIC73Dog92wmpwArYScaVy70vI2u78V
        rRDodxp17INMvTY42q5vJqwxgip792bkWGk6w1P/dvOBxJHcOWQa8P346pJOgdcW
        10vIle7bZQ77sWdtBOjpFxmyRo6QvaXlSaWKpoy/qHGX4/FM4LIn5ugVRd3YdBwV
        tJG/rCkduP/BmCggkGrUaCx6DekaGTqoyTsRTct9BPooT278b+q5AY0EXpf1XAEM
        AMRZ7ndZ60strongBBqi9RlAdDh35mouxcy9kv73WK24l7wnoQNq2QIHCkoCCiht7lqT
        AHNGk5cwuiov9hfRbZPbMVoc7444IoQ3D5Vj5tvkaqW3ey92hE0g4P0ITAK7/1MG
        OxZz26yPM/45MWvwlo7vz9QCGTp0hkpJG3fsdPISaV1r/vylD0zpKJ8Yotth07FR
        QmK5ck3vr/GWtP+tYR7JQnP1R+oFfcEi2cP8/VA/lry+I29yc04/wxjbxYqzB1nZ
        9nhJPCCEpWR3oIsrHaLMfTI4pUnguREO/Qv/gtmR2TZwJ2eAXsNJ0jvw4+F2crXk
        nGSxEru0+D2b2bsxN2Gj4JRXCli3sipg19lbTwZTeZFGmpg84OUIaTLjQi39DCFu
        l40lgd/Xvx797eOVeN/QWNwzxiFcDNDQTXcx9LBXRyDkKeCa+ZvDYvH3ezIvJcvi
        so3ZEBdJ5QIvEXzm8q3vbIf7yV1p4+hgw88J6jekIOUlJoHYMzpkJtgaPb6ZYrt4
        5wARAQABiQG8BBgBCgAmFiEEwKf+AZuw1DDEZcvKBaLpbHFHyLgFAl6X9VwCGwwF
        CQPCZwAACgkQBaLpbHFHyLgXRwwAswv05e7mKvYVUphP/ihSxZmEDy/R9DcZiSsI
        f4fWmypv9D5Y2YgCt/2NT3X6MUABAV12QGlwJlQBlRgV9rEExaiZ0p/g0QmK28Fa
        ZQ4+FS1S0+BuUso9MAFbam2Jk+hEFmCNhmK7thJlVgrcSDPppENn6/D4Lw6/WoI3
        8q6vMff7xxNYGjKnqU5aPlmNvff8FoxNYcLwmVk0y9tlI8l0g5c5LVsrRmnJXYPQ
        wtItiv6KzNtEKmbshObqf9gPZAnjLIC8sNytO/78NIJPR3JQyWMd6yudGosrg6NQ
        q0N2C9J5x1aBPPS9x6QvMfiOm2JewEqKSDQ3NEyW+V8y4jOwIr+9G3DLueMLPVPj
        MsAz4P7xxX00TKcYTa2DWlOW4z2kF8qoYPs1nuXWHAvRVQ+QJ0pop3VRZKXN3ZBw
        9pGyrirzjqEqk/1aJTsEK6kgpHDlg71B1ajcZ2pYiMsICnjBowXh87Xgrb/7wTr1
        yKDnyVYRcd3IECbxciuHX49/YffC
        =NM6e
        -----END PGP PUBLIC KEY BLOCK-----
# vim box-key
# ls -l
        -rw-r--r--. 1 root   root   2448 апр 16 02:10  box-key
        -rw-r--r--. 1 root   root     49 апр 15 22:42  myfile.txt
        -rw-r--r--. 1 root   root    103 апр 15 22:44  myfile.txt.gpg
# gpg --import box-key
        gpg: ключ 05A2E96C7147C8B8: импортирован открытый ключ "Client1 <testClient1@mail.ru>"
        gpg: Всего обработано: 1
        gpg:                  импортировано: 1
# gpg --edit-key Client1
        gpg (GnuPG) 2.2.9; Copyright (C) 2018 Free Software Foundation, Inc.
        This is free software: you are free to change and redistribute it.
        There is NO WARRANTY, to the extent permitted by law.
        pub  rsa3072/05A2E96C7147C8B8
              создан: 2020-04-16     годен до: 2022-04-16  назначение: SC  
             доверие: неизвестно достоверность: неизвестно
        sub  rsa3072/58859DC04AFB86B9
              создан: 2020-04-16     годен до: 2022-04-16  назначение: E   
        [ неизвестно ] (1). Client1 <testClient1@mail.ru>
gpg> fpr
        pub   rsa3072/05A2E96C7147C8B8 2020-04-16 Client1 <testClient1@mail.ru>
         Отпечаток первичного ключа: C0A7 FE01 9BB0 D430 C465  CBCA 05A2 E96C 7147 C8B8
gpg> sign
        pub  rsa3072/05A2E96C7147C8B8
              создан: 2020-04-16     годен до: 2022-04-16  назначение: SC  
             доверие: неизвестно достоверность: неизвестно
         Отпечаток первичного ключа: C0A7 FE01 9BB0 D430 C465  CBCA 05A2 E96C 7147 C8B8
             Client1 <testClient1@mail.ru>
        Срок действия данного ключа истекает 2022-04-16.
        Вы уверены, что хотите подписать этот ключ
        своим ключом "Admin3 <testAdmin3@mail.ru>" (8EAEFED2A8D76C1E)?
        Действительно подписать? (y/N) y
gpg> check
gpg> quit
Task:
Зашифруем файл myfile для пользователя Dmitry. Зашифрованный файл получит имя myfile.gpg. r - кто получатель, e - ecrypt операция шифрования
Decision:
# vim myfile
# cat myfile

        ---secret---
# gpg -o myfilenew.gpg -e -r Client1 myfile
        gpg: проверка таблицы доверия
        gpg: marginals needed: 3  completes needed: 1  trust model: pgp
        gpg: глубина: 0  достоверных:   1  подписанных:   1  доверие: 0-, 0q, 0n, 0m, 0f, 1u
        gpg: глубина: 1  достоверных:   1  подписанных:   0  доверие: 1-, 0q, 0n, 0m, 0f, 0u
        gpg: срок следующей проверки таблицы доверия 2022-04-16
# ls -l
        -rw-r--r--. 1 root   root   2448 апр 16 02:10  box-key
        -rw-r--r--. 1 root   root     13 апр 16 02:15  myfile
        -rw-r--r--. 1 root   root    478 апр 16 02:21  myfilenew.gpg
# cat myfilenew.gpg
        ��X���J���
                 �+��-$6ٌ�)r+9e��|>N�&�21ʸX��HJMuS�=����o��_��oi�h��:J��Q��U�Y[���5I��`
              {�6U����y$�n��    TS�>����NJ�Tc%���5{��=FW�xv�Zr�����N*��9�ڻ��r(h�x��[ŀ(ў*��~�x��|Sր��u�{
                                   ^���8YA���R&nI�����y�l9��!��yO/J�X�9���%u����q�2��ã%�k'u�i���؍�������g�X�v�bE5IP9�<�"���'�?b]��x���_`Y�Ԡ��I��M�6�B�\�C�h���Q�B�4@�;O�xbԽ��e��x/8\L's����*��)EU��x~�ά��`ȟ�    �BB���M� ,�>�&gkb�ǻ�
        �N�Խ����s��b��-ɘ%�
                         F;.܍5��zD\����
                                       �Kc|=O��:��s�
Task:
После этого зашифрованный файл можно свободно передавать по открытым каналам передачи данных. Файл сможет расшифровать только пользователь Dmitry с помощью своего секретного ключа. Передаем
Decision:
# scp myfilenew.gpg linux@tip.104:/home/linux 
        myfilenew.gpg                                 100%  478   167.8KB/s   00:00
# ls -l
        итого 112
        -rw-r--r-- 1 root  root   1753 апр 16 09:02  box-key
        -rw-r--r-- 1 linux linux   478 апр 16 09:55  myfilenew.gpg
Task:
Расшифровать файл пользователь Dmitry сможет командой, указанной ниже.
Decision:
# gpg -o myfile -d myfilenew.gpg
        gpg: Внимание: небезопасный владелец домашнего каталога '/home/linux/.gnupg'
        gpg: зашифровано 3072-битным ключом RSA с идентификатором 58859DC04AFB86B9, созданным 2020-04-16
              "Client1 <testClient1@mail.ru>"
# ls -l
        итого 116
        -rw-r--r-- 1 root  root   1753 апр 16 09:02  box-key
        -rw-r--r-- 1 root  root     13 апр 16 09:57  myfile
        -rw-r--r-- 1 linux linux   478 апр 16 09:55  myfilenew.gpg
# cat myfile
        ---secret---
Task:
Создание сертификата отзыва
Посмотрим ID публичного ключа, который мы отправим на публичный сервер ключей.
Decision:
# gpg --list-keys
        /root/.gnupg/pubring.kbx
        ------------------------
        pub   rsa2048 2020-04-16 [SC] [   годен до: 2022-04-16]
              CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
        uid         [  абсолютно ] Admin3 <testAdmin3@mail.ru>
        sub   rsa2048 2020-04-16 [E] [   годен до: 2022-04-16]
        pub   rsa3072 2020-04-16 [SC] [   годен до: 2022-04-16]
              C0A7FE019BB0D430C465CBCA05A2E96C7147C8B8
        uid         [   полное   ] Client1 <testClient1@mail.ru>
        sub   rsa3072 2020-04-16 [E] [   годен до: 2022-04-16]
Task:
С помощью опции --keyserver указываем публичный сервер ключей, с помощью опции --send-key сообщаем, что ключ необходимо отправить на сервер.
Decision:
# gpg --keyserver pgp.mit.edu --send-key CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
        gpg: отправка ключа 8EAEFED2A8D76C1E на hkp://pgp.mit.edu
Task:
После этого любой желающий может получить ваш публичный ключ с сервера ключей, просто указав его ID. Для получения ключа с сервера используется опция --recv-keys. ID ключа также можно выяснить по e-mail адресу владельца или его имени.
Decision:
# gpg --keyserver pgp.mit.edu --recv-key CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
        gpg: Внимание: небезопасный владелец домашнего каталога '/home/linux/.gnupg'
        gpg: ключ 8EAEFED2A8D76C1E: "Admin3 <testAdmin3@mail.ru>" не изменен
        gpg: Всего обработано: 1
        gpg:              неизмененных: 1
# gpg --keyserver pgp.mit.edu --search-key testAdmin3@mail.ru
        gpg: data source: http://pgp.mit.edu:11371
        (1)    Admin3 <testAdmin3@mail.ru>
              2048 bit RSA key 8EAEFED2A8D76C1E,      создан: 2020-04-16,    годен до: 2022-04-16
        Keys 1-1 of 1 for "testAdmin3@mail.ru".  Введите числа, N) Следующее; Q) Выход > Q
Task:
Представим ситуацию, что ваш секретный ключ скомпрометирован или просто потерян. Следовательно, больше нет смысла шифровать для вас данные публичным ключом из связки с этим личным ключом и его нужно отозвать. Генерируем сертификат отзыва. После выполнения команды будет создан файл eugeny.asc, это и есть сертификат отзыва.
Decision:
# gpg -o Admin3.asc --gen-revoke Admin3
        sec  rsa2048/8EAEFED2A8D76C1E 2020-04-16 Admin3 <testAdmin3@mail.ru>
        Создать сертификат отзыва данного ключа? (y/N) y
        Укажите причину отзыва:
          0 = Причина не указана
          1 = Ключ был раскрыт
          2 = Ключ заменен другим
          3 = Ключ больше не используется
          Q = Отмена
        (Скорее всего, Вы здесь выберете 1)
        Ваше Decision? 3
        Введите необязательное пояснение; завершите пустой строкой:
        >
        Причина отзыва: Ключ больше не используется
        (Пояснения отсутствуют)
        Все правильно? (y/N) y
        Для вывода использован текстовый формат ASCII.
        Сертификат отзыва создан.
        Поместите его в надежное место; если посторонний получит доступ
        к данному сертификату, он может использовать его, чтобы сделать
        Ваш ключ непригодным к использованию. Можно распечатать данный
        сертификат и спрятать подальше на случай, если Ваш основной
        носитель будет поврежден, но будьте осторожны: система печати
        Вашей машины может сохранить данные и сделать их доступными для других!
# ls -l
        -rw-r--r--. 1 root   root    478 апр 16 02:53  tip.104
        -rw-------. 1 root   root    548 апр 16 03:16  Admin3.asc
        -rw-r--r--. 1 root   root   2448 апр 16 02:10  box-key
        drwxr-xr-x. 2 root   root     45 апр  9 21:40  docs
        -rw-r--r--. 1 root   root     13 апр 16 02:15  myfile
        -rw-r--r--. 1 root   root    478 апр 16 02:21  myfilenew.gpg
Task:
Далее сертификат отзыва необходимо импортировать в вашу базу данных ключей. Публичный ключ отозван (revoked).
Decision:
# gpg --import Admin3.asc
        gpg: ключ 8EAEFED2A8D76C1E: сертификат отзыва "Admin3 <testAdmin3@mail.ru>" импортирован
        gpg: Всего обработано: 1
        gpg:           новых отзывов ключей: 1
        gpg: marginals needed: 3  completes needed: 1  trust model: pgp
        gpg: глубина: 0  достоверных:   1  подписанных:   0  доверие: 0-, 0q, 0n, 0m, 0f, 1u
        gpg: срок следующей проверки таблицы доверия 2022-04-16
# gpg --list-keys
        /root/.gnupg/pubring.kbx
        ------------------------
        pub   rsa2048 2020-04-16 [SC] [    отозван: 2020-04-16]
              CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
        uid         [   отозван  ] Admin3 <testAdmin3@mail.ru>
        pub   rsa3072 2020-04-16 [SC] [   годен до: 2022-04-16]
              C0A7FE019BB0D430C465CBCA05A2E96C7147C8B8
        uid         [ неизвестно ] Client1 <testClient1@mail.ru>
        sub   rsa3072 2020-04-16 [E] [   годен до: 2022-04-16]
Task:
Загружаем отозванный ключ на публичный сервер ключей.
Decision:
# gpg --keyserver pgp.mit.edu --send-key CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
        gpg: отправка ключа 8EAEFED2A8D76C1E на hkp://pgp.mit.edu
Task:
В удаленной системе, в случае желания получить ваш публичный ключ, будет принят сертификат отзыва. Теперь отозванный ключ нельзя будет использовать для шифрования данных.
Decision:
# gpg --keyserver pgp.mit.edu --recv-key CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
        gpg: Внимание: небезопасный владелец домашнего каталога '/home/linux/.gnupg'
        gpg: ключ 8EAEFED2A8D76C1E: добавлен сертификат отзыва "Admin3 <testAdmin3@mail.ru>"
        gpg: ключ 8EAEFED2A8D76C1E: "Admin3 <testAdmin3@mail.ru>" 1 новая подпись
        gpg: Всего обработано: 1
        gpg:         новых подписей: 1
# gpg --list-keys
        gpg: Внимание: небезопасный владелец домашнего каталога '/home/linux/.gnupg'
        gpg: проверка таблицы доверия
        gpg: marginals needed: 3  completes needed: 1  trust model: pgp
        gpg: глубина: 0  достоверных:   1  подписанных:   0  доверие: 0-, 0q, 0n, 0m, 0f, 1u
        gpg: срок следующей проверки таблицы доверия 2022-04-16
        /home/linux/.gnupg/pubring.kbx
        ------------------------------
        pub   rsa3072 2020-04-16 [SC] [годен до: 2022-04-16]
              C0A7FE019BB0D430C465CBCA05A2E96C7147C8B8
        uid         [  абсолютно ] Client1 <testClient1@mail.ru>
        sub   rsa3072 2020-04-16 [E] [годен до: 2022-04-16]
        pub   rsa2048 2020-04-16 [SC] [отозван: 2020-04-16]
              CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
        uid         [   отозван  ] Admin3 <testAdmin3@mail.ru>
# gpg -o myfile.gpg -e -r Admin3 myfile
        gpg: Внимание: небезопасный владелец домашнего каталога '/home/linux/.gnupg'
        gpg: Admin3: пропущено: Нет открытого ключа
        gpg: myfile: encryption failed: Нет открытого ключа
Task:
Цифровая подпись файлов
Подписать файл myfile можно командой, указанной ниже. Подписанный файл будет сохранен под именем myfile.sig
Decision:
# gpg --gen-key
        gpg (GnuPG) 2.2.9; Copyright (C) 2018 Free Software Foundation, Inc.
        This is free software: you are free to change and redistribute it.
        There is NO WARRANTY, to the extent permitted by law.
        Замечание: "gpg --full-generate-key" вызывает полнофункциональный диалог создания ключа.
        GnuPG должен составить идентификатор пользователя для идентификации ключа.
        Ваше полное имя: Admin3
        Адрес электронной почты: testAdmin3@mail.ru
        Вы выбрали следующий идентификатор пользователя:
            "Admin3 <testAdmin3@mail.ru>"
        Сменить (N)Имя, (E)Адрес; (O)Принять/(Q)Выход? o
        Необходимо получить много случайных чисел. Желательно, чтобы Вы
        в процессе генерации выполняли какие-то другие действия (печать
        на клавиатуре, движения мыши, обращения к дискам); это даст генератору
        случайных чисел больше возможностей получить достаточное количество энтропии.
        Необходимо получить много случайных чисел. Желательно, чтобы Вы
        в процессе генерации выполняли какие-то другие действия (печать
        на клавиатуре, движения мыши, обращения к дискам); это даст генератору
        случайных чисел больше возможностей получить достаточное количество энтропии.
        gpg: ключ E2EF59C572C2FE68 помечен как абсолютно доверенный
        gpg: сертификат отзыва записан в '/root/.gnupg/openpgp-revocs.d/4D651D448FC062BFFC7602DCE2EF59C572C2FE68.rev'.
        открытый и секретный ключи созданы и подписаны.
        pub   rsa2048 2020-04-16 [SC] [   годен до: 2022-04-16]
              4D651D448FC062BFFC7602DCE2EF59C572C2FE68
        uid                      Admin3 <testAdmin3@mail.ru>
        sub   rsa2048 2020-04-16 [E] [   годен до: 2022-04-16]
# gpg -o myfile.sig -s myfile
# ls -l
        -rw-r--r--. 1 root   root    478 апр 16 02:53  tip.104
        -rw-------. 1 root   root    548 апр 16 03:16  Admin3.asc
        -rw-r--r--. 1 root   root   2448 апр 16 02:10  box-key
        -rw-r--r--. 1 root   root     13 апр 16 02:15  myfile
        -rw-r--r--. 1 root   root    478 апр 16 02:21  myfilenew.gpg
        -rw-r--r--. 1 root   root    354 апр 16 03:38  myfile.sig
Task:
Проверить подпись в удаленной системе можно с помощью команды gpg с опцией --verify
Decision:
# gpg --verify myfile.sig
        gpg: Внимание: небезопасный владелец домашнего каталога '/home/linux/.gnupg'
        gpg: Подпись сделана Чт 16 апр 2020 10:38:31 MSK
        gpg:                ключом RSA с идентификатором 4D651D448FC062BFFC7602DCE2EF59C572C2FE68
Task:
Расшифровка файла myfile.sig
Decision:
#  gpg -o myfile -d myfile.sig
Task:
подписать текстовые файлы, в этом случае подпись будет добавлена в конец файла. Файл получит расширение asc.
Decision:
# gpg --clearsign myfile
# ls -l
        -rw-r--r-- 1 root  root    723 апр 16 10:50  myfile.asc
# cat myfile.asc
        -----BEGIN PGP SIGNED MESSAGE-----
        Hash: SHA512
        - ---secret---
        -----BEGIN PGP SIGNATURE-----
        iQGzBAEBCgAdFiEEwKf+AZuw1DDEZcvKBaLpbHFHyLgFAl6YDjIACgkQBaLpbHFH
        yLhfYgv/fUG4Uc1XWSqfdg39etdp5xIvVx1DUwxy+QNopHqd2MXps6Oe2+qJzLpk
        gthQRGSB60Xqgim2hwDEz0hoBrIoFMskuFpZo8JDOpxjR0fofPAp0i+t3z5ZVbjf
        0Mxp8xzvSnxqgx5bwv7Xew4WZwAdiBaOCWhdJ0mK32zxQ2OKClDODUH6XNLVG/iz
        ecVq3VRUUvkRJHj2q1auPsQm2kopp3kuuIYSub/IY+lsEe25fPj/wV+wmugmzExi
        YMj5j8RVMaJCvojJiso7C4+Fv78x9xazEeJlo+d9DTe/+N+O4HttJjGTlCcY1dxc
        QlMytIRnAmJVVioOI6lcG5lp0ZQ0o5M1rhuP53k9+q1o6n8vKPCj/lSK6wO77NYH
        liMFZaeNuL0XDKCbzNqFUTOgFbOo8vueZ1ob7Jq36V/VKz4lXhzOil20QCG8Mmrk
        3f/cM/KK6Oy2MWDEJyjVCHt2PhoiknES7mppvilFR1Plb4JSQPPMzXQ1WgsjAtoH
        RYFDq2Hc
        =YJ6J
        -----END PGP SIGNATURE-----
Task:
Также есть возможность получить цифровую подпись в отдельный файл. Впоследствии файл с подписью и оригинальный файл будут использоваться для того, чтобы верифицировать подпись.
Decision:
# gpg -o myfile.sig --detach-sig myfile
# gpg --verify myfile.sig myfile
        gpg: Подпись сделана Чт 16 апр 2020 03:53:06 EDT
        gpg:                ключом RSA с идентификатором 4D651D448FC062BFFC7602DCE2EF59C572C2FE68
        gpg: Действительная подпись пользователя "Admin3 <testAdmin3@mail.ru>" [абсолютное]
Task:
Уровень доверия к владельцам ключа
Уровень доверия показывает, насколько сильно вы доверяете владельцу указанного ключа. Изменить его можно, войдя в режим редактирования.
Decision:
# gpg --edit-key Client1
        gpg (GnuPG) 2.2.9; Copyright (C) 2018 Free Software Foundation, Inc.
        This is free software: you are free to change and redistribute it.
        There is NO WARRANTY, to the extent permitted by law.
        pub  rsa3072/05A2E96C7147C8B8
              создан: 2020-04-16     годен до: 2022-04-16  назначение: SC  
             доверие: неизвестно достоверность: неизвестно
        sub  rsa3072/58859DC04AFB86B9
              создан: 2020-04-16     годен до: 2022-04-16  назначение: E   
        [ неизвестно ] (1). Client1 <testClient1@mail.ru>
gpg> trust
        pub  rsa3072/05A2E96C7147C8B8
              создан: 2020-04-16     годен до: 2022-04-16  назначение: SC  
             доверие: неизвестно достоверность: неизвестно
        sub  rsa3072/58859DC04AFB86B9
              создан: 2020-04-16     годен до: 2022-04-16  назначение: E   
        [ неизвестно ] (1). Client1 <testClient1@mail.ru>
        Укажите, насколько Вы доверяете данному пользователю в вопросах проверки
        достоверности ключей других пользователей (проверяет паспорт,
        сверяет отпечатки ключей из разных источников и т.п.)
         1 = Не знаю или не буду отвечать
         2 = НЕ доверяю
         3 = Доверяю ограниченно
         4 = Полностью доверяю
         5 = Абсолютно доверяю
         m = вернуться в главное меню
Task:
Надежное удаление файлов
Для надежного удаления файлов используется программа shred, входящая в пакет coreutils. Потребность в удалении файла может возникнуть после создания его зашифрованной версии. Место на диске, где находится файл, перезаписывается в несколько проходов, и восстановить его практически невозможно.
Пример удаления файла. По умолчанию программа shred 25 раз перезаписывает то место, где находился файл.
Decision:
# shred -u -v myfile
        shred: myfile: проход 1/3 (random)…
        shred: myfile: проход 2/3 (random)…
        shred: myfile: проход 3/3 (random)…
        shred: myfile: удаление
        shred: myfile: переименован в 000000
        shred: 000000: переименован в 00000
        shred: 00000: переименован в 0000
        shred: 0000: переименован в 000
        shred: 000: переименован в 00
        shred: 00: переименован в 0
        shred: myfile: удалён

# ls -l
        -rw-r--r--. 1 root   root    478 апр 16 02:53  tip.104
        -rw-------. 1 root   root    548 апр 16 03:16  Admin3.asc
        -rw-r--r--. 1 root   root   2448 апр 16 02:10  box-key
        -rw-r--r--. 1 root   root     88 апр 16 02:17  myfile.gpg
        -rw-r--r--. 1 root   root    478 апр 16 02:21  myfilenew.gpg
        -rw-r--r--. 1 root   root    310 апр 16 03:53  myfile.sig
Source:
https://scabere.livejournal.com/62886.html?ysclid=lis5xg9t99308663826
Task:
Система безопасности PAM
Конфигурационные файлы для различных программ находятся в /etc/pam.d/.
Decision:
$ ls /etc/pam.d
    atd gdm-launch-environment polkit-1 sudo-i
    chfn gdm-password postlogin su-l
    chsh gdm-pin remote system-auth
    cockpit gdm-smartcard runuser systemd-user
    config-util liveinst runuser-l vlock
    crond login smartcard-auth vmtoolsd
    cups other sshd xserver
    fingerprint-auth passwd sssd-shadowutils
    gdm-autologin password-auth su
    gdm-fingerprint pluto sudo
Task:
выяснить, какие модули PAM присутствуют в системе.
Decision:
$ find / -name pam_*.so
    find: ‘/proc/12490’: No such file or directory
    find: ‘/proc/12491’: No such file or directory
    find: ‘/run/user/1000/gvfs’: Permission denied
    /usr/lib64/security/pam_cap.so
...
    /usr/lib64/security/pam_gnome_keyring.so
    /usr/lib64/security/pam_gdm.so
    /opt/VBoxGuestAdditions-6.1.4/other/pam_vbox.so
Task:
Запретим пользователю tuser1 с сервера с IP tipcentos подключаться по SSH к нашему серверу. В конце файла /etc/security/access.conf вписываем такую строку: - : tuser1 : tipcentos. Узнать IP можно с помощью ifconfig.
Decision:
$ su - tuser1
$ ifconfig
    ....
    inet tipcentos ...
    ...
$ exit
    logout
$ vim /etc/security/access.conf
$ cat /etc/security/access.conf
    # Login access control table.
    ...
    #-:ALL:ALL
    -:tuser1:tipcentos
$ cat /etc/pam.d/sshd
    #%PAM-1.0
    auth substack password-auth
    auth include postlogin
    account required pam_sepermit.so
    account required pam_nologin.so
    account include password-auth
    password include password-auth
    # pam_selinux.so close should be the first session rule
    session required pam_selinux.so close
    session required pam_loginuid.so
    # pam_selinux.so open should only be followed by sessions to be executed in the user context
    session required pam_selinux.so open env_params
    session required pam_namespace.so
    session optional pam_keyinit.so force revoke
    session optional pam_motd.so
    session include password-auth
    session include postlogin
$ vim /etc/pam.d/sshd
$ cat /etc/pam.d/sshd
    #%PAM-1.0
    auth substack password-auth
    auth include postlogin
    account required pam_sepermit.so
    account required pam_nologin.so
    account required pam_access.so
    account include password-auth
    password include password-auth
    # pam_selinux.so close should be the first session rule
    session required pam_selinux.so close
    session required pam_loginuid.so
    # pam_selinux.so open should only be followed by sessions to be executed in the user context
    session required pam_selinux.so open env_params
    session required pam_namespace.so
    session optional pam_keyinit.so force revoke
    session optional pam_motd.so
    session include password-auth
    session include postlogin
Task:
Теперь пользователь tuser1 не сможет подключиться к нашему серверу по SSH. В файле access.conf также есть много других примеров, которые можно использовать в своей ситуации. проверить подключение на другом компе.  Чтобы разрешить это, можно просто закомментить строку в файле.
Decision:
$ ssh tuser1@tipcentos
    The authenticity of host 'tipcentos (tipcentos)' can't be established.
    ECDSA key fingerprint is SHA256:18lZcodItzx9EW0IpFFs7S6p5/JzeQVp6w2DBhQ5ypI.
    Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
    Warning: Permanently added 'tipcentos' (ECDSA) to the list of known hosts.
    tuser1@tipcentos's password:
    Connection closed by tipcentos port 22
$ vim /etc/security/access.conf
$ cat /etc/security/access.conf
    # Login access control table.
    ...
    #-:ALL:ALL
    #-:tuser1:tipcentos
Task:
С помощью pam_limits.so для пользователя tuser1 сделаем следующие ограничения: максимальный размер файла – 20 Мб; приоритет для пользовательских процессов – 15.
Строки в конце файла /etc/security/limits.conf: tuser1 hard fsize 20000; tuser1 hard priority 15.
Decision:
$ vim /etc/security/limits.conf
$ cat /etc/security/limits.conf
    # /etc/security/limits.conf
    ...
    #@student - maxlogins 4
    tuser1 hard fsize 20000
    tuser1 hard priority 15
    # End of file
$ ssh tuser1@tipcentos
    The authenticity of host 'tipcentos (tipcentos)' can't be established.
    ECDSA key fingerprint is SHA256:18lZcodItzx9EW0IpFFs7S6p5/JzeQVp6w2DBhQ5ypI.
    Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
    Warning: Permanently added 'tipcentos' (ECDSA) to the list of known hosts.
    tuser1@tipcentos's password:
    Activate the web console with: systemctl enable --now cockpit.socket
    Last login: Wed Mar 25 23:07:16 2020
$ ls -lh
    итого 0
$ yes > file.txt
    File size limit exceeded (стек памяти сброшен на диск)
$ ls -lh
    итого 20M -rw-rw-r-- 1 tuser1 tuser1 20M мар 25 23:17 file.txt
Task:
Запускаем любой процесс, например, с помощью watch отслеживаем статистику программы free в реальном времени. С другой консоли посмотрим приоритет процесса watch.
Decision:
watch free
ps -C watch -o ni=
    15
Task:
устанавливаем касперский 
Decision: 
kes - setup
Указать имя сервера, записываем имя компа thost
netagent - setup
чтобы активировать касперский заходим через сервер в kasp Sec Center, комп, клиент компr, созд (пр кнопкой мыши), Маст добавл, клиент комп, thost
Task:
Рассмотрим легкий способ анонимной и конфиденциальной переписки на основе i2p + XMPP (протокол обмена сообщениями). Мы создаем свой XMPP сервер на нашем localhost и кинем все его хосты внутри сети i2p, который выделит нам криптографический адрес, по которому наш собеседник может вступить с нами в контакт.
Decision:
Всю реализацию буду делать внутри виртуальной машины. Cначала установим сервис i2p. В Ubuntu это делается так:
$ sudo add-apt-repository ppa:purplei2p/i2pd
$ sudo apt-get update
$ sudo apt-get install i2pd
В Центосе 8:
# curl -s https://copr.fedorainfracloud.org/coprs/r4sas/miniupnpc/repo/epel-8/r4sas-miniupnpc-epel-8.repo -o /etc/yum.repos.d/miniupnpc-epel-8.repo
# curl -s https://copr.fedorainfracloud.org/coprs/supervillain/i2pd/repo/epel-8/supervillain-i2pd-epel-8.repo -o /etc/yum.repos.d/i2pd-epel-8.repo
# yum install epel-release -y
# yum install i2pd -y
# systemctl enable i2pd
    Created symlink /etc/systemd/system/multi-user.target.wants/i2pd.service → /usr/lib/systemd/system/i2pd.service.
# systemctl start i2pd
После установки создаем серверный I2P туннель - это виртуальный адрес, по которому наш XMPP сервер будет доступен.
# find / -name tunnels.conf
    find: ‘/run/user/1000/gvfs’: Permission denied
    /etc/i2pd/tunnels.conf
    /usr/share/doc/i2pd/tunnels.conf
# cat /etc/i2pd/tunnels.conf
    [IRC-IRC2P]
    ...
    #[IRC-ILITA]
    ...
    #[SMTP]
    ...
    #[POP3]
    ...
    # see more examples at https://i2pd.readthedocs.io/en/latest/user-guide/tunnels/
дописываем следующие строки:
# vim /etc/i2pd/tunnels.conf
# cat /etc/i2pd/tunnels.conf
    [IRC-IRC2P]
    ...
    #[IRC-ILITA]
    ...
    #[SMTP]
    ...
    #[POP3]
    ...
    # see more examples at https://i2pd.readthedocs.io/en/latest/user-guide/tunnels/
    [prosody-s2s]
    type=server
    host=127.0.0.1
    port=5269
    inport=5269
    keys=prosody.dat
    [prosody-c2s]
    type=server
    host=127.0.0.1
    port=5222
    inport=5222
    keys=prosody.dat
Перезагружаем i2pd
# systemctl restart i2pd
Узнаем какой у нас будет криптографический адрес через браузер 127.0.0.1:7070. это и будет домен для вашего XMPP сервера, его надо будет сохранить.
Устанавливаем сервер XMPP под cвою ОС.
# yum list | grep prosody
    prosody.x86_64         0.11.5-1.el8       epel
# yum install prosody -y
    Последняя проверка окончания срока действия метаданных: 0:31:19 назад, Сб 06 июн 2020 01:21:39.
    Ошибка:
        Проблема: conflicting requests
        - nothing provides lua-filesystem needed by prosody-0.11.5-1.el8.x86_64
    (try to add '--skip-broken' to skip uninstallable packages or '--nobest' to use not only best candidate packages)
# yum list | grep lua-fi
    lua-fifo.noarch               0.2-2.el8           epel
# rpm -i http://mirror.C.org/C/8/PowerTools/x86_64/os/Packages/lua-filesystem-1.6.3-7.el8.x86_64.rpm
# yum list | grep lua-fi
    lua-filesystem.x86_64         1.6.3-7.el8         @System                                          
    lua-fifo.noarch               0.2-2.el8           epel
# yum install prosody -y
Устанавливаем lua библиотеку bit32
# yum list | grep lua
        ...
        lua5.1-basexx.noarch                                 0.4.0-2.el8 epel                                             
        lua5.1-binaryheap.noarch                             0.4-1.el8 epel                                             
        lua5.1-bitop.x86_64                                  1.0.2-5.el8 epel                                             
        lua5.1-compat53.x86_64                               0.7-3.el8 epel                                             
        lua5.1-cqueues.x86_64                                20190813-3.el8 epel
        lua5.1-fifo.noarch                                   0.2-2.el8 epel                                             
        lua5.1-http.noarch                                   0.3-5.el8 epel                                             
        lua5.1-lpeg.x86_64                                   1.0.2-1.el8 epel                                             
        lua5.1-lpeg-patterns.noarch                          0.5-4.el8 epel                                             
        lua5.1-luaossl.x86_64                                20190731-1.el8 epel                                           
        lua5.1-luv.x86_64                                    1.36.0.0-1.el8 epel
        lua5.1-luv-devel.x86_64                              1.36.0.0-1.el8                                    epel
        lua5.1-mmdb.noarch                                   0.2-2.el8                                         epel    lua5.1-mpack.x86_64                                  1.0.8-3.el8                                       epel   
        ...
# yum install lua5.1-basexx lua5.1-binaryheap lua5.1-compat53 lua5.1-bitop lua5.1-cqueues lua5.1-fifo lua5.1-http lua5.1-lpeg lua5.1-lpeg-patterns lua5.1-luaossl lua5.1-luv lua5.1-luv-devel lua5.1-mmdb lua5.1-mpack -y
Устанавливаем модуль mod_darknet в директорию модулей prosody.
# find / -name modules
    ...
    /usr/lib64/prosody/modules
    ...
# cd /usr/lib64/prosody/modules
# wget https://raw.githubusercontent.com/majestrate/mod_darknet/master/mod_darknet.lua
# ls -l
    ...
    -rw-r--r--. 1 root root 8478 июн 6 02:57 mod_darknet.lua
    ...
Теперь редактируем конфиг
# vim /etc/prosody/prosody.cfg.lua
В самом низу нужно прописать такой код (Замените xxx.b32.i2p на свой адрес, который мы сохраняли ранее):
# cat /etc/prosody/prosody.cfg.lua
    interfaces = { "127.0.0.1" };
    admins = { "admin@xxx.b32.i2p" };
    modules_enabled = {
        "roster"; "saslauth"; "tls"; "dialback"; "disco"; "posix"; "private"; "vcard";  "ping";  "register"; "admin_adhoc"; "darknet";
    };
    modules_disabled = {};
    allow_registration = false;
    darknet_only = true;
    c2s_require_encryption = true;
    s2s_secure_auth = false;
    authentication = "internal_plain";
    -- On Debian/Ubuntu
    daemonize = true;
    pidfile = "/var/run/prosody/prosody.pid";
    log = {
        error = "/var/log/prosody/prosody.err";
        "*syslog";
    }
    certificates = "certs";
    VirtualHost "xxx.b32.i2p";
    ssl = {
        key = "/etc/prosody/certs/xxx.b32.i2p.key";
        certificate = "/etc/prosody/certs/xxx.b32.i2p.crt";
    }
Генерируем сертификаты шифрования всталяя теже значения домена, которые мы сохраняли ранее
# openssl genrsa -out /etc/prosody/certs/xxx.b32.i2p.key 2048
    Generating RSA private key, 2048 bit long modulus (2 primes)
    ......................+++++
    ....+++++
    e is 65537 (0x010001)
# openssl req -new -x509 -key /etc/prosody/certs/xxx.b32.i2p.key -out /etc/prosody/certs/xxx.b32.i2p.crt -days 3650
    You are about to be asked to enter information that will be incorporated
    into your certificate request.
    What you are about to enter is what is called a Distinguished Name or a DN.
    There are quite a few fields but you can leave some blank
    For some fields there will be a default value,
    If you enter '.', the field will be left blank.
    -----
    Country Name (2 letter code) [XX]:
    State or Province Name (full name) []:
    Locality Name (eg, city) [Default City]:
    Organization Name (eg, company) [Default Company Ltd]:
    Organizational Unit Name (eg, section) []:
    Common Name (eg, your name or your server's hostname) []:
    Email Address []:
# chown root:prosody /etc/prosody/certs/*.b32.i2p.{key,crt}
# chmod 640 /etc/prosody/certs/*.b32.i2p.{key,crt}
Перезагрузите сервер prosody
# systemctl enable prosody
    Created symlink /etc/systemd/system/multi-user.target.wants/prosody.service → /usr/lib/systemd/system/prosody.service. 
# systemctl start prosody
Добавляем админский аккаунт
# prosodyctl adduser admin@xxx.b32.i2p
Теперь мы можем законектиться к нашему серверу через pidgin-клиент.
Если вы подключаетесь локально к серверу, то в настройках клиента указываем подключение к серверу 127.0.0.1 порт 5222. Если подключаетесь к серверу удаленно через I2P, то указывайте в настройках прокси Socks5 127.0.0.1:4447 При подключении нас предупредят, сертификаты шифрования самописные, так как мы сами их сгенерировали.
Теперь мы можем подлючить второго собеседника через вторую виртуальную машину. Также на ней установим шлюз i2p, который будет являться нашим локальным прокси i2p.
# add-apt-repository ppa:purplei2p/i2pd
# apt-get update
# apt-get install -y i2pd
# apt-get install -y pidgin
Вернемся в первую машину и создадим для нашего собеседника аккаунт на сервере
# prosodyctl adduser C@xxx.b32.i2p
Во второй машине проверяем
Указываем тут домен нашего сервера, порт 5222, укажем, что трафик должен идти через прокси типа SOCKS 5, который находится на localhost 127.0.0.1, порт - 4447. При подключении нас также предупредят,что сертификаты шифрования самописные, если все сделали правильно. Остается только запросить авторизацию наших собеседников для того, чтобы создать чат.
Source:
1. https://www.youtube.com/playlist?list=PLLqKATfceKNsptsrNP63TukGKETztvf1r
Task:
Пример работы инкапсуляции Модель OSI 
Decision:
- Представим ситуацию, что вы сидите у себя дома за компьютером, а в соседней комнате у вас свой локальный веб-сервер. И вот вам понадобилось скачать файл с него. Вы набираете адрес страницы вашего сайта. Сейчас вы используете протокол HTTP, которые работает на прикладном уровне. Данные упаковываются и спускаются на уровень ниже.
- Полученные данные прибегают на уровень представления. Здесь эти данные структурируются и приводятся в формат, который сможет быть прочитан на сервере. Запаковывается и спускается ниже.
- На этом уровне создается сессия между компьютером и сервером.
- Так как это веб сервер и требуется надежное установление соединения и контроль за принятыми данными, используется протокол TCP. Здесь мы указываем порт, на который будем стучаться и порт источника, чтобы сервер знал, куда отправлять ответ. Это нужно для того, чтобы сервер понял, что мы хотим попасть на веб-сервер (стандартно — это 80 порт), а не на почтовый сервер. Упаковываем и спускаем дальше.
- Здесь мы должны указать, на какой адрес отправлять пакет. Соответственно, указываем адрес назначения (пусть адрес сервера будет 192.168.1.2) и адрес источника (адрес компьютера 192.168.1.1). Заворачиваем и спускаем дальше.
- IP пакет спускается вниз и тут вступает в работу канальный уровень. Он добавляет физические адреса источника и назначения, о которых подробно будет расписано в последующей статье. Так как у нас компьютер и сервер в локальной среде, то адресом источника будет являться MAC-адрес компьютера, а адресом назначения MAC-адрес сервера (если бы компьютер и сервер находились в разных сетях, то адресация работала по-другому). Если на верхних уровнях каждый раз добавлялся заголовок, то здесь еще добавляется концевик, который указывает на конец кадра и готовность всех собранных данных к отправке.
- И уже физический уровень конвертирует полученное в биты и при помощи электрических сигналов (если это витая пара), отправляет на сервер.
Task:
Как посмотреть занятость места на разделах?
Decision:
$ sudo df -h
Task:
Пример работы деинкапусуляции Модель OSI 
Decision:
- На физическом уровне принимаются электрические сигналы и конвертируются в понятную битовую последовательность для канального уровня.
- На канальном уровне проверяется MAC-адрес назначения (ему ли это адресовано). Если да, то проверяется кадр на целостность и отсутствие ошибок, если все прекрасно и данные целы, он передает их вышестоящему уровню.
- На сетевом уровне проверяется IP адрес назначения. И если он верен, данные поднимаются выше. Не стоит сейчас вдаваться в подробности, почему у нас адресация на канальном и сетевом уровне. Это тема требует особого внимания, и я подробно объясню их различие позже. Главное сейчас понять, как данные упаковываются и распаковываются.
- На транспортном уровне проверяется порт назначения (не адрес). И по номеру порта, выясняется какому приложению или сервису адресованы данные. У нас это веб-сервер и номер порта — 80.
- На этом уровне происходит установление сеанса между компьютером и сервером.
- Уровень представления видит, как все должно быть структурировано и приводит информацию в читабельный вид.
- И на этом уровне приложения или сервисы понимают, что надо выполнить.
Task:
Чем роутер отличается от маршрутизатора?
Decision:
роутер и маршрутизатор — это одно и то же устройство. Однако под маршрутизатором часто подразумевают устройство для создания в первую очередь проводной сети, в то время как роутер — для беспроводной
Task:
Чем коммутатор отличается от маршрутизатора?
Decision:
Основные отличия коммутатора и маршрутизатора:
- Свитч проще с технической точки зрения и обладает ограниченной функциональностью.
- Маршрутизаторы сложнее устроены и могут анализировать объём информации, определять IP-адреса.
- Коммутаторы работают исключительно с MAC-адресами.
- Маршрутизаторам свойственен сетевой уровень модели OSI.
- Маршрутизаторы отличаются подключением к интернету.
- Для работы коммутатора и маршрутизатора нужен порт LAN, но последнее устройство также использует и WAN-порт.
Task:
Чем Active Directory отличается от Dns?
Decision:
Active Directory использует DNS как механизм поиска контроллеров домена и других объектов
Task:
Пример работы DNS
Decision:
Ввожу адрес. компьютер понимает только Ip адреса. Поэтому ему надо перевести ваш Url запрос в Ip. Компьютер сначала локально проверят хост файл. в линуксе это reslove. Если в файле прописан жанный адрес, то ответ отправляется пользователю, если нет то проверяется в Dns Серверах на регистрацию адреса. ВОзращается все это по протоколку http. 
Task:
Чем Tcp отличается от Udp?
Decision:
В Tcp отправляется пакет и ждет ответ. в Udp не ждет ответа. Udp используется для трансляции.
Task:
Чем Get отличается от Post?
Decision:
Запрос Get передает данные в Url через ссылку, а Post передает данные в теле запроса
Task:
Какая маска подсети этого Ip 10.20.0.0/23?
Decision:
Если 24 - последняя цифра отходит 255.255.255.0. В нашем случае - 255.255.254.0
Task:
В вашем распоряжении находится подсеть 192.168.1.0/30. Какие Ip адреса доступны для присвоения устройствам?
Decision:
Маска 30 означает, что подряд 30 единиц 11111111.11111111.11111111.11111100. значит ответ 192.168.1.1, 192.168.1.2.
Task:
Способы авторизации
Decision:
- двуфаторный
- по ключу
- по паролю
Task:
типы записей DNS
Decision:
- A записи могут принимать только IP-адрес в качестве значения,  Вы можете направить один и тот же домен / поддомен на несколько IP-адресов, просто добавив еще одну запись A с тем же именем, но с другим IP-адресом в поле “значение”.
- Запись AAAA (также запись quad-A) указывает адрес IPv6 для данного хоста. Таким образом, он работает так же, как запись A, и разница заключается в типе IP-адреса.
- Записи CNAME (Canonical Name Record - запись канонического имени) используется для создания псевдонима для существующей  A и AAAA записи. При этом в поле со значением заполняется именем домена, которое ранее было связано с IP-адресом в файле. Таким образом, разные адреса могут ссылаться на один и тот же сервер. Например, псевдоним «service.google.ru» может использоваться для указания на существующую A-запись «story.google.ru», где размещен сервис.
- Запись ресурса MX ( Mail Exchange - почтовый обмен)  используется специально для отправки электронной почты и указывает сервер обмена почтой для доменного имени DNS. Эта информация используется протоколом SMTP для маршрутизации электронной почты на соответствующие узлы. Здесь определен один или несколько почтовых серверов, которые принадлежат соответствующему домену. При использовании нескольких почтовых серверов (например, для компенсации сбоя), лучше сразу указать разные уровни приоритета. 
- Запись PTR является аналогом записи A. По сути это обратная запись A, где поле «имя» содержит информацию о IP-адресе, а поле «значение» содержит строку имени хоста. Запись PTR используется для сопоставления IP-адреса с соответствующим именем хоста, обычно используется для определения того, какое имя хоста использует указанный IP-адрес.
- Запись TXT или текстовая запись - это особый тип записи DNS. Он не используется для пересылки трафика, а используется для предоставления информации о домене. TXT может быть создан в любой зоне в виде статической или динамической записи. Поле «имя» и поле «значение» могут быть заполнены чем угодно, как того требует программа или протокол. TXT запись часто используется для подтверждения владение доменом ( например, при добавлении Google-метрики на сайт).
- Запись SRV или служебная запись - это тип DNS-записи, используемой для указания служб. Запись SRV предоставляет информацию о том, какие службы доступны в определенной зоне или домене. Запись SRV имеет формат для поле «имя», где она начинается с имени службы, имени протокола, а затем имени зоны или домена. А поле  «значение» будет содержать несколько сведений, таких как приоритет, вес, номер порта службы и имя хоста, на котором находится служба.
- NS запись - это DNS-запись, основная ее цель связывать домен и хостинг, в ней  содержится список доверенных серверов имен для домена. Для этого нужно добавить в запись NS-сервера, которые предоставляет Ваш текущий хостинг провайдер для той или иной услуги. Минимум может быть два NS-сервера
- SOA запись или Start of Authority - это запись DNS, которая содержит имя сервера, на котором хранится вся информация, касающаяся этой записи. Он включает в себя достоверную информацию, такую как идентификационный номер сервера, ответственный почтовый адрес, основной сервер имен и т. д. Предполагается, что сервер, на который есть ссылка в записи SOA, отвечает за любой процесс в соответствующей записи.
Task:
Есть консольная программа для Linux, которая должна вывести результат работы в терминал. Но после запуска никакого вывода не происходит и вы снова видите системное приглашение консоли. Перечислите порядок действий дя выявления причин и инструменты, которыми воспользуетесь для решения данной проблемы.
Decision:
Если код закрыт, то надо перенаправить весь вывод на стандартный:
filename &2>&1
это перенаправляет поток ошибок stderr на стандартный вывод stdout.
А если открыт, то уже смотреть по самому коду скрипта или исполняемого файла.
Проверить штатность поведения - код возврата:
./app; echo $?
если не 0, то посмотрел бы в dmesg на предмет segfault. Может оно просто тихо падает. Потом попробовал бы почитать man, запустил бы с ключом --help или -h. Исключив segfault, запустил бы её через strace, чтобы посмотреть, что она вообще пытается сделать.
Task:
Как создать простое зашифрованное сообщение с помощью командной строки?
Decision:
Использовать OpenSsl для шифрования потока текста в текстовый файл, который содержит зашифрованный текст Aes-256 с использованием ключа доступа
Task:
Как обеспечить надежную работу сайта?
Decision:
Установить Ssl сертификат для безопасности url - https.
Task:
Чем Dos Атака отличается от DDos?
Decision:
DoS-атаки используют всего один хост для перегрузки системы, есть косвенные признаки, по которым их можно отличить от DDoS. Они менее эффективны и более заметны: когда запросы приходят с одного IP-адреса источника, системному администратору становится очевидна их нелегитимность. Как следствие — DoS-атаки гораздо проще подавить, ведь достаточно использовать брандмауэр. 
Task:
Как оркестрации ты знаешь для микросервисов?
Decision:
Оркестрация микросервисов в контексте разработки программного обеспечения и архитектуры микросервисов относится к координации, управлению и контролю взаимодействий и процессов между независимыми микросервисами.
- Kubernetes (K8s) — это открытое программное обеспечение для автоматизации развёртывания, масштабирования и управления контейнеризированными приложениями.
- Amazon ECS - упрощает развертывание контейнеров Docker и управление ими в любом масштабе. 
Task:
Какие характеристики микросервисов ты знаешь?
Decision:
- Все разбито на маленькие компоненты. Например, есть компонент для веб-сервера, есть компонент, который показывает другу страницу и есть компонент, который обращается к базе данных.
- Если что-то ломается, это не страшно, когда есть другие микросервисы.
- Все данные должны сохраняться в какой-нибудь БД, а не в микросервисах.
Task:
Какие решения для CI/CD ты знаешь?
Decision:
- jenkins - программная система, предназначенная для обеспечения процесса непрерывной интеграции программного обеспечения
- gitlab CI - встроенный инструмент, для автоматизации рутинных задач, возникающих в процессе разработки ПО.
Task:
Когда нужно использовать Terraform модули?
Decision:
Когда есть повторяющийся код. Это более удобное решение нескольких ресурсов.
Task:
Тебе нужно соответствовать Rpo 2 часа. Как часто нужно делать Backup?
Rpo
Decision:
Каждые 2 часа
Task:
Пример Rpo/Rto 
Decision:
Раз в день в 1:00 делаете бэкап. в 12:00 сгорает сервер. Поставил новый компьютер, установил ОС, программы и восстанавили бэкап. в 17:00 - полное восстановление. 
Время от последнего бэкапа - Rpo, а время до восстановления - rto. Если организация хочет Rpo 1 час - бэкап надо делать каждый час, а для 1 часа нужно автоматическое создание серверов. Можно сделать реплику потерю данных Rpo на другой сервер. 
Task:
В розетке можно подключить подключить одну витую пару. Но нужно разделить на две витые пары розетку для двух компьютеров.
Decision:
Коммутатуратор вход 1 - 1бо,2о,3бз,6з
Коммутатуратор вход 2 - 1с,2бс,3бк,6к
Патч панель - 1бо,2о,3бз,4с,5бс,6з,7бк,8к
Розетка комп 1 - 1бо,2о,3бз,6з
Розетка комп 2 - 4бо,5о,7бз,8з
Комп 1 - 1бо,2о,3бз,4с,5бс,6з,7бк,8к
Комп 2 - 1бо,2о,3бз,4с,5бс,6з,7бк,8к
Task:
Чем приватный отличается от публичного ключа?
Decision:
Мы можем сгенерировать два ключа - приватный и публичный. После чего закинуть публичный ключ на все свои сервера и подключаться к ним без пароля, используя приватный ключ. Это говорит о том, что приватный ключ нужно беречь,
Админ закидывает публичный ключ на сервера, в домашнюю директорию пользователей, к которым будет подключаться. И при следующем подключении демон ssh увидит наличие подходящего ключа у пользователя и аутентифицирует его.
Task:
Как сгенерировать ssh ключа?
Decision:
Для начала нужно сгенерировать ключи, это делается на стороне клиента, т.е. у администратора. Для генерации ключей используется команда ssh-keygen. По умолчанию ключи и в целом настройки клиента ssh хранятся в домашней директории пользователя, в скрытой директории .ssh. А ключи, по умолчанию, называются id_rsa. По хорошему, когда у нас много серверов, мы можем создать различные ключи и для подключения к разным серверам использовать разные ключи. Тут нажмём enter, чтобы использовать название по умолчанию. Дальше у нас спрашивается пароль для ключа. Так как ssh ключи позволяют заходить на сервера без пароля, они могут быть очень опасны, если попадут в руки злоумышленникам. Поэтому мы можем защитить приватные ключи паролем. При использовании ключа нам нужно будет вводить пароль от ключа, но, если у нас украдут этот ключ, без пароля хакеры ничего не сделают. Для нашего примера мы не будем использовать пароль, чтобы было нагляднее. Поэтому нажимаем два раза Enter и ключ создаётся. Мы видим, что создались два файла - id_rsa и id_rsa.pub - приватный и публичный ключ соответственно. Также внизу есть эдакая картинка, визуализирующая ключ. На самом деле это больше нужно для ключей хоста - вы можете настроить так, чтобы при подключении к серверам вы видели ключ хоста в таком виде. Если вдруг ключ хоста изменится или кто-то встанет посреди трафика, ключ будет другой и визуально вы сразу заметите разницу.
У нас есть ключи, теперь мы можем закинуть наш публичный ключ на какой-нибудь сервер и проверить. Используем эту же виртуалку и пользователя root. Самый простой способ закинуть ключ - команда ssh-copy-id.
Если не использовать никакие опции, она найдёт дефолтный ключ id_rsa.pub и закинет его. При этом, чтобы закинуть ключ, ssh подключается на этот сервер к пользователю, поэтому он попросит пароль пользователя. После чего добавит ключ и предложит нам проверить.
На этот раз никакого пароля не потребовалось, мы можем аутентифицироваться по ключу.
Посмотрим появившиеся файлы, для начала у клиента. В директории .ssh у нас 3 файла - два ключа и файл known_hosts.
Ключи представляют из себя текстовые файлы с непонятным набором символов. А в файле known_hosts указаны адреса, к которым мы подключались, а также отпечатки их ключей. Именно по этому файлу наш клиент будет понимать, изменились ли у сервера ключи или нет.
На сервере, в домашней директории пользователя, к которому я закинул ключ, также появилась директория .ssh с файлом authorized_keys
В этот файл будут попадать публичные ключи пользователей, т.е. это результат команды ssh-copy-id. На самом деле, хоть и не понятно в терминале, в этом файле сейчас одна строчка с одним ключом. Этот тот же id_rsa.pub. Если кто-то ещё добавит ключ, то он будет на второй строчке, т.е. один ключ - одна строчка.
Task:
Принцип работы SElinux
Decision:
SELinux расширяет возможности стандартной системы безопасности (на основе прав доступа к файлам). Она позволяет ограничить доступ процессу, который запускается от имени пользователя, у которого прав больше, чем нужно данному процессу. Чтобы понять наглядно принцип работы SELinux, рассмотрим контекст безопасности — сочетание сущности, роли, домена и категории (не обязательно).
Source:
Принцип работы - https://www.dmosk.ru/miniinstruktions.php?mini=selinux-setting&ysclid=lw1jsobk8866859354
Принудительный контроль доступа - SElinux - https://basis.gnulinux.pro/ru/latest/basis/45/45._%D0%9F%D1%80%D0%B8%D0%BD%D1%83%D0%B4%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9_%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8C_%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF%D0%B0_-_SElinux.html