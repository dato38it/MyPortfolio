Mail for feedback: David138it@gmail.com

Sql, Таблица Покупки
  Task:
  Создать таблицу purchases;
  Вставьте в нее все записи из приложенного файла (для таблицы purchases);
  Выведите уникальные города клиентов;
  Decision:
  starter=# create table purchases (
  starter(#   surname varchar(50),
  starter(#   name varchar(50),
  starter(#   second_name varchar(50),
  starter(#   region varchar(50),
  starter(#   city varchar(50),
  starter(#   street_type varchar(50),
  starter(#   street_nm varchar(50),
  starter(#   house_num varchar(10),
  starter(#   phone_number bigint,
  starter(#   email varchar(50),
  starter(#   purchase_dt varchar(50),
  starter(#   product_cnt int,
  starter(#   purchase_amt int,
  starter(#   currency_nm varchar(50),
  starter(#   current_discount varchar(50));
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Смирнов', 'Александр', 'Александрович', 'Москва', 'Москва', 'улица', 'Шмидте', '2', 74950054758, 'smirnov@ya.ru ', '01.11.2021', 4, 125, 'US', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Иванов', 'Сергей', 'Алексеевич', 'Московская область', 'Химки', 'проспект', '50 лет октября', '17', 79061793723, 'ivanov@gmail.com', '02.11.2021', 5, 5679, 'RUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Кузнецов', 'Владимир', 'Анатольевич', 'Ростовская область', 'Ростов-на-Дону', 'переулок', 'Дружбы', '51', 79036038662, 'kuznecov@yandex.ru', '03.11.2021', 10, 9211, 'RUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Соколова', 'Елена', 'Андреевна', 'Свердловская область', 'Екатеринбург', 'бульвар', 'Цветной', '64', 74951752838, 'sokolova@mail.com', '01.01.2022', 12, 5476, 'RUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Попова ', 'Татьяна', 'Александровна', 'Санкт-Петербург', 'Санкт-Петербург', 'улица', 'Ленина', '11', 79209217902, 'popova@yahoo.com', '03.02.2022', 6, 242, 'EUR', '10');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Лебедев', 'Андрей', 'Аркадьевич', 'Ростовская область', 'Ростов-на-Дону', 'переулок', 'Смирновский', '100', 74999545208, 'lebedev@yahoo.com', '04.02.2022', 18, 9925, 'RUR', '12');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Козлов', 'Алексей', 'Артемович', 'Москва', 'Москва', 'улица', 'Ленина', '3', 74999545205, 'kozlov@ya.ru', '05.02.2022', 8, 7218, 'RUR', '10');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Новикова', 'Ольга', 'Андреевна', 'Санкт-Петербург', 'Санкт-Петербург', 'бульвар', 'Петровский', '45', 74999545202, 'novikova@yandex.ru', '06.02.2022', 11, 34, 'EUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values (' Морозов', 'Николай', 'Богданович', 'Рязанская область', 'Рязань', 'проспект', 'Московский', '67', NULL, 'morozov@gmail.com', '07.02.2022', 2, 4101, 'RUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Петров', 'Наталья', 'Александровна', 'Ростовская область', 'Ростов-на-Дону', 'улица', 'Ленина', '65', 74999937334, 'PETROV@GMAIL.COM', '08.02.2022', 4, 8013, 'RUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Волкова', 'Анна', 'Валентиновна', 'Москва', 'Москва', 'улица', 'Ленина', '73', 74950692731, 'volkova@gmail.com', '11.11.2021', 9, 7733, 'RUR', '10');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Соловьёв', 'Иван', 'Валерьевич', 'Москва', 'Москва', 'переулок', 'Глинки', '33', 77767813970, 'soloviyev@gmail.com', '08.02.2022', 9, 7566, 'RUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Васильев', 'Дмитрий', 'Васильевич', 'Ростовская область', 'Ростов-на-Дону', 'улица', 'Ленина', '25', 74951662623, 'vasiliyev@mail.com', '13.11.2021', 18, 2608, 'CNY', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Зайцева', 'Ирина', 'Викторовна', 'Санкт-Петербург', 'Санкт-Петербург', 'бульвар', 'Волжский', '74', 79093871696, 'zayceva@ya.ru', '08.02.2022', 12, 8694, 'RUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Павлова ', 'Мария', 'Витальевна', 'Москва', 'Москва', 'проспект', 'Свободы', '81', 74953740142, 'PAVLOVA@GMAIL.COM', '09.02.2022', 12, 5291, 'RUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Семёнов', 'Михаил', 'Владимирович', 'Свердловская область', 'Екатеринбург', 'переулок', 'Некрасовский', '44', NULL, 'semenov@mail.com', '10.02.2022', 9, 7087, 'RUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Голубева', 'Светлана', 'Владиславовна', 'Ростовская область', 'Ростов-на-Дону', 'улица', 'Ленина', '44', 74995861301, 'golubeva@gmail.com', '11.02.2022', 11, 3282, 'RUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Виноградова', 'Екатерина', 'Владиславовна', 'Москва', 'Москва', 'бульвар', 'Победы', '85', 74995860591, 'vinogradova@ya.ru', '18.11.2021', 20, 123, 'US', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Богданов', 'Евгений', 'Вячеславович', 'Санкт-Петербург', 'Санкт-Петербург', 'проспект', 'Революции', '3', 74995861296, 'BOGDANOV@gmail.com', '19.11.2021', 6, 6563, 'RUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Воробьёв', 'Виктор', 'Геннадиевич', 'Ростовская область', 'Ростов-на-Дону', 'улица', 'Дзержинского', '20', 74953741652, 'vorobiyev@gmail.com', '20.11.2021', 8, 3867, 'RUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Фёдорова', 'Анастасия', 'Георгиевна', 'Рязанская область', 'Рязань', 'улица', 'Победы', '55', 74950097648, 'NULL', '21.11.2021', 5, 56, 'EUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Михайлов', 'Юрий', 'Григорьевич', 'Москва', 'Москва', 'переулок', 'Лермонтовский', '45', 74992166013, 'mikhaylov@mail.com ', '08.02.2022', 8, 6283, 'RUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Беляева', 'Юлия', 'Валентиновна', 'Рязанская область', 'Рязань', 'бульвар', 'Гагарина', '50', 78002220480, 'NULL', '09.02.2022', 18, 7535, 'RUR', '10%');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Тарасова', 'Валентина', 'Денисовна', 'Москва', 'Москва', 'улица', 'Ленина', '54', 73432203735, 'belova@gmail.com', '10.02.2022', 1, 2247, 'RUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Белова', 'Галина', 'Валентиновна', 'Санкт-Петербург', 'Санкт-Петербург', 'проспект', 'Невский', '30', 73432203718, 'NULL', '25.11.2021', 15, 4612, 'RUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Комарова', 'Людмила', 'Евгеньевна', 'Рязанская область', 'Рязань', 'улица', 'Ленина', '15', 74993506931, ' KOMAROVA@MAIL.COM', '08.02.2022', 7, 7808, 'RUR', '25%');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Орлов', 'Василий', 'Егорович', 'Ростовская область', 'Ростов-на-Дону', 'бульвар', 'Дзержинского', '19', 79031193345, 'orlov@gmail.com', '27.11.2021', 17, 321, 'US', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Киселёв', 'Игорь', 'Ефимович', 'Москва', 'Москва', 'проспект', 'Красный', '10', 74996382013, 'NULL', '08.02.2022', 1, 1207, 'RUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Макаров', 'Анатолий', 'Иванович', 'Санкт-Петербург', 'Санкт-Петербург', 'улица', 'Ленина', '27', 79253628473, 'makarov@mail.com', '29.11.2021', 6, 7138, 'RUR', 'NULL');
  starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Андреев ', 'Олег', 'Иваныч', 'Москва', 'Москва', 'переулок', 'Тургеневский', '79', 74951203035, 'andreev@gmail.com ', '30.11.2021', 16, 1022, 'RUR', 'NULL');
  starter=# select distinct city
  starter-# from purchases
  starter-# where city is not null;
        city
  -----------------
  Химки
  Рязань
  Екатеринбург
  Москва
  Санкт-Петербург
  Ростов-на-Дону
  (6 строк)
  Task:
  Выведите для каждого клиента из таблицы purchases полные ФИО (фамилия, имя и  отчество должны находиться в одном поле) и адрес клиента (все адресные  атрибуты также должны находиться в одном поле). Не забудьте выполнить проверку  на пробелы;
  Decision:
  starter=# select
  starter-#   surname || ' ' || name || ' ' || second_name as FIO,
  starter-# CASE
  starter-#     when trim(region) = trim(city)
  starter-#       then city ||', '|| street_type ||' '|| street_nm || ', '|| house_num
  starter-#     else region ||', '|| city ||', '|| street_type ||' '|| street_nm || ', '|| house_num
  starter-#   end as address
  starter-# from purchases;
                  fio                 |                            address
  -------------------------------------+---------------------------------------------------------------
  Смирнов Александр Александрович     | Москва, улица Шмидте, 2
  Иванов Сергей Алексеевич            | Московская область, Химки, проспект 50 лет октября, 17
  Кузнецов Владимир Анатольевич       | Ростовская область, Ростов-на-Дону, переулок Дружбы, 51
  Соколова Елена Андреевна            | Свердловская область, Екатеринбург, бульвар Цветной, 64
  Попова  Татьяна Александровна       | Санкт-Петербург, улица Ленина, 11
  Лебедев Андрей Аркадьевич           | Ростовская область, Ростов-на-Дону, переулок Смирновский, 100
  Козлов Алексей Артемович            | Москва, улица Ленина, 3
  Новикова Ольга Андреевна            | Санкт-Петербург, бульвар Петровский, 45
    Морозов Николай Богданович         | Рязанская область, Рязань, проспект Московский, 67
  Петров Наталья Александровна        | Ростовская область, Ростов-на-Дону, улица Ленина, 65
  Волкова Анна Валентиновна           | Москва, улица Ленина, 73
  Соловьёв Иван Валерьевич            | Москва, переулок Глинки, 33
  Васильев Дмитрий Васильевич         | Ростовская область, Ростов-на-Дону, улица Ленина, 25
  Зайцева Ирина Викторовна            | Санкт-Петербург, бульвар Волжский, 74
  Павлова  Мария Витальевна           | Москва, проспект Свободы, 81
  Семёнов Михаил Владимирович         | Свердловская область, Екатеринбург, переулок Некрасовский, 44
  Голубева Светлана Владиславовна     | Ростовская область, Ростов-на-Дону, улица Ленина, 44
  Виноградова Екатерина Владиславовна | Москва, бульвар Победы, 85
  Богданов Евгений Вячеславович       | Санкт-Петербург, проспект Революции, 3
  Воробьёв Виктор Геннадиевич         | Ростовская область, Ростов-на-Дону, улица Дзержинского, 20
  Фёдорова Анастасия Георгиевна       | Рязанская область, Рязань, улица Победы, 55
  Михайлов Юрий Григорьевич           | Москва, переулок Лермонтовский, 45
  Беляева Юлия Валентиновна           | Рязанская область, Рязань, бульвар Гагарина, 50
  Тарасова Валентина Денисовна        | Москва, улица Ленина, 54
  Белова Галина Валентиновна          | Санкт-Петербург, проспект Невский, 30
  Комарова Людмила Евгеньевна         | Рязанская область, Рязань, улица Ленина, 15
  Орлов Василий Егорович              | Ростовская область, Ростов-на-Дону, бульвар Дзержинского, 19
  Киселёв Игорь Ефимович              | Москва, проспект Красный, 10
  Макаров Анатолий Иванович           | Санкт-Петербург, улица Ленина, 27
  Андреев  Олег Иваныч                | Москва, переулок Тургеневский, 79
  (30 строк)
  Task:
  Выведите для каждого клиента из таблицы purchases его фамилию и инициалы, номер   телефона, а также его категорию: если вторая цифра телефона = 9, то телефон мобильный, иначе городской;
  Decision:
  starter-# select  
    surname || ' ' || substr(name, 1, 1) || '. ' || substr(second_name, 1, 1) as client,
    phone_number, 
    case 
      when phone_number like '_9%' 
        then 'мобильный'
      when phone_number not like '_9%' 
        then 'городской'
      when phone_number is NULL
        then 'значение не задано'
    end as type 
  from purchases;
  client  phone_number    type
  Смирнов А. А    74950054758 городской
  Иванов С. А 79061793723 мобильный
  Кузнецов В. А   79036038662 мобильный
  Соколова Е. А   74951752838 городской
  Попова Т. А 79209217902 мобильный
  Лебедев А. А    74999545208 городской
  Козлов А. А 74999545205 городской
  Новикова О. А   74999545202 городской
  Морозов Н. Б    NULL    значение не задано
  Петров Н. А 74999937334 городской
  Волкова А. В    74950692731 городской
  Соловьёв И. В   77767813970 городской
  Васильев Д. В   74951662623 городской
  Зайцева И. В    79093871696 мобильный
  Павлова М. В    74953740142 городской
  Семёнов М. В    NULL    значение не задано
  Голубева С. В   74995861301 городской
  Виноградова Е. В    74995860591 городской
  Богданов Е. В   74995861296 городской
  Воробьёв В. Г   74953741652 городской
  Фёдорова А. Г   74950097648 городской
  Михайлов Ю. Г   74992166013 городской
  Беляева Ю. В    78002220480 городской
  Тарасова В. Д   73432203735 городской
  Белова Г. В 73432203718 городской
  Комарова Л. Е   74993506931 городской
  Орлов В. Е  79031193345 мобильный
  Киселёв И. Е    74996382013 городской
  Макаров А. И    79253628473 мобильный
  Андреев О. И    74951203035 городской
  Task:
  Выведите для каждого клиента из таблицы purchases его фамилию и инициалы, а  также его email и домен электронной почты:
          ya.ru или yandex.ru -> яндекс
          mail.com -> мейл
          gmail.com -> гугл
          yahoo.com -> яху
  Decision:
  starter=#  SELECT TRIM(surname) ||' '|| SUBSTR(LTRIM(name), 1, 1) ||'. '|| SUBSTR(LTRIM(second_name), 1, 1) ||'. ' AS full_name, email,
  starter-# CASE
  starter-#     WHEN TRIM(LOWER(email)) LIKE '%@ya.ru' OR TRIM(LOWER(email)) LIKE '%@yandex.ru' THEN 'яндекс'
  starter-#         WHEN TRIM(LOWER(email)) LIKE '%@mail.com'  THEN 'мейл'
  starter-#         WHEN TRIM(LOWER(email)) LIKE '%@gmail.com'  THEN 'гугл'
  starter-#         WHEN TRIM(LOWER(email)) LIKE '%@yahoo.com'  THEN 'яху'
  starter-#         WHEN email IS NULL OR email = 'NULL' THEN  'пусто'
  starter-#         ELSE 'не известный'
  starter-#    END AS domen
  starter-# FROM purchases;
      full_name      |        email        | domen
  --------------------+---------------------+--------
  Смирнов А. А.      | smirnov@ya.ru       | яндекс
  Иванов С. А.       | ivanov@gmail.com    | гугл
  Кузнецов В. А.     | kuznecov@yandex.ru  | яндекс
  Соколова Е. А.     | sokolova@mail.com   | мейл
  Попова Т. А.       | popova@yahoo.com    | яху
  Лебедев А. А.      | lebedev@yahoo.com   | яху
  Козлов А. А.       | kozlov@ya.ru        | яндекс
  Новикова О. А.     | novikova@yandex.ru  | яндекс
  Морозов Н. Б.      | morozov@gmail.com   | гугл
  Петров Н. А.       | PETROV@GMAIL.COM    | гугл
  Волкова А. В.      | volkova@gmail.com   | гугл
  Соловьёв И. В.     | soloviyev@gmail.com | гугл
  Васильев Д. В.     | vasiliyev@mail.com  | мейл
  Зайцева И. В.      | zayceva@ya.ru       | яндекс
  Павлова М. В.      | PAVLOVA@GMAIL.COM   | гугл
  Семёнов М. В.      | semenov@mail.com    | мейл
  Голубева С. В.     | golubeva@gmail.com  | гугл
  Виноградова Е. В.  | vinogradova@ya.ru   | яндекс
  Богданов Е. В.     | BOGDANOV@gmail.com  | гугл
  Воробьёв В. Г.     | vorobiyev@gmail.com | гугл
  Фёдорова А. Г.     | NULL                | пусто
  Михайлов Ю. Г.     | mikhaylov@mail.com  | мейл
  Беляева Ю. В.      | NULL                | пусто
  Тарасова В. Д.     | belova@gmail.com    | гугл
  Белова Г. В.       | NULL                | пусто
  Комарова Л. Е.     |  KOMAROVA@MAIL.COM  | мейл
  Орлов В. Е.        | orlov@gmail.com     | гугл
  Киселёв И. Е.      | NULL                | пусто
  Макаров А. И.      | makarov@mail.com    | мейл
  Андреев О. И.      | andreev@gmail.com   | гугл
  (30 строк)
  Task:
  Из таблицы purchases отобрать только тех клиентов, которые:
          совершили покупку в ноябре 2021 года;
          на суммы свыше 5 тысяч рублей (с учетом текущей скидки)
          известен полный адрес и номер телефона
      Вывести     фамилию, имя и отчество, 
          номер телефона,
          текста sms-сообщения: 
      “Уважаемый/ая (имя клиента), рады сообщить, что в нашем магазине начинается     распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!”
  Decision:
  select 
      surname || ' ' || substr(name, 1, 1) || '. ' || substr(second_name, 1, 1) as client,
      phone_number,
      'Уважаемый/ая ' ||surname || ' ' || substr(name, 1, 1) || '. ' || substr(second_name, 1, 1)||', 
      рады сообщить, что в нашем магазине начинается  
      распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!' as sms
      --purchase_amt_rub*(1-current_discount)
  from purchases
  where 
      purchase_dt like '%11.2021'
      and region is not NULL 
      and city is not NULL 
      and street_type is not NULL 
      and street_nm is not NULL 
      and house_num is not NULL 
      and phone_number is not NULL
      and
      (case currency_nm 
          when 'US' 
              then  60.5
          when 'EUR' 
              then 60.6
          when 'CNY' 
              then 8.7 
          else 1
      end *purchase_amt)*(1-
      replace(coalesce(case current_discount
            when 'NULL'
                then 0 
            else current_discount
        end,0),'%','')*0.01) > 5000
  client  phone_number    sms
  Смирнов А. А    74950054758 Уважаемый/ая Смирнов А. А, рады сообщить, что в нашем магазине начинается распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!
  Иванов С. А 79061793723 Уважаемый/ая Иванов С. А, рады сообщить, что в нашем магазине начинается распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!
  Кузнецов В. А   79036038662 Уважаемый/ая Кузнецов В. А, рады сообщить, что в нашем магазине начинается распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!
  Волкова А. В    74950692731 Уважаемый/ая Волкова А. В, рады сообщить, что в нашем магазине начинается распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!
  Васильев Д. В   74951662623 Уважаемый/ая Васильев Д. В, рады сообщить, что в нашем магазине начинается распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!
  Виноградова Е. В    74995860591 Уважаемый/ая Виноградова Е. В, рады сообщить, что в нашем магазине начинается распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!
  Богданов Е. В   74995861296 Уважаемый/ая Богданов Е. В, рады сообщить, что в нашем магазине начинается распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!
  Орлов В. Е  79031193345 Уважаемый/ая Орлов В. Е, рады сообщить, что в нашем магазине начинается распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!
  Макаров А. И    79253628473 Уважаемый/ая Макаров А. И, рады сообщить, что в нашем магазине начинается распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!
  Decision:
  select 
      first_name, 
      last_name, 
      department_id, 
      (select 
          distinct department_name 
      from departments 
      where departments.department_id=employees.department_id) as department_name
  from employees 
  Task:
  Для задачи 11 отобрать только клиентов из городов Москва, Санкт-Петербург и     Ростов-на-Дону и изменить текст sms-сообщения на:
      “Уважаемый (имя клиента), рады сообщить, что в нашем магазине начинается    распродажа товаров. Ждем Вас по адресу: 
      (для Москвы: Москва, Ленинградский проспект 7)
      (для Санкт-Петербурга: Санкт-Петербург, Невский проспект 23) 
      (для Ростова-на-Дону: Ростов-на-Дону, ул. Садовая 101), каждый день с 9.00 до 20.00!”
  Task:
  Для каждого клиента из таблицы purchases выведите размер новой скидки, рассчитанной на основе объемов его покупок:
          Если клиент купил более 10 единиц товаров, то скидка 10%
          Если клиент потратил на покупки с учетом текущей скидки более 7 тыс. рублей (или эквивалентной сумме в иной валюте), то скидка 20%
      Выведите идентификатор клиента и размер его скидки в формате 'm %'
  Task:
  Выведите из таблицы purchase только те записи, для которых в поле current_discount содержится символ % и запишите эти записи в новую таблицу purchases_bag

Developer, Interview
    Task:
    ((X > Y) && ( X <= Z)) = 1 при каких значениях X, Y и Z?
    Decision:
    X = 1, Y = 0, Z = 1
    Task:
    ((( X != Y) != Z) || X) = 0 при каких значениях X, Y и Z?
    Decision:
    X = 0, Y = 0, Z = 0
    X = 0, Y = 1, Z = 1
    Task:
    В каком случае утверждение с операндом "&&" при переменных А и В верно?
    Decision:
    Если верны и А, и В
    Task:
    В каком случае утверждение с операндом "!=" при переменных А и В верно?
    Decision:
    Если А и В неодинаковы
    Task:
    (X && !Y) = 1 при каких значениях Х и Y?
    Decision:
    X = 1, Y = 0
    Task:
    Ввод а, b, c
    d = (a — c) * b
    e = d / b
    f = e + c
    f = 3 * f
    Вывод f
    Чему будет равен вывод?
    Decision:
    3 * a
    Task:
    В каких случаях утверждение с операндом ">=" при переменных А и В верно?
    Decision:
    Если А истинно
    Task:
    В каком из случаев утверждение A > В верно?
    Decision:
    Если А истинно, а B != A
    Task:
    (!(!(!X == Y))) = 1 при
    Decision:
    Х = 1, Y = 0
    Task:
    ((X < Z) && Y) = 0 при
    Decision:
    X = 0, Y = 0, Z = 0
    X = 0, Y = 0, Z = 1
    X = 0, Y = 1, Z = 0
    X =1, Y = 0, Z = 0
    X = 1, Y = 0, Z = 1
    X = 1, Y = 1, Z = 0
    X = 1, Y = 1, Z = 1
    Task:
    Как будет выглядеть набор данных после 1-го цикла пузырьковой сортировки от меньшего к большему (при следующем наборе данных: 3, 15, -9, 0, 17, 16)?
    Decision:
    3, -9, 0, 15, 16, 17

Python, Interview Sberbank работа с числами
	Task:
	Написать программу вывода простых чисел и объяснить почему написанный вариант реализации является оптимальным с точки зрения быстродействия.
	Task:
	Переведите шестнадцатеричное число 1AF2_16 в десятичную систему счисления.
	Decision:
	print(int('1AF2', 16))
	Task:
	Переведите двоичное число 111111_2 в десятичную систему счисления.
	Decision:
	print(int('111111', 2))
	Task:
	В саду 88_n фруктовых деревьев, из них 32_n3 яблони, 22_n груши, 16_n слив и 17_n вишен. В какой системе счисления посчитаны деревья? Переведите числа из n-ой системы счисления в десятичную и составьте уравнение.
	Decision:
	for n in range(8, 16):
	    if 8 * n + 8 == (3 * n + 2) + (2 * n + 2) + (n + 6) + (n + 7):
	        print(n)
	Task:
	Переведите десятичное число 1000_10 в шестнадцатеричную систему счисления.
	Decision:
	print(hex(1000)[2:])
	Task:
	Переведите десятичное число 513_10 в двоичную систему 
	Decision:
	print(bin(513))
	Task:
	На вход программе подается натуральное число в десятичной системе счисления. Напишите программу, которая переводит его в двоичную, восьмеричную и шестнадцатеричную системы счисления.
	Decision:
	a = int(input())
	bin_num = bin(a)  
	oct_num = oct(a)  
	hex_num = hex(a)  
	print(bin_num[2:]) 
	print(oct_num[2:]) 
	print(hex_num[2:].upper()) 
  Task:
  Задан массив из 10 чисел. Напишите программу, которая выводит их сумму.
  Decision:
  $ python3 Py-Draft.py
  0   0
  1   1
  2   3
  3   6
  4   10
  5   15
  6   21
  7   28
  8   36
  9   45
  $ cat Py-Draft.py
  var = 0
  summ=var
  while var < 10:
      print(var,' ', summ)
      var += 1
      summ = var+ summ
  Task:
  В данном списке l = [1, 5, 3, 100] найдите значение 5 и замените его на значение 55.
  Модификатор сложности*: преподаватель даст рандомный список на n элементов, нужно заменить указанный преподавателем элемент во всем списке.
  Decision:
  $ cat Py-Draft.py
  l = [1, 5, 3, 100]
  l[l.index(5)] = 55
  print(l)
  $ python3 Py-Draft.py
  [1, 55, 3, 100]
  Task:
  В заданном списке (преподаватель сгенерирует для вас список), возьмите каждый третий элемент, начиная с элемента с индексом 4 и до индекса 15 (невключительно).
  Decision:
  $ cat Py-Draft.py
  my_list = [8, 6, 2, 4, 2, 9, 1, 3, 8, 6, 8, 4, 6, 9, 7, 1, 6, 4, 8, 10]
  print(my_list[4:15:3])administrator@Asus:~$
  $ python3 Py-Draft.py
  [2, 3, 8, 9]
  Task:
  Программа получает на вход натуральное число n > 1.
  Выведите минимальный делитель этого числа, отличный от единицы. К примеру для числа 12 делителями являются 1, 2, 3, 4, 6, 12.
  Decision:
  $ cat /home/YOUR-DIR/test.py            
  # Ваше решение
  n = int(input())
  for i in range(2, n+1):
    if n%i == 0:
      print(i)
      break                                                    
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  7
  7
  $ cat /home/YOUR-DIR/test.py            
  # Ваше решение
  n = int(input())
  i = 2
  while n % i != 0:
    i += 1
  print(i)
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  7
  7
  Task:
  Давайте переберем все числа от а до b включительно и будем их выводить на экран, при этом нужно выполнить следующие условия:
  Пропускать (не выводить) числа, которые делятся на 2 или на 3
  Если встречаете число, кратное 18, необходимо принудительно закончить цикл, само это число не выводить
  Формат ввода
  Вводится два натуральных числа a и b в отдельных строках.
  Формат вывода
  Вывести все числа на интервале от a до b включительно согласно условиям в пунктах 1 и 2
  Decision:
  $ cat /home/YOUR-DIR/test.py            
  # Ваше решение
  a = int(input('a= '))
  b = int(input('b= '))
  for i in range(a, b+1):
    if i%18 == 0:
      break
    elif i%2==0 or i%3==0:
      continue
    print(i)
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  a= 10
  b= 30
  11
  13
  17
  Task:
  Сиракузская последовательность, или последовательность Коллатца, строится так: возьмём натуральное число n; если оно чётное, то заменим его числом n/2; если же оно нечётное, то заменим его числом 3n+1. Получившееся число — следующее в сиракузской последовательности после числа n. Затем заменяем получившееся число по тому же правилу, и так далее.
  Обычно, если проделать такую замену достаточно много раз, мы приходим к числу 1 (за которым следует снова 1). Например:
  8 -> 4 -> 2 -> 1 или 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1.
  Определите, сколько шагов потребуется сиракузской последовательности, стартующей с заданного числа, чтобы прийти к 1.
  Если вы обнаружите число, сиракузская последовательность от которого не приходит к 1, то... вы, скорее всего, ошиблись. Но если нет, то поздравляем: вы прославитесь, ведь вопрос о том, всегда ли сиракузская последовательность приходит к 1 (независимо от начального числа), давно будоражит умы математиков.
  Формат ввода
  Вводится одно натуральное число n.
  Формат вывода
  Выводится одно число — количество шагов, необходимое стартующей от n сиракузской последовательности, чтобы впервые дойти до 1.
  Ввод
  10
  Вывод
  6
  Ввод
  16
  Вывод
  4
  Decision:
  $ cat /home/YOUR-DIR/test.py            
  # Ваше решение
  a = int(input('a= '))
  b = int(input('b= '))
  for i in range(a, b+1):
    if i%18 == 0:
      break
    elif i%2==0 or i%3==0:
      continue
    print(i)                                                   
  $ /bin/python3.11 /home/YOUR-DIR/test.py                                                    
  16
  4
  Task:
  При помощи генератора-списка сохраните в переменной zeroes список из 100 нулей.
  Выводить ничего не нужно, только правильно заполните список в переменной zeroes.
  Decision:
  $ cat /home/YOUR-DIR/test.py            
  # Ваше решение
  l = [0]*100
  print(l)
  my_list = [0 for _ in range(100)]
  print(my_list)  
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Task:
  При помощи генератора-списка создайте список [1, 2, 3, ..., n], само натуральное число n будет поступать на вход вашей программе.
  В качестве ответа просто выведите получившийся список.
  Decision:
  $ cat /home/YOUR-DIR/test.py            
  n = int(input())
  lst = [i for i in range(1, n+1)]
  print(lst)
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  10
  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  Task:
  На вход программе подается натуральное число n (n<=1000). При помощи генератора списка с условием (list comprehension) создайте список, состоящий из делителей введенного числа.
  Decision:
  $ cat /home/YOUR-DIR/test.py            
  n = int(input())
  list_1 = [i for i in range(1, n+1) if n%i == 0]
  print(list_1) 
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  9
  [1, 3, 9]
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  25
  [1, 5, 25]
  Task:
  Напишите функцию calc_sum(), которая на вход будет принимать целое положительное число, а возвращает сумму всех чисел от 0 до указанного аргумента, делящихся нацело на 3 или на 5.
  Decision:
  $ cat /home/YOUR-DIR/test.py 
  #1           
  def calc_sum(n):
    summ = 0
    for i in range(n+1):
      if i%3==0 or i%5==0:
        summ +=i
    return summ
  print(calc_sum(10))
  #2
  def calc_sum(n):
    return sum([i for i in range(n + 1) if i % 3 == 0 or i % 5 == 0])
  print(calc_sum(10)) 
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  33
  33
  Task:
  Напишите функцию sum_num для суммирования всех цифр строки. Функция должна принимать строку, суммировать все ее символы, которые являются цифрами, и в качестве ответа выводить найденную сумму.
  Ввод:
  123QwertY321
  Вывод:
  12
  Decision:
  $ cat /home/YOUR-DIR/test.py            
  def sum_num(s1):
    a = 0
    for ch in s1:
      if ch.isdigit():
        a += int(ch)
    return a
  print(sum_num('123QwertY321'))
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  12
  Task:
  Напишите функцию, которая на вход принимает 3 аргумента: список, проверяемый элемент списка и номер вхождения, и удаляет из списка искомый элемент на указанном вхождении. Функция должна возвращать исправленный список или, если не выполняется одно из условий, исходный список.
  [1,2,3,1,2,3], 2, 2 -> [1,2,3,1,3]
  Decision:
  $ cat /home/YOUR-DIR/test.py            
  my_list = [1,2,3,4,5,6,4,3,2,1,2,3,3,3,3,3,3,3,3,3,3]
  print(my_list)
  def pop_pos_el(ls,el,pos):
    tg_pos = 0
    for i in range(len(ls)):
      if ls[i] == el:
        tg_pos+=1
      if tg_pos == pos:
        ls.pop(i)
        return ls
    return ls
  print(pop_pos_el(my_list, 3,15))  
  $ /bin/python3.11 /home/YOUR-DIR/test.py                                                    
  [1, 2, 3, 4, 5, 6, 4, 3, 2, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
  [1, 2, 3, 4, 5, 6, 4, 3, 2, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
  Task:
  Напишите lambda функцию, которая принимает одно число и увеличивает его на 10.
  Decision:
  $ cat /home/YOUR-DIR/test.py            
  print((lambda n: n + 10)(int(input()))) 
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  10
  20
  Task:
  На вход программа получает две строки. В первой находится список целых чисел, разделенных пробелом. Во второй строке программа получает натуральное число group_size. Программа должна определить, можно ли полученный список разделить на группы размера group_size так, чтобы в каждой группе все элементы были одинаковы. На выходе программа должна вывести True или False.
  Decision:
  $ cat /home/YOUR-DIR/test.py            
  #string = '0 6 4 4 5 4 5 5 6 5 2 5 5 0 1 3 1 7 7 6 2 1 2 5 0 0 1 6 6 2'
  #lst=string.split()
  lst=input().split()
  #group_size=int(2)
  group_size=int(input())
  numbers = sorted(map(int, lst)) # преобразуем в список чисел и сортируем
  for num in set(numbers):
      c = numbers.count(num) # сколько раз число встречается в списке
      if c%group_size: # если кол-во появлений в списке не кратно размеру группы - задача невыполнима
          print(False)
          break
  else:
      # сюда программа доходит, если проверила все числа и все прошли проверку кол-ва вхождений
      print(True)                                                                                                                
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  0 6 4 4 5 4 5 5 6 5 2 5 5 0 1 3 1 7 7 6 2 1 2 5 0 0 1 6 6 2
  2
  False
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  0 2 2 2 2 2 3 2 0 2 0 0 0 3 0 3 3 3 0 1 1 0 3 2
  2
  True
  Task:
  Найдите в списке два элемента, произведение которых является наибольшим по модулю. На вход программа получает список целых чисел, разделенных пробелами. На выходе программа должна напечатать число.
  Decision:
  $ cat /home/YOUR-DIR/test.py                                                              
  #s = '-23 10 -6 -23 -8 11 -29 -8 -1 -28 -21 -24 -29 -7 10 0 14'
  #l = list(map(int, s.split()))
  #for i in range(0, len(l)):
  #    if l[i]<0:
  #        l[i]=abs(l[i])
  #    print(i,l[i])
  #m1=sorted(l, reverse=True)[0]
  #m2=sorted(l, reverse=True)[1]
  #print(m1*m2)
  spis = input().split(' ')
  sp_list = list(spis)
  sp_nums = [int(s) for s in sp_list]
  sp_nums_un = list(set(sp_nums))
  #print (sp_nums)
  count = 0 
  ij = 0
  ija = 0
  pr = 0
  pr_1 = 0
  for i in sp_nums: 
      for j in sp_nums_un:
          count = sp_nums.count(i)
          if sp_nums.index(j)!=sp_nums.index(i) or count >=2: 
            ija=abs(i*j)
          ij=i*j
  #        print(i, j, ij, ija, sp_nums.index(i), sp_nums.index(j), count)       
          if ija>=abs(pr): 
              pr=i*j
  #               print (i)
  print(pr)   
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  -23 10 -6 -23 -8 11 -29 -8 -1 -28 -21 -24 -29 -7 10 0 14
  841
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  11 -26 -6 29 23 -7 -1 -14 -3 22 12 6 -19 14 -20 -18 10 3
  -754
  Task:
  В программе задан список lst. На вход программе подаются три целых числа insert_index, number_to_insert, number_insertions, разделенных пробелом. Вставьте в список lst число number_to_insert на позицию insert_index number_insertions раз и выведите список на экран.
  Decision:
  $ cat /home/YOUR-DIR/test.py            
  lst = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
  #s='7 3 4'
  #l = list(map(int, s.split()))
  l=input().split()
  for i,item in enumerate(l):
      l[i]=int(item)
  insert_index=l[0]
  number_to_insert=l[1]
  number_insertions=l[2]
  #print(lst)
  #print(l)
  #for i in range(0,len(lst)):    
      #print(i,lst[i])
      #lst.append
  for i in range(0,number_insertions):
      lst.insert(insert_index, number_to_insert)
  print(lst) 
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  7 3 4
  [0, 1, 2, 3, 4, 5, 6, 3, 3, 3, 3, 7, 8, 9]

Python, Interview Sberbank работа со строками
  Task:
  Дана строка '2378O79213'
  Вывести с 5 по 7 символы включительно
  Вывести длину строки
  Вывести предпоследний символ
  Проверить состоит ли строка только из чисел
  Вывести все символы с четными индексами
  Если в строке есть символ '3', то заменить его на ‘CCC’ 
  Decision:
  $ cat Py-Draft.py
  s = '2378O79213'
  s[4:7]
  len(s)
  s[-2]
  s.isalpha()
  s[::2]
  s.replace('3','222')
  Task:
  Написать программу, которая принимает на вход 2 параметра – строку и подстроку и производит поиск подстроки в строке. Если находит, то выводит 'Бинго', иначе 'Увы'. Вхождение должно быть найдено независимо от регистра
  Decision:
  $ cat Py-Draft.py
  s1 = 'abcdeFg'
  s2 = 'defmmm'
  if s1.lower().find(s2.lower()) >= 0:
    print('Бинго')
  else:
    print('Увы')
  print('Бинго' if s1.lower().find(s2.lower()) >= 0 else 'Увы')
  $ python3 Py-Draft.py
  Увы
  Увы
  Task:
  Примите на вход строку. Если введенную строку можно преобразовать во float – выполните преобразование и выведете удвоенный результат. Иначе выведете «Преобразование невозможно»
  Decision:
  $ cat Py-Draft.py
  s = input()
  if s.isdigit() or s.replace('.','').isdigit() and s.find('.')==s.rfind('.'):
    print(float(s))
  else:
      print("преобразовние невозможно")
  print(float(s)*2 if s.isdigit() or s.replace('.','').isdigit() and s.find('.') == s.rfind('.') else 'Невозможно')administrator@Asus:~$
  $ python3 Py-Draft.py
  fd
  преобразовние невозможно
  Невозможно
  $ python3 Py-Draft.py
  2342
  2342.0
  4684.0
  Task:
  Проверьте, является ли строка палиндромом (прямой порядок букв равен обратному).
  Decision:
  $ cat Py-Draft.py
  s = 'лёша на полке клопа нашёл'
  s_new = s.lower().replace(' ','')
  print('Палиндром' if s_new==s_new[::-1] else 'Увы')
  $ python3 Py-Draft.py
  Палиндром
  Task:
  Создайте пустой список. Примите на вход 5 пользовательских вводов (5 произвольных строк). Добавьте каждый ввод в список, если его еще нет в этом списке.
  Decision:
  $ cat Py-Draft.py
  m_list = []
  i = 0
  while i<5:
    i += 1
    s = input()
    if not s in m_list:
      m_list.append(s)
  print(m_list)
  $ python3 Py-Draft.py
  1
  2
  3
  3
  4
  ['1', '2', '3', '4']
  Task:
  Напишите программу, которая получает на вход список элементов или строку и преобразует их в множество
  Decision:
  $ cat Py-Draft.py
  s = 'abcdefgabc'
  my_set = set(s)
  print(my_set)
  $ python3 Py-Draft.py
  {'g', 'a', 'c', 'b', 'e', 'f', 'd'}
  Task:
  Дан простой текст. Определите сколько в тексте различных слов   
  P.S.: пробелы, точки и запятые не считаются за слова
  P.S.: необходимо учесть, что слова бывают в разных регистрах
  Decision:
  $ cat Py-Draft.py
  s = """
  Lorem Ipsum is simply dummy text of the printing and typesetting industry.
  Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,
  when an unknown printer took a galley of type and scrambled it to make a
  type specimen book. It has survived not only five centuries, but also the
  leap into electronic typesetting, remaining essentially unchanged.
  It was popularised in the 1960s with the release of Letraset sheets
  containing Lorem Ipsum passages, and more recently with desktop publishing
  software like Aldus PageMaker including versions of Lorem Ipsum.
  """
  print(len(set(s.lower().replace(',','').replace('.','').replace('\n','').split())))
  $ python3 Py-Draft.py
  65
  Task:
  Написать программу, которая принимает на вввод от пользователя один символ. Если этот символ –  "+" или "*", то программа запрашивает два целых числа на ввод и выводит результат выбранной математической операции с этими числами. Иначе, если считались любые другие символы, выводится ошибка: "operation unknown". Примечание: считывать два целых числа нужно только если были считаны "+" или "*".
  Decision:
  $ cat Py-Draft.py
  operation = input("operation: ")
  if operation == '+':
      numb1 = int(input("numb: "))
      numb2 = int(input("numb: "))
      print(numb1+numb2)
  elif operation == '*':
      numb1 = int(input("numb: "))
      numb2 = int(input("numb: "))
      print(numb1*numb2)
  else:
      print('operation unknown')
  $ python3 Py-Draft.py
  operation: +
  numb: 1
  numb: 2
  3
  $ python3 Py-Draft.py
  operation: *
  numb: 2
  numb: 3
  6
  $ python3 Py-Draft.py
  operation: /
  operation unknown
  Task:
  Напишите функцию, которая принимает от пользователя имя и выводит сообщение в формате: "Hello, !".
  Примечание: ожидается вывод в одну строку, как в тестах.
  Decision:
  $ cat Py-Draft.py
  name = input("name = ")
  def show_hello_name(name):
    print("Hello, "+name+"!")
  show_hello_name(name)
  $ python3 Py-Draft.py
  name = David
  Hello, David!
  Task:
  В слове "антананариву" вместо буквы "а" выведите "о", используя цикл for и условный оператор if.
  Decision:
  $ cat Py-Draft.py
  for symbol in 'антананариву':
      if symbol == 'а':
        symbol='о'
      print(symbol,end='')
  $ python3 Py-Draft.py
  онтононориву
  Task:
  Напишите программу, которая печатает словарь alphabet, ключами которой являются русские строчные буквы, а значения - порядковые номера букв в алфавите, начиная с 1.
  Начало словаря выглядит следующим образом: {'a': 1, 'б': 2, …}
  В качестве ответа распечатайте полученный словарь alphabet.
  Decision:
  $ cat Py-Draft.py
  russian = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
  alphabet = {}
  for i in range(0,len(russian)):
    keys=russian[i]
    values=i+1
    #print(values,keys)
    alphabet[keys] =values
  print(alphabet)
  $ python3 Py-Draft.py
  {'а': 1, 'б': 2, 'в': 3, 'г': 4, 'д': 5, 'е': 6, 'ё': 7, 'ж': 8, 'з': 9, 'и': 10, 'й': 11, 'к': 12, 'л': 13, 'м': 14, 'н': 15, 'о': 16, 'п': 17, 'р': 18, 'с': 19, 'т': 20, 'у': 21, 'ф': 22, 'х': 23, 'ц': 24, 'ч': 25, 'ш': 26, 'щ': 27, 'ъ': 28, 'ы': 29, 'ь': 30, 'э': 31, 'ю': 32, 'я': 33}
  Task:
  Анаграммой строки S1 называется строка S2, которая получается из строки S1 путем перестановки символов. 
  На входе программа получает две строки: S1 и S2. Ваша задача выяснить, является ли строка S2 анаграммой строки S1. 
  Выведите YES, если является, и NO, если не является.
  Decision:
  $ cat Py-Draft.py
  s1, s2 = input(), input()
  ls1=[]
  ls2=[]
  for i in range(0,len(s1)):
      #print(i,s1[i])
      ls1.append(s1[i])
      ls1.sort(reverse=True)
  for j in range(0,len(s2)):
      #print(j,s2[j])
      ls2.append(s2[j])
      ls2.sort(reverse=True)
  if ls1 == ls2:
      print('YES')
  else:
      print('NO')
  #print(ls1,ls2)
  $ python3 Py-Draft.py
  abc
  cba
  YES
  $ python3 Py-Draft.py
  abc
  ghs
  NO
  Task:
  Из списка menu удалите второй суп со значением "солянка" и выведите новый список menu на экран.
  Decision:
  $ cat Py-Draft.py
  menu = ["харчо", "солянка", "плов", "ачик-чучук"]
  menu.remove("солянка")
  print(menu)
  $ python3 Py-Draft.py
  ['харчо', 'плов', 'ачик-чучук']
  Task:
  Преобразуйте строку с покупками shopstring в список покупок shoplist и выведите его на экран.
  Decision:
  $ cat Py-Draft.py
  shopstring = "яблоки##бананы##говядина##яйца"
  shoplist = shopstring.split('##')
  print(shoplist)
  $ python3 Py-Draft.py
  ['яблоки', 'бананы', 'говядина', 'яйца']
  Task:
  Добавьте пропущенные буквы в символьный ряд алфавита alphabet из первых 10 букв и выведите результат на экран.
  Decision:
  $ cat Py-Draft.py
  alphabet = ["a", "b", "d", "e", "f", "g", "i"]
  print(alphabet)
  alphabet.insert(2, "c")
  alphabet.insert(7, "h")
  alphabet.insert(9, "j")
  print(alphabet)
  $ python3 Py-Draft.py
  ['a', 'b', 'd', 'e', 'f', 'g', 'i']
  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
  Task:
  Напишите функцию, которая проверяет, является ли указанный числовой аргумент четным (True) или нет (False), и выведите соответствующее значение на экран. Числовой аргумент получите от пользователя.
  Decision:
  $ cat Py-Draft.py
  number = int(input("number = "))
  def is_even (number):
    if number%2==0:
      return True
    else:
      return False
  print("number is even to 2:", is_even(number))
  $ python3 Py-Draft.py
  number = 4
  number is even to 2: True
  $ python3 Py-Draft.py
  number = 3
  number is even to 2: False
  Task:
  Даны два натуральных числа a и b (известно, что b больше, чем a). Вывести наибольшее количество чисел, входящих в промежуток [a, b], произведение которых не превышает произведения чисел a и b.
  Decision:
  $ cat Py-Draft.py
  a = int(input())
  b = int(input())
  n=0
  maxn=1
  res=0
  for i in range(a,b+1):
    n=n+1
    maxn=maxn*n
    if maxn<=b:
          res=n
          #print(n,maxn,res)
  print(res)
  $ python3 Py-Draft.py
  1
  1000
  6
  Task:
  В следующем коде замените символы «???» так, чтобы полученный код создавал список чисел numeric_list от 1 до 5 включительно, и выведите список на экран.
  Decision:
  $ cat Py-Draft.py
  numeric_list = list()
  for i in range(1, 6):
      numeric_list.append(i)
  print(numeric_list)
  $ python3 Py-Draft.py
  [1, 2, 3, 4, 5]
  Task:
  Найдите максимальный и минимальный элементы в списке из числовых значений.
  Decision:
  $ cat Py-Draft.py
  lst = [int(x) for x in input().split(',')]
  emax=max(lst)
  emin=min(lst)
  print("lst:", lst)
  print("max:", emax)
  print("min:", emin)
  $ python3 Py-Draft.py
  10, 67, 86, 87, 12, 28, 32, 63, 41, 94
  lst: [10, 67, 86, 87, 12, 28, 32, 63, 41, 94]
  max: 94
  min: 10
  Task:
  Напишите функцию slice_tup(), которая принимает на вход кортеж и некоторый элемент, а возвращает кортеж, начиная с первого вхождения этого элемента и далее. Если элемента в кортеже нет, то возвращается исходный кортеж.
  Decision:
  $ cat Py-Draft.py
  def slice_tup(tup, el):
      #list_var=list(tup)
      #return list_var[el-1:]
      if el in tup:
          if tup.count(el) > 1:
              first_index = tup.index(el)
              second_index = tup.index(el, first_index + 1) + 1
              return tup[first_index:second_index]
          else:
              return tup[tup.index(el):]
      else:
          return tup
  print(slice_tup((1, 2, 3, 4), 2))
  print(slice_tup(('a', 'b', 'c', 'd'), 'd'))
  print(slice_tup((1, 2, 3, 4), 5))
  print(slice_tup(('a', 'b', 'c', 'd'), 'a'))
  $ python3 Py-Draft.py
  (2, 3, 4)
  ('d',)
  (1, 2, 3, 4)
  ('a', 'b', 'c', 'd')
  Task:
  Перед вами два списка. Посчитайте разность количества уникальных элементов этих двух списков и выведите ее на экран. Разность возьмите по модулю, воспользовавшись функцией abs().
  Decision:
  $ cat Py-Draft.py
  a = [int(x) for x in input().split(',')]
  b = [int(x) for x in input().split(',')]
  unique_a = list(set(a))
  #print(unique_a)
  #print(len(unique_a))
  unique_b = list(set(b))
  #print(unique_b)
  #print(len(unique_b))
  print(abs(len(unique_a)-len(unique_b)))
  $ python3 Py-Draft.py
  59, 72, 62, 18, 24, 59, 73, 55, 46, 82, 58, 40, 6, 52, 25, 8, 35, 20, 66, 54, 68, 31, 39, 16, 34, 82, 15, 98, 84, 100, 70, 68, 68, 35, 35, 53, 63, 65, 93, 100, 78, 43, 36, 50, 45, 8, 86, 5, 76, 87, 15, 77, 19, 72, 51, 30, 62, 67, 84, 73, 82, 8, 47, 21, 70, 72, 28, 34, 46, 52, 86, 46, 19, 12, 5, 84, 45, 30, 13, 83, 73, 80, 61, 33, 81, 88, 45, 41, 91, 90, 39, 55, 23, 71, 89, 41, 83, 33, 91, 26
  30, 46, 53, 53, 16, 48, 15, 22, 40, 8, 37, 46, 57, 59, 59, 24, 6, 3, 2, 14, 39, 8, 20, 40, 6, 1, 38, 47, 57, 50, 22, 8, 52, 0, 18, 35, 47, 52, 45, 56, 11, 9, 44, 31, 42, 16, 44, 0, 31, 31, 29, 29, 56, 51, 3, 30, 25, 34, 36, 41
  25
  Task:
  Во входной строке записана последовательность чисел, отделенных пробелами. Для каждого числа выведите слово YES (в отдельной строке), если это число ранее встречалось в последовательности, и NO, если не встречалось.
  Decision:
  $ cat Py-Draft.py
  a = input().split()
  for num,elem in enumerate(a):
      if elem in a[:num]:
          print('YES')
      else:
          print('NO')
  $ python3 Py-Draft.py
  1 2 3 2 3 4
  NO
  NO
  NO
  YES
  YES
  NO
  Task:
  Дана матрица размера 5х5 с нулевыми элементами. Замените все значения матрицы, стоящие на главной диагонали, на 1. (Главная диагональ квадратной матрицы состоит из элементов с индексами i и j, в которых i=j. То есть в данном случае это элементы с индексами 00, 11, 22, 33, 44.)
  Decision:
  $ cat Py-Draft.py
  matrix = [[0 for i in range(5)] for j in range(5)]
  #print(matrix)
  matrix[0][0]=1
  matrix[1][1]=1
  matrix[2][2]=1
  matrix[3][3]=1
  matrix[4][4]=1
  print(matrix)
  $ python3 Py-Draft.py
  [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]
  Task:
  Мы решали задание с заполнением главной диагонали, а теперь нам предстоит сделать аналогичную вещь для обратной (побочной) диагонали. Дана матрица размера 5х5 с нулевыми элементами. Замените все значения, стоящие на обратной (побочной) диагонали, на 1. (Побочная диагональ квадратной матрицы размера nхn состоит из элементов с индексами ij, в которых i+j=n-1. То есть в данном случае это элементы с индексами 04, 13, 22, 31, 40.)
  Decision:
  $ cat Py-Draft.py
  matrix = [[0 for i in range(5)] for j in range(5)]
  matrix[0][4]=1
  matrix[1][3]=1
  matrix[2][2]=1
  matrix[3][1]=1
  matrix[4][0]=1
  print(matrix)
  $ python3 Py-Draft.py
  [[0, 0, 0, 0, 1], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0]]
  Task:
  Используя метод .pop(), сформируйте и выведите на экран список в обратном порядке. На вход программа получает список чисел, разделенных пробелами, на выходе должна вывести этот список в обратном порядке.
  Decision:
  $ cat /home/YOUR-DIR/test.py 
  a = input().split()
  b = []
  #print(a)
  #print(b)
  while a:
      #print(a.pop(-1), end = ' ')
      c=a.pop(-1)
      b.append(int(c))
  print(b)
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  73 44 75 65 20 70 74 35 68 47
  [47, 68, 35, 74, 70, 20, 65, 75, 44, 73]
  Task:
  В одном тугрике 17 чогриков, а в одном чогрике 13 песо. Определите, на какое число тугриков и чогриков можно обменять n песо, если провести все возможные обменные операции. На вход программа получает одно натуральное число --- количество песо, а в качестве результата выводит три натуральных числа, разделенные пробелом: число тугриков, число чогриков, число оставшихся песо.
  Decision:
  $ cat /home/YOUR-DIR/test.py            
  p=int(input())
  ch=p//13
  #print(ch//17, ch, p%13)
  print(ch//17, ch%17, p%13) 
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  40
  0 3 1
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  1300
  5 15 0
  Task:
  Среди всех вхождений элемента в список найдите то, которое расположено ближе всего к началу или концу списка. 
  Если искомое вхождение равноудалено от начала и конца, выведите индекс, который ближе к началу. 
  Если элемента в списке нет, выведите -1. На вход программе подается две строки. 
  В первой строке находится число, индекс которого нужно найти, во второй строке находится список чисел, разделенных пробелами.
  Decision:
  $ cat /home/YOUR-DIR/test.py            
  a=input()
  #s='4 1 5 5 6 2 3 1 6 1 4 3 0 6 0 4'
  b=input().split()
  #print(a)
  #print(b)
  #print(b[:len(b)/2])
  #print(b[len(b)/2:])
  #for i in range(0,len(b)):
      #print(i,b[i])
      #if a in b:
          #print(i,b[i])
  if a in b:
      half = (len(b)-1)/2
      res=-max((abs(i-half), -i) for i, x in enumerate(b) if x == a)[1]
      print(res)
  else:
      print('-1')   
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  0
  4 1 5 5 6 2 3 1 6 1 4 3 0 6 0 4
  14
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  8
  4 1 5 5 6 2 3 1 6 1 4 3 0 6 0 4
  -1
  Task:
  Напишите функцию, которая на входе получает два числа и возвращает все делители первого числа, не превосходящие второе число. На вход программе подаются два числа, разделенных пробелом. На выходе программа должна напечатать список делителей, удовлетворяющих условию.
  Decision:
  $ cat /home/YOUR-DIR/test.py            
  def find_divisors(a, b):
      lst=[]
      for i in range(0,a):
          #print(i+1)
          if (a%(i+1)==0) and (i+1<=b):
              #print(i+1)
              lst.append(i+1)
      #print(lst)
      return lst
  #a=int(input())
  #b=int(input())
  lstin=input().split()#40 6
  #print(lstin)
  a=int(lstin[0])
  b=int(lstin[1])
  #print(a)
  #print(b)
  print(find_divisors(a, b)) 
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  40 6
  [1, 2, 4, 5]
  Task:
  Анаграммой строки S1 называется такая строка S2, которая получается из строки S1 путем перестановки символов. Напишите функцию, которая принимает на вход две строки и определяет является ли вторая строка анаграммой первой (возвращает True, если является и False, если не является)
  Decision:
  $ cat /home/YOUR-DIR/test.py            
  def anogramma(s1, s2):
      for i in s1:
          if s1.count(i) != s2.count(i) or len(s1)!=len(s2):
              return False
      return True
  print(anogramma('abcc', 'cbca'))
  print(anogramma('mama', 'amamy'))
  def anagram(s1, s2):
    for i in s1:
      if i in s2 and len(s1) == len(s2):
        continue
      else:
        return False
    return True
  print(anagram('abcc', 'cbca'))
  print(anagram('mamamama', 'mama'))  
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  True
  False
  True
  False
  Task:
  Определим буквенное расстояние между двумя строками как сумму модулей разностей количества вхождений букв в этих строках. 
  (Например, буквенное расстояние между строками 'abcde' и 'aaaee' равно 6: буквы a, b, c ,d ,e входят в первую строку по одному разу, во вторую строку входят три буквы a и две буквы e; тогда буквенное расстояние равно (3 - 1) + (1 - 0) + (1 - 0) + (1 - 0) + (2 - 1) = 6.) Найдите буквенное расстояние между двумя строками. На вход программа получает две строки, на выходе печатает натуральное число – буквенное расстояние между строками.
  Decision:
  $ cat /home/YOUR-DIR/test.py            
  from collections import Counter
  def f(a,b):
      a,b=Counter(a),Counter(b)
      diff = (a-b) | (b-a)
      return sum(diff.values())
  #i1='wgrlpdxcfdhtte'
  #i2='tvsajfjbygwzri'
  i1=input()
  i2=input()
  result=f(i1,i2)
  print(result) 
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  wgrlpdxcfdhtte
  tvsajfjbygwzri
  18

Python, Interview Sberbank geometry
	Task:
	объединение графиков
	Decision:
	$ mkdir Py-CombiningGraphs
	$ cd Py-CombiningGraphs
	$ python3 -m venv Py-Env
	$ source Py-Env/bin/activate
	$ vim Py-CombiningGraphs.py
	$ cat Py-CombiningGraphs.py
	import matplotlib.pyplot as plt
	import numpy as np
	x=np.array([0,1,2,3])
	y=np.array([3,8,1,10])
	plt.subplot(1,2,1)
	plt.plot(x,y)
	plt.title("FIRST")
	x=np.array([0,1,2,3])
	y=np.array([10,20,30,40])
	plt.subplot(1,2,2)
	plt.plot(x,y)
	plt.title("SECOND")
	plt.show()
	$ pip install matplotlib
	$ python Py-CombiningGraphs.py
	Matplotlib is building the font cache; this may take a moment.
	$ deactivate
  Task:
  Нарисуйте шахматную доску размера nхn, состоящую из нулей и единиц. Верхний левый символ должен быть единицей.
  Примечание: между единицами и нулями в строке не должно быть пробелов, каждая строка должна быть на новой строке (в тестах отображается по-другому для экономии пространства).
  Decision:
  $ cat Py-Draft.py
  n = int(input())
  for i in range(n):
    row = ""
    for j in range(n):
      if (i+j)%2==0:
        row += "1"
      else:
        row += "0"
    print(row)
  $ python3 Py-Draft.py
  3
  101
  010
  101
  $ python3 Py-Draft.py
  5
  10101
  01010
  10101
  01010
  10101
  $ python3 Py-Draft.py
  6
  101010
  010101
  101010
  010101
  101010
  010101
  Task:
  Выведите центрированную пирамидку указанной высоты, состоящую из символов *. 
  Каждый слой пирамидки состоит из нечетного количества звездочек и располагается на новой строке. 
  Все слои, кроме последнего необходимо центрировать при помощи пробелов. Значение высоты вводится пользователем.
  Примечание: при центрировании ожидаются пробелы с двух сторон от звездочек, не только слева
  Decision:
  $ cat Py-Draft.py
  n=int(input())
  for i in range(n):
      print('%s%s%s' % (' ' * (n-i-1), '*' * (i*2+1),(n-i-1)*' '))
  $ python3 Py-Draft.py
  5
      *
    ***
    *****
  *******
  *********
  Task:
  Расстояние между двумя точками в евклидовой метрике вычисляется как корень из суммы квадратов разностей соответствующих координат. (Например, квадрат расстояния между точками (1, 2) и (4, 6) равен (4-1)(4-1)+(6-2)(6-2)=25, а значит, само расстояние равно 5.) Вычислите длину ломаной в евклидовой метрике на плоскости. На вход программа получает две строки с числами, разделенными пробелами. Первая строка содержит координаты точек по оси абсцисс, вторая строка содержит координаты точек по оси ординат.
  Decision:
  $ cat /home/YOUR-DIR/test.py            
  length = 0
  x = '14 21 26 10 -9 -10 0 20 11 8 5 27 5 15 23 -7 18 3 2'
  y = '2 -7 28 21 -6 21 10 24 -5 15 16 17 3 25 10 28 11 26 19'
  x_arr = list(map(int, x.split()))
  y_arr = list(map(int, y.split()))
  for i in range(1, len(x_arr)):
      line = ((x_arr[i]-x_arr[i-1])**2 + (y_arr[i]-y_arr[i-1])**2)**.5
      length += line
  print('{:.2f}'.format(length)) 
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  400.05

Python, Пароли и Шифрование
  Task:
  Вам дан английский текст. Закодируйте его с помощью азбуки Морзе. Каждая буква заменяется на последовательность точек и тире. В качестве тире используйте обычный дефис «-», а в качестве точки — точку «.». Например, буква «g» превратится в трёхсимвольную строку «--.». Ниже в переменной morze для вашего удобства хранится словарь соответствия английских букв коду Морзе. Входные данные Весь текст записан в единственной строке. Текст состоит из английских букв и пробелов, других символов в тексте нет. В тексте не может быть двух или более пробелов подряд. Выходные данные Выведите каждое слово исходного текста, закодированное азбукой Морзе, на отдельной строке. Количество строк в ответе должно совпадать с количеством слов в исходном тексте. Между закодированными буквами ставится ровно один пробел. Например, слово «Help» превратится в «.... . .-.. .--.». Обратите внимание, что строчные и заглавные буквы кодируются одинаково.
  Decision:
  $ cat /home/YOUR-DIR/test.py            
  morze = {'a': '•—', 'b': '—•••', 'c': '—•—•', 'd': '—••',
          'e': '•', 'f': '••—•', 'g': '——•', 'h': '••••',
          'i': '••', 'j': '•———', 'k': '—•—', 'l': '•—••',
          'm': '——', 'n': '—•', 'o': '———', 'p': '•——•',
          'q': '——•—', 'r': '•—•', 's': '•••', 't': '—',
          'u': '••—', 'v': '•••—', 'w': '•——', 'x': '—••—',
          'y': '—•——', 'z': '——••'}
  text= input()
  text= text.lower()
  i=0
  for key in text:
      i=i+1
      if key == ' ': 
          print('') 
          i=0
      else:
          if i>=2: 
                  print (' ', end='')
          val = str(morze[key])
          print (val, end='')  
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  I want cheeseburger
  ••
  •—— •— —• —
  —•—• •••• • • ••• • —••• ••— •—• ——• • •—• 

Python, Основы
  Task:
  Создание собстенного модуля
  Для выполнения данного задания:
  Создайте файл my_calc.py,
  В этом файле напишите функцию calc_sum, которая на вход принимает два целых числа и возвращает их сумму. Пропишите аннотации к переменным, а также докстринг для функции,
  Загрузите файл во временное сессионное хранилище Google Colab
  Импортируйте файл в ноутбук:
  import my_calc
  Воспользуйтесь вашей функцией для сложения двух чисел: 10 и 5
  Выведите результат на экран
  Decision:
  $ touch /home/david/Документы/test/my_calc.py
  $ cat /home/david/Документы/test/my_calc.py 
  def calc_sum(oper1: int = 20, oper2: int = 30) -> int:
      """_summary_
      This method returns sum of 2 input arguments
      """
      total_sum = oper1 + oper2
      return total_sum                                                                                                                
  $ cat /home/YOUR-DIR/test.py            
  import my_calc as mc
  print(mc.calc_sum())
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  50

Python, Interview Sberbank работа с файлами
  Task:
  Откройте файл test_file.txt при помощи функции open с вашего Google Drive. Сохраните этот файл в переменную my_file.
  Примените метод .read() и функцию print().
  Выведите текст еще раз, только на этот раз только первые 10 символов.
  Воспользуйтесь методом .readline()
  Выведите на экран текст файла test_file. Однако, на каждой строке вначале необходимо указать порядковый номер этой строки. Вот так:
  -Мне нравится программировать на Python и решать алгоритмические задачки!
  -У меня обязательно все получится!
  Не забудьте переставить каретку для считывания в начало файла.
  Закройте ранее открытый в коллабе файл под именем переменной my_file. Если вы сохранили файл в другую переменную, то закройте тогда файл под именем вашей переменной.
  Decision:
  $ cat /home/YOUR-DIR/my_calc.py         
  def calc_sum(oper1: int = 20, oper2: int = 30) -> int:
      """_summary_
      This method returns sum of 2 input arguments
      """
      total_sum = oper1 + oper2
      return total_sum                                                                                                                
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  def calc_sum(oper1: int = 20, oper2: int = 30) -> int:
      """_summary_
      This method returns sum of 2 input arguments
      """
      total_sum = oper1 + oper2
      return total_sum
  $ cat /home/YOUR-DIR/test.py            
  file = open('/home/YOUR-DIR/my_calc.py')
  print(file.read())
  file.seek(0)
  #print(file.read(3))
  file.seek(0)
  file.readline()
  #print(file.readline())
  file.seek(0)
  cnt = 1
  for row in file:
    for word in row.split():
      #print(f'{cnt}. {word}')
      cnt+=1
  file.close()                                                                                                                
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  def
  $ cat /home/YOUR-DIR/test.py            
  file = open('/home/YOUR-DIR/my_calc.py')
  #print(file.read())
  file.seek(0)
  print(file.read(3))
  file.seek(0)
  file.readline()
  #print(file.readline())
  file.seek(0)
  cnt = 1
  for row in file:
    for word in row.split():
      #print(f'{cnt}. {word}')
      cnt+=1
  file.close()                                                                                                                
  $ /bin/python3.11 /home/YOUR-DIR/test.py
      """_summary_
  $ cat /home/YOUR-DIR/test.py            
  file = open('/home/YOUR-DIR/my_calc.py')
  #print(file.read())
  file.seek(0)
  #print(file.read(3))
  file.seek(0)
  file.readline()
  print(file.readline())
  file.seek(0)
  cnt = 1
  for row in file:
    for word in row.split():
      #print(f'{cnt}. {word}')
      cnt+=1
  file.close()                                                                                                                
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  1. def
  2. calc_sum(oper1:
  3. int
  4. =
  5. 20,
  6. oper2:
  7. int
  8. =
  9. 30)
  10. ->
  11. int:
  12. """_summary_
  13. This
  14. method
  15. returns
  16. sum
  17. of
  18. 2
  19. input
  20. arguments
  21. """
  22. total_sum
  23. =
  24. oper1
  25. +
  26. oper2
  27. return
  28. total_sum
  $ cat /home/YOUR-DIR/test.py            
  file = open('/home/YOUR-DIR/my_calc.py')
  #print(file.read())
  file.seek(0)
  #print(file.read(3))
  file.seek(0)
  file.readline()
  #print(file.readline())
  file.seek(0)
  cnt = 1
  for row in file:
    for word in row.split():
      print(f'{cnt}. {word}')
      cnt+=1
  file.close()
  Task:
  Откройте меню файловой системы, найдете свой файл test_file и откройте его. Он должен появится в соседнем окне справа.
  Теперь откройте файл test_file на дозапись данных в колабе. И допишите следующее сообщение с новой строчки:
  А еще мне нравится математика и анализ данных!
  Примечание: чтобы в текстовом файле сделать перенос строки необходимо воспользоваться зарезервированным сочетанием для переноса каретки на новую строку: \n
  После проделанной операции в окне должен измениться текст. Также после работы с файлом, закройте его при помощи метода .close().
  Decision:
  $ cat /home/YOUR-DIR/my_calc.py         
  def calc_sum(oper1: int = 20, oper2: int = 30) -> int:
      """_summary_
      This method returns sum of 2 input arguments
      """
      total_sum = oper1 + oper2
      return total_sum
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  $ cat /home/YOUR-DIR/my_calc.py         
  def calc_sum(oper1: int = 20, oper2: int = 30) -> int:
      """_summary_
      This method returns sum of 2 input arguments
      """
      total_sum = oper1 + oper2
      return total_sum
  А еще мне нравится математика и анализ данных! 
  Task:
  Напишите функцию create_file_with_numbers, которая принимает на вход одно целое положительное число - n.
  Функция должна создать файл с название "range_[number].txt" и наполнить его целыми числами от 1 до n включительно, причем каждое число записывается в отдельной строке. Не забудьте указать полный пусть к вашей папке на Google Drive.
  Пример: функция create_file_with_numbers(5) должна создать файл "range_5.txt" с содержимым
  1
  2
  3
  4
  5
  Decision:
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  $ cat /home/YOUR-DIR/range_10.txt       
  1
  2
  3
  4
  5
  6
  7
  8
  9
  10
  Task:
  При помощи контекстного менеджера откройте ваш файл и допишите с новой строчки следующую фразу:
  Эта строчка дописана при помощи контектстного менеджера!
  Затем откройте файл и убедитесь в его изменении.
  Decision:
  $ cat /home/YOUR-DIR/my_calc.py  
  def calc_sum(oper1: int = 20, oper2: int = 30) -> int:
      """_summary_
      This method returns sum of 2 input arguments
      """
      total_sum = oper1 + oper2
      return total_sum
  А еще мне нравится математика и анализ данных!                                                                                                                
  $ /bin/python3.11 /home/YOUR-DIR/test.py
  $ cat /home/YOUR-DIR/my_calc.py         
  def calc_sum(oper1: int = 20, oper2: int = 30) -> int:
      """_summary_
      This method returns sum of 2 input arguments
      """
      total_sum = oper1 + oper2
      return total_sum
  А еще мне нравится математика и анализ данных!
  Эта строчка дописана при помощи контектстного менеджера! 

Engineer, CryptoPro
    Task:
    ЭБ, загрузка файлов TFP, не загружаются файлы .тхт
    Decision:
    Чистим Кэш, настр, приват, очист истор, галочку на кеш, ок перезапуск мазилы, готово. на след день этот план не сработал, обновил сам браузер. тоже не работает. это косяк с сертификатом ЭБ. нужно просто перезаходить, так чтобы был выбор Бухгалтера и Директора, сброс соединения, закрыть мазилу, открыть мазилу. зашли по умолчанию и если не грузит файлы, главное меню, по умол заходит на НТТРс, в главном меню НТТР. если не загружается заходим в НТТР.
    Task:
    Пришло сообщение с казачейства, что организациям, использующим пользовательские сертификаты с электронного бюджета, нужно заменеить сертификат сервера "Континент TLS VPN клиент" в настройках ПО "Континент TLS клиент" в связи истечением срока
    Decision:
	  В письме есть ссылка на сертификат и инструкция. инструкция не сильно мне помогла, так как отличаются сами программы Континент TLS клиент. по нашему делается так: пуск, Континент TLS клиент, управление сертификатами, серверные сертификаты, видми наш lk.budjet.gov.ru, открыть хранилище, доверительные корневые сертификаты,  сертификаты, удаляем старый сертификат, импортировать, ищем новый и скаченный сертификат, устанавливаем,и ок и должен появиться новый сертификат в нашем окне. проверяем подлинность. все
    Task:
    Истек срок лицензии в CryptoPro.csp 4.0? 
    Decision:
    Заходим в regedit, в правке ищем ключ. 
    [-HKEY_CLASSES_ROOT\CLSID\{C8B655BB-28A0-4BB6-BDE1-D0826457B2DF}]
    Удаляем ключ в реестре. Запускаем сетап. Устанавливаем с пунктом исправить
    И проверяем срок лицензиии в CryptoPro.csp
    Или в CryptoPro.csp, управление компонентами, и добавляем серийный номер - 
    40400-00000-UKAC2-00QP8-MT29G
    организацию и пользователя указываем случайного
    Task:
    Установил приложение на Windows 10 Oracle Virtual Box 7. И при запуске Virtual Box компьютер каждый раз перезагружается и пишет: 
    код остановки: SYSTEM SERVICE EXCEPTION, что вызвало проблему: CProCtrl.4.0.0.19.sys.
    Decision:
    Обновить версию криптопро скачав на сайте https://cryptopro.ru/products/csp/downloads

Engineer, Network Основы
  Task:
  обжим кабеля ПК-ПК
  Decision:
  к,бк,з,бс,с,бз,о,бо/бз,з,бо,с,бс,о,бк,к
  Task:
  обжим кабеля ПК-коммутатор
  Decision:
  к,бк,з,бс,с,бз,о,бо
